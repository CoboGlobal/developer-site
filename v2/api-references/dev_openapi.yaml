openapi: 3.0.3
info:
  title: Cobo Wallet as a Service 2.0
  description: |
    Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of
    crypto wallet technologies with powerful and flexible access controls.

    # Wallet technologies
    - Custodial Wallet
    - MPC Wallet
    - Smart Contract Wallet (Based on Safe{Wallet}, to be supported later)
    - Exchange Wallet(To be supported later)

    # Risk Control technologies
    - Workflow
    - Access Control List (ACL)

    # Risk Control targets
    - Wallet Management
      - User/team and their permission management
      - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc.
    - Blockchain Interaction
      - Crypto transfer
      - Smart Contract Invocation

    # Important
    HTTPS only. RESTful, resource oriented

    # Get Started
    Set up your APIs or get authorization

    # Authentication and Authorization
    CoboAuth

    # Request and Response
    application/json

    # Error Handling

    ### Common error codes
    | Error Code | Description |
    | -- | -- |
    | `2000` | Internal error |
    | `2002` | Unsupported HTTP method |
    | `2003` | Missing required parameters |
    | `2006` | Illegal parameter format or value |
    | `2010` | Exceeded frequency limit |
    | `2020` | Missing action |
    | `2021` | Missing handler |
    | `2022` | Missing required request header |
    | `2023` | Verification failed |
    | `2024` | Authentication failed |
    | `2025` | Forbidden |
    | `2026` | Too many requests |
    | `2027` | Exceed quota limit |
    | `2028` | Not found |
    | `2029` | Invalid status |
    | `2040` | Duplicated key |

    ### API-specific error codes
    For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v2/wallets.

    # Rate and Usage Limiting

    # Pagination
    # Support
    [Developer Hub](https://cobo.com/developers)
  termsOfService: 'https://cobo.com/waas/tos/'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Cobo WaaS
    url: 'https://www.cobo.com/waas'
    email: support@cobo.com
  version: 1.0.0
servers:
  - url: 'https://api.dev.cobo.com/v2'
    description: Development environment
  - url: 'https://api.cobo.com/v2'
    description: Production environment
tags:
  - name: Wallets
    description: Operations related to all wallets.
  - name: Wallets - MPC Wallets
    description: Operations related to mpc wallet.
  - name: Transactions
    description: Operations related to all transactions.
  - name: Developers - Webhooks
    description: Operations related to webhooks.
paths:
  /wallets/chains:
    get:
      tags:
        - Wallets
      operationId: get_chains
      summary: List supported chains
      description: |
        This operation retrieves all chains supported by a specific wallet type or subtype. 

        It provides details such as the chain ID, chain symbol, and other relevant information. If you do not specify a wallet type, this operation returns a combination of chains supported by each wallet type. You can filter the result by chain IDs. The chain metadata is publicly available without any permission restrictions.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/chains/{chain_id}':
    parameters:
      - $ref: '#/components/parameters/chainIdParam'
    get:
      tags:
        - Wallets
      operationId: get_chain_by_id
      summary: Get chain information
      description: |
        This operation retrieves the detailed information about a specified chain.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getChainByIdResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/tokens:
    get:
      tags:
        - Wallets
      operationId: get_tokens
      summary: List supported tokens
      description: |
        This operation retrieves all tokens supported by a specific wallet type or subtype. 

        It provides details such as token ID, token symbol, and other relevant information. If you do not specify a wallet type, this operation returns a combination of tokens supported by each wallet type. You can filter the result by token IDs or chain IDs. The token metadata is publicly available without any permission restrictions.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/tokens/{token_id}':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    get:
      tags:
        - Wallets
      operationId: get_token_by_id
      summary: Get token information
      description: |
        This operation retrieves the detailed information about a specified token.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getTokenByIdResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/enabled_chains:
    get:
      tags:
        - Wallets
      operationId: get_enabled_chains
      summary: List enabled chains
      description: |
        This operation retrieves all the chains that can be used by your organization. 

        You can filter the result by wallet type or subtype. If you do not specify a wallet type, this operation returns a combination of chains that can be used by your organization for each wallet type.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/enabled_tokens:
    get:
      tags:
        - Wallets
      operationId: get_enabled_tokens
      summary: List enabled tokens
      description: |
        This operation retrieves all the tokens that can be used by your organization. 

        You can filter the result by wallet type, subtype, and chain IDs. If you do not specify a wallet type, this operation returns a combination of tokens that can be used by your organization for each wallet type.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets:
    post:
      tags:
        - Wallets
      operationId: create_wallet
      summary: Create wallet
      description: |
        This operation creates a wallet with the provided information.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'custodial_asset_wallet:create'
            - 'mpc_organization_controlled_wallet:create'
            - 'mpc_user_controlled_wallet:create'
      requestBody:
        $ref: '#/components/requestBodies/createWalletBody'
      responses:
        '201':
          $ref: '#/components/responses/createWalletResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    get:
      tags:
        - Wallets
      operationId: list_wallets
      summary: List all wallets
      description: |
        This operation retrieves the information of all wallets under your organization. You can filter the result by wallet type, subtype, and vault ID (for MPC Wallets).

        <Note>You must specify either the wallet type or subtype, or both.</Note>
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalProjectIdQueryParam'
        - $ref: '#/components/parameters/optionalVaultIdQueryParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getWalletsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/{wallet_id}':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets
      operationId: get_wallet_by_id
      summary: Get wallet information
      description: |
        This operation retrieves the detailed information about a specified wallet.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getWalletByIdResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
    put:
      tags:
        - Wallets
      operationId: update_wallet_by_id
      summary: Update wallet
      description: |
        This operation updates the information of a specified wallet.

        For Exchange Wallets, you can update the API key, API secret, and other information about your exchange accounts with this operation. For other wallet types, you can only update the wallet name.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'custodial_asset_wallet:edit'
            - 'mpc_organization_controlled_wallet:edit'
            - 'mpc_user_controlled_wallet:edit'
      requestBody:
        $ref: '#/components/requestBodies/updateWalletBody'
      responses:
        '200':
          $ref: '#/components/responses/updateWalletResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/delete':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: delete_wallet_by_id
      summary: Delete wallet
      description: |
        This operation deletes a specified wallet.

        <Note>This operation is applicable to Exchange Wallets only.</Note>
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/deleteWalletResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/spendables':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets
      operationId: get_spendable_list
      summary: List spendable UTXOs
      description: |
        The operation retrieves a list of spendable unspent transaction outputs (UTXOs) for a specified wallet and token.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/optionalAddressParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/spendableListResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/spendables/lock':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: lock_spendable_list
      summary: Lock UTXOs
      description: |
        This operation locks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/lockSpendablesBody'
      responses:
        '200':
          $ref: '#/components/responses/lockSpendableResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/spendables/unlock':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: unlock_spendable_list
      summary: Unlock UTXOs
      description: |
        This operation unlocks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/lockSpendablesBody'
      responses:
        '200':
          $ref: '#/components/responses/lockSpendableResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/max_transferable_value':
    get:
      tags:
        - Wallets
      operationId: get_max_transferable_value
      summary: Get maximum transferable value
      description: |
        This operation retrieves the maximum amount that you can transfer from a wallet or a specified wallet address, along with the corresponding transaction fee.

        You must specify `to_address` in your query because it affects the transaction fee.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/requiredFeeRateParam'
        - $ref: '#/components/parameters/toAddressParam'
        - $ref: '#/components/parameters/fromAddressParam'
      responses:
        '200':
          $ref: '#/components/responses/maxTransferableValueResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/addresses':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: generate_wallet_address
      summary: Generate new addresses in wallet
      description: |
        This operation generates one or more addresses within a specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - 'custodial_asset_wallet:add'
            - 'mpc_organization_controlled_wallet:add'
            - 'mpc_user_controlled_wallet:add'
      requestBody:
        $ref: '#/components/requestBodies/createAddressBody'
      responses:
        '201':
          $ref: '#/components/responses/createAddressResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
    get:
      tags:
        - Wallets
      operationId: list_addresses
      summary: List wallet addresses
      description: |
        This operation retrieves a list of addresses within a specified wallet.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - name: addresses
          in: query
          required: false
          description: 'A list of wallet addresses, separated by comma.'
          schema:
            type: string
            description: 'A list of wallet addresses, separated by comma.'
          example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressesResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/addresses/{address}':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
      - $ref: '#/components/parameters/addressParam'
    get:
      tags:
        - Wallets
      operationId: get_address_by_id
      summary: Get address information
      description: |
        This operation retrieves the detailed information about a specified address within a wallet.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressesResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/address/check_validity:
    get:
      tags:
        - Wallets
      operationId: check_address_validity
      summary: Check address validity
      description: |
        This operation verifies if a given address is valid for a specific token.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/requiredAddressParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressValidityResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/{wallet_id}/tokens':
    get:
      tags:
        - Wallets
      operationId: get_wallet_token_balances
      summary: List token balances by wallet
      description: |
        The operation retrieves a list of token balances within a specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/addresses/{address}/tokens':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
      - $ref: '#/components/parameters/addressParam'
    get:
      tags:
        - Wallets
      operationId: get_wallet_address_token_balances
      summary: List token balances by address
      description: |
        The operation retrieves a list of token balances for a specified address within an MPC Wallet. 

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /wallets/mpc/cobo_key_holders:
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_cobo_key_holder
      summary: List all Cobo key share holders
      description: |
        This operation retrieves a list of all Cobo key share holders and their information. 

        <Note>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Note>
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getCoboKeyHoldersResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
  /wallets/mpc/projects:
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_mpc_project
      summary: Create project
      description: |
        This operation creates a project.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_user_controlled_project:manage'
      requestBody:
        $ref: '#/components/requestBodies/createMpcProjectBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcProjectResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_mpc_project
      summary: List all projects
      description: |
        This operation retrieves a list of all projects.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/projects/{project_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_mpc_project
      summary: Get project information
      description: |
        This operation retrieves detailed information about a project.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallets
      operationId: update_mpc_project
      summary: Update project name
      description: |
        This operation updates a project's name.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_user_controlled_project:manage'
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateProjectBody'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
  /wallets/mpc/vaults:
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_mpc_vault
      summary: Create vault
      description: |
        This operation creates a vault.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_vault:manage'
            - 'mpc_user_controlled_vault:manage'
      requestBody:
        $ref: '#/components/requestBodies/createMpcVaultBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcVaultResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_mpc_vault
      summary: List all vaults
      description: |
        This operation retrieves a list of all vaults.

        <Note>By optionally specifying a project ID, you can retrieve a list of all vaults under a single project.</Note>
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalProjectIdQueryParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_mpc_vault
      summary: Get vault information
      description: |
        This operation retrieves detailed information about a vault.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallets
      operationId: modify_mpc_vault
      summary: Update vault name
      description: |
        This operation updates a vault's name.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_vault:manage'
            - 'mpc_user_controlled_vault:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateVaultBody'
      responses:
        '200':
          $ref: '#/components/responses/putVaultResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/key_groups':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_key_group
      summary: Create key share group
      description: |
        This operation creates a key share group for a specified vault.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_key_group:manage'
            - 'mpc_user_controlled_key_group:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createKeyGroupBody'
      responses:
        '201':
          $ref: '#/components/responses/createKeyGroupsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_key_group
      summary: List all key share groups
      description: |
        This operation retrieves all key share groups under a specified vault. You can filter the result by group type.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/optionalKeyGroupTypeParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyGroupsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/key_groups/{key_share_group_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_key_group
      summary: Get key share group information
      description: |
        This operation retrieves detailed information about a specified key share group.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyGroupIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyGroupResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallets
      operationId: update_key_group
      summary: Update key share group
      description: |
        This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_key_group:manage'
            - 'mpc_user_controlled_key_group:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyGroupIdParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - update_key_share_group_action
              properties:
                update_key_share_group_action:
                  type: string
                  description: |
                    The available actions of key share group update. Possible values include:
                    - `UpgradeToMainGroup`: This upgrades an active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). The original Main Group will be permanently deleted.
                  enum:
                    - UpgradeToMainGroup
                  example: UpgradeToMainGroup
      responses:
        '200':
          $ref: '#/components/responses/putKeyGroupResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    delete:
      tags:
        - Wallets - MPC Wallets
      operationId: delete_key_group
      summary: Delete key share group
      description: This operation deletes a specified key share group.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_key_group:manage'
            - 'mpc_user_controlled_key_group:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyGroupIdParam'
      responses:
        '204':
          description: Resource successfully deleted.
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_tss_request
      summary: Create TSS request
      description: |
        This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_tss_request:manage'
            - 'mpc_user_controlled_tss_request:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createTssRequestBody'
      responses:
        '201':
          description: mpc vault successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_tss_request
      summary: List TSS requests
      description: |
        This operation retrieves a list of TSS requests and their details.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/requiredTargetKeyGroupIdParam'
      responses:
        '200':
          description: Successfully retrieved TSS request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TSSRequest'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_tss_request
      summary: Get TSS request
      description: |
        This operation retrieves detailed information about a TSS request.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_tss_request:manage'
            - 'mpc_user_controlled_tss_request:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getTssRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: cancel_tss_request
      summary: Cancel TSS request
      description: |
        This operation cancels a TSS request.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_tss_request:manage'
            - 'mpc_user_controlled_tss_request:manage'
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
      responses:
        '200':
          $ref: '#/components/responses/putTssRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  /transactions/fee_rates:
    get:
      tags:
        - Transactions
      operationId: list_fee_rates
      summary: Get fee rates
      description: |
        This operation retrieves current transaction fee rates on the blockchain based on the specified chain ID.

        The response can contain different properties based on the transaction fee model used by the chain, including EIP-1559 fee model, legacy fee model, UTXO fee model, and fixed fee model.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/requiredChainIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainFeeResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  /transactions/estimate_fee:
    post:
      tags:
        - Transactions
      operationId: estimate_fee
      summary: Estimate transaction fee
      description: |
        This operation estimates the transaction fee rates of a token transfer or a contract call for three different transaction speeds (slow, recommended, and fast), based on factors such as network congestion and transaction complexity.

        You need to specify the transaction information, including the request ID, request type, source address, destination address, and token ID of the transaction fee.

        The response can contain different properties based on the transaction fee model used by the chain, including EIP-1559 fee model, legacy fee model, UTXO fee model, and fixed fee model.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeBody'
      responses:
        '200':
          $ref: '#/components/responses/estimateFeeResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  /transactions/transfer:
    post:
      tags:
        - Transactions
      operationId: create_transfer_transaction
      summary: Transfer token
      description: |
        The operation transfers your assets from a wallet created on Cobo Protal to another address.

        You need to specify details such as the sender address and recipient address, token ID, and the amount to transfer. You can specify the fee-related properties to limit the transaction fee.

        A transaction request for tracking is returned upon successful operation.

        <Note>Only MPC Wallets as the transaction source can transfer tokens to multiple addresses by using the <code>utxo_outputs</code> property.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - 'custodial_asset_wallet:withdraw'
            - 'mpc_organization_controlled_wallet:withdraw'
            - 'mpc_user_controlled_wallet:withdraw'
      requestBody:
        $ref: '#/components/requestBodies/createTransferBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions/contract_call:
    post:
      tags:
        - Transactions
      operationId: create_contract_call_transaction
      summary: Call smart contract
      description: |
        This operation creates a transaction to interact with a smart contract on the blockchain.

        You need to provide details such as the source address, destination address, and the calldata. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        Currently, this operation only applies to blockchains that have a similar architecture to Ethereum.
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_wallet:contract_call'
            - 'mpc_user_controlled_wallet:contract_call'
      requestBody:
        $ref: '#/components/requestBodies/createSmartContractCallBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions/message_sign:
    post:
      tags:
        - Transactions
      operationId: create_message_sign_transaction
      summary: Sign message
      description: |
        This operation creates a transaction to sign the provided message using cryptographic techniques.

        In some scenarios, you want to sign a message for identity authentication or transaction approval. You need to provide details such as the source address, destination address, and the message to be signed. A transaction request for tracking is returned upon successful operation.

        Currently, only MPC Wallets support this type of transaction to sign a message. 
      security:
        - CoboAuth: []
        - OAuth2:
            - 'mpc_organization_controlled_wallet:message_sign'
            - 'mpc_user_controlled_wallet:message_sign'
      requestBody:
        $ref: '#/components/requestBodies/createMessageSignBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions:
    get:
      tags:
        - Transactions
      operationId: list_transactions
      summary: List all transactions
      description: |
        This operation retrieves all the transactions under your organization.

        You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalRequestIdParam'
        - $ref: '#/components/parameters/optionalCoboIdParam'
        - name: transaction_id
          in: query
          required: false
          description: The transaction ID.
          schema:
            type: string
            format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        - name: transaction_hash
          in: query
          required: false
          description: The transaction hash.
          schema:
            type: string
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        - $ref: '#/components/parameters/optionalTransactionTypeListParam'
        - $ref: '#/components/parameters/optionalTransactionStatusListParam'
        - $ref: '#/components/parameters/optionalTransactionSourceTypeListParam'
        - $ref: '#/components/parameters/optionalTransactionSourceAddressListParam'
        - $ref: '#/components/parameters/optionalTransactionSourceWalletIdListParam'
        - $ref: '#/components/parameters/optionalTransactionDestinationTypeListParam'
        - $ref: '#/components/parameters/optionalTransactionDestinationAddressListParam'
        - $ref: '#/components/parameters/optionalTransactionDestinationWalletIdListParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/optionalAssetIdListParam'
        - $ref: '#/components/parameters/optionalVaultIdListQueryParam'
        - $ref: '#/components/parameters/optionalProjectIdListQueryParam'
        - $ref: '#/components/parameters/optionalMinCreatedTimestampParam'
        - $ref: '#/components/parameters/optionalMaxCreatedTimestampParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTransactionsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/transactions/{transaction_id}':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    get:
      tags:
        - Transactions
      operationId: get_transaction_by_id
      summary: Get transaction information
      description: |
        This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getTransactionByIdResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/resend':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: resend_transaction_by_id
      summary: Resend transaction
      description: |
        This operation resends a specified transaction. 

        Resending a transaction initiates a new attempt to process the transaction that failed previously. A transaction can be resent if its status is `failed`.

        A transaction request for tracking is returned upon successful operation.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/resendTransactionBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/cancel':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: cancel_transaction_by_id
      summary: Cancel transaction
      description: |
        This operation cancels a specified transaction. A transaction can be cancelled if its status is either of the following:
        - `Submitted`
        - `PendingScreening`
        - `PendingAuthorization`
        - `PendingSignature` 

        A transaction request for tracking is returned upon successful operation.
      security:
        - CoboAuth: []
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/drop':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: drop_transaction_by_id
      summary: Drop transaction
      description: |
        This operation drops a specified transaction. 

        Dropping a transaction will trigger a Replace-By-Fee (RBF) transaction which is a new version of the original transaction. For EVM chains, this RBF transaction has a transfer amount of `0` and the sending address is the same as the receiving address. It has a higher transaction fee to incentivize miners to prioritize its confirmation over the previous one. A transaction can be dropped if its status is `Broadcasting` or `Confirming`.

        A transaction request for tracking is returned upon successful operation.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/speedup':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: speedup_transaction_by_id
      summary: Speed up transaction
      description: |
        This operation accelerates a specified transaction. 

        Speeding up a transaction will trigger an RBF transaction which is a new version of the original transaction. It shares the same inputs but has a higher transaction fee to incentivize miners to prioritize its confirmation over the previous one. A transaction can be accelerated if its status is either `Broadcasting` or `Confirming`.

        A transaction request for tracking is returned upon successful operation.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /webhooks/endpoints:
    get:
      tags:
        - Developers - Webhooks
      summary: List webhook endpoints
      description: This operation retrieves the information of all webhook endpoints registered under your organization. You can filter the result by endpoint status and the subscribed event type.
      operationId: list_webhook_endpoints
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/EndpointStatus'
          required: false
        - in: query
          name: event_type
          schema:
            $ref: '#/components/schemas/WebhookEventType'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listWebhookEndpointsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    post:
      tags:
        - Developers - Webhooks
      summary: Register webhook endpoint
      description: This operation registers a new webhook endpoint for your organization.
      operationId: create_webhook_endpoint
      security:
        - CoboAuth: []
        - OAuth2:
            - 'webhook_url:edit'
      requestBody:
        $ref: '#/components/requestBodies/createWebhookEndpointBody'
      responses:
        '201':
          $ref: '#/components/responses/createWebhookEndpointResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/webhooks/endpoints/{endpoint_id}':
    parameters:
      - $ref: '#/components/parameters/endpointIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: Get webhook endpoint information
      description: This operation retrieves the information of a specified webhook endpoint.
      operationId: get_webhook_endpoint_by_id
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEndpointResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
    put:
      tags:
        - Developers - Webhooks
      summary: Update webhook endpoint
      description: This operation updates the information of a specified webhook endpoint.
      operationId: update_webhook_endpoint
      security:
        - CoboAuth: []
        - OAuth2:
            - 'webhook_url:edit'
      requestBody:
        $ref: '#/components/requestBodies/updateWebhookBody'
      responses:
        '200':
          $ref: '#/components/responses/updateWebhookEndpointResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  /webhooks/events/definitions:
    get:
      tags:
        - Developers - Webhooks
      summary: Get webhook event types
      description: This operation retrieves all supported webhook event types.
      operationId: list_webhook_event_definitions
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEventDefinitionsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/webhooks/endpoints/{endpoint_id}/events':
    get:
      tags:
        - Developers - Webhooks
      summary: List all events
      description: |
        This operation retrieves a list of webhook events that have occurred within the last 30 days.

        Note: The request will only return webhook events that have occurred to the wallets associated with your current API key. For example, if the current API key is only associated with Custodial Wallets, any webhook events that have occurred to an MPC Wallet will not be retrieved with the current API key.
      operationId: list_events
      parameters:
        - $ref: '#/components/parameters/endpointIdParam'
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/WebhookEventStatus'
          required: false
          example: Success
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/WebhookEventType'
          required: false
          example: wallets.transaction.updated
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listWebhookEventsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
  '/webhooks/endpoints/{endpoint_id}/events/{event_id}':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
      - $ref: '#/components/parameters/endpointIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: Retrieve event information
      description: |
        This operation retrieves the information of a webhook event by the event ID.
      operationId: get_webhook_event
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEventResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/webhooks/endpoints/{endpoint_id}/events/{event_id}/logs':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
      - $ref: '#/components/parameters/endpointIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: List event logs
      description: |
        This operation retrieves a list of webhook event logs by event ID. Each retry will generate a separate event log.
      operationId: get_webhook_event_logs
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEventLogsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/webhooks/endpoints/{endpoint_id}/events/{event_id}/retry':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
      - $ref: '#/components/parameters/endpointIdParam'
    post:
      tags:
        - Developers - Webhooks
      summary: Retry event
      description: |
        This operation retries delivering a webhook event with the specified event ID. You can only retry delivering a webhook event in the `Retrying` or `Failed` status.
      operationId: retry_webhook_event
      security:
        - CoboAuth: []
        - OAuth2:
            - 'webhook:resend'
      responses:
        '201':
          $ref: '#/components/responses/retryWebhookEventResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
components:
  schemas:
    Pagination:
      type: object
      description: The pagination information of the returned data.
      required:
        - before
        - after
        - total_count
      properties:
        before:
          type: string
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          description: |
            An object ID that serves as a starting point for retrieving data in reverse chronological order for the next request. 

            If this property is empty, it means that you have reached the start of the data records.
        after:
          type: string
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
          description: |
            An object ID that acts as a starting point for retrieving data in chronological order for the next request.

            If this property is empty, it means that you have reached the end of the data records.
        total_count:
          type: integer
          example: 10000
          description: The number of data objects returned.
    ErrorResponse:
      type: object
      description: The response of a failed request.
      required:
        - error_code
        - error_message
        - error_id
      properties:
        error_code:
          type: integer
          description: The error code.
        error_message:
          type: string
          description: The error description.
        error_id:
          type: string
          description: The error log ID. You can provide the error ID when submitting a ticket to help Cobo to locate the issue.
          example: 0b6ddf19083c4bd1a9ca01bec44b24dd
    AssetInfo:
      type: object
      description: The asset information.
      required:
        - asset_id
      properties:
        asset_id:
          type: string
          description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
          example: USDT
        display_code:
          type: string
          description: The asset symbol. You can use the value for display purposes.
          example: USDT
        description:
          type: string
          description: The description of the asset.
          example: Tether USDT
        icon_url:
          type: string
          description: The URL of the asset icon.
          example: 'https://d.cobo.com/public/logos/USDT.png'
    TokenInfo:
      type: object
      description: The token information.
      required:
        - token_id
        - chain_id
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        chain_id:
          type: string
          description: The ID of the chain on which the token operates.
          example: ETH
        asset_id:
          type: string
          description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
          example: USDT
        symbol:
          type: string
          description: 'The token symbol, which is the abbreviated name of a token.'
          example: USDT
        name:
          type: string
          description: 'The token name, which is the full name of a token.'
          example: Tether USDT
        decimal:
          type: integer
          description: The token decimal.
          example: 18
        icon_url:
          type: string
          description: The URL of the token icon.
          example: 'https://d.cobo.com/public/logos/USDT.png'
        token_address:
          type: string
          description: 'The token address, if applicable.'
          example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
        fee_token_id:
          type: string
          description: The fee token ID. A fee token is the token with which you pay transaction fees.
          example: ETH
        can_deposit:
          type: boolean
          description: Whether deposits are enabled for this token.
          example: true
        can_withdraw:
          type: boolean
          description: Whether withdrawals are enabled for this token.
          example: true
    ExtendedTokenInfo:
      type: object
      description: 'The token information, including whether the token can be deposited or withdrawn.'
      allOf:
        - type: object
          properties:
            can_deposit:
              type: boolean
              description: |
                Whether the token can be deposited.

                - `true`: The token can be deposited.

                - `false`: The token cannot be deposited.
              default: false
              example: false
            can_withdraw:
              type: boolean
              description: |
                Whether the token can be withdrawn.

                - `true`: The token can be withdrawn.

                - `false`: The token cannot be withdrawn.
              default: false
              example: false
        - $ref: '#/components/schemas/TokenInfo'
    ChainInfo:
      type: object
      description: The chain information.
      required:
        - chain_id
      properties:
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        symbol:
          type: string
          description: 'The chain symbol, which is the abbreviated name of a chain.'
          example: ETH
        icon_url:
          type: string
          description: The URL of the chain icon.
          example: 'https://d.cobo.com/public/logos/ETH.png'
        explorer_tx_url:
          type: string
          description: The transaction URL pattern on the blockchain explorer. You can use it to concatenate the transaction URLs.
          example: 'https://etherscan.io/tx/{txn_id}'
        explorer_address_url:
          type: string
          description: The address URL pattern on the blockchain explorer. You can use it to concatenate the address URLs.
          example: 'https://etherscan.io/address/{address}'
        require_memo:
          type: boolean
          description: Whether the chain requires a memo.
          example: false
    WalletType:
      type: string
      enum:
        - Custodial
        - MPC
        - SmartContract
        - Exchange
      example: Custodial
      description: |
        The wallet type.

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
    WalletSubtype:
      type: string
      enum:
        - Asset
        - Web3
        - Main
        - Sub
        - Org-Controlled
        - User-Controlled
        - 'Safe{Wallet}'
      example: Asset
      description: |
        The wallet type. Possible values include:
        - `Asset`: Custodial Wallets (Asset Wallets).
        - `Web3`: Custodial Wallets (Web3  Wallets).
        - `Main`: Exchange Wallets (Main Account).
        - `Sub`: Exchange Wallets (Sub Account).
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
    SmartContractWalletType:
      type: string
      enum:
        - SafeWallet
      example: SafeWallet
      default: SafeWallet
      description: The Smart Contract Wallet type.
    SmartContractWalletOperationType:
      type: string
      enum:
        - CoboSafe
      example: CoboSafe
      default: CoboSafe
      description: The way you interact with the Smart Contract Wallet.
    ExchangeId:
      type: string
      enum:
        - binance
        - okx
        - deribit
        - bybit
        - gate
      description: |
        The ID of the exchange:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
      example: binance
    TokenBalance:
      type: object
      description: The balance information.
      required:
        - token_id
        - balance
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: BTC
        balance:
          type: object
          description: The balance details.
          required:
            - total
            - available
          properties:
            total:
              type: string
              description: 'The total balance, which is the sum of the available, pending, and locked balances.'
              example: '100.0'
            available:
              type: string
              description: The balance free to use.
              example: '80.5'
            pending:
              type: string
              description: The balance that is currently pending confirmation.
              default: '0'
              example: '10.5'
            locked:
              type: string
              description: The balance that is currently not accessible to transactions.
              default: '0'
              example: '3.0'
    AssetBalance:
      type: object
      description: The data for token balance information.
      required:
        - asset_id
        - balance
      properties:
        asset_id:
          type: string
          description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
          pattern: '^[A-Z0-9]+$'
          example: USDT
        balance:
          $ref: '#/components/schemas/TokenBalance/properties/balance'
    SafeWallet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CustodialWalletInfo'
            - type: object
              properties:
                chain_id:
                  type: string
                  description: The ID of the chain on which the wallet operates.
                  example: ETH
                label:
                  type: string
                  description: The wallet label.
                  example: My Wallet
        - type: object
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The Smart Contract Wallet address.
            signers:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: The signers of the Smart Contract Wallet.
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: 'The minimum number of confirmations required for the Smart Contract Wallet. '
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The address of Cobo Safe.
            initiator:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: 'The initiator''s wallet ID. '
                wallet_type:
                  type: string
                  example: MPC
                  description: 'The initiator''s wallet type. '
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: 'The initiator''s wallet address. '
    CustodialWalletInfo:
      type: object
      title: Custodial Wallets
      description: The basic information of a wallet.
      required:
        - wallet_id
        - wallet_type
        - wallet_subtype
        - name
        - org_id
      properties:
        wallet_id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The wallet ID.
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        name:
          type: string
          example: Example Wallet
          description: The wallet name.
        org_id:
          type: string
          description: The ID of the owning organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    MPCWalletInfo:
      title: MPC Wallets
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - vault_id
          properties:
            vault_id:
              type: string
              description: The ID of the owning vault.
    SmartContractWalletInfo:
      title: Smart Contract Wallets
      oneOf:
        - $ref: '#/components/schemas/SafeWallet'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          Safe: '#/components/schemas/SafeWallet'
    ExchangeWalletInfo:
      title: Exchange Wallets
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - apikey
            - exchange_id
          properties:
            apikey:
              type: string
              description: The API key of your exchange account.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            parent_wallet_id:
              type: string
              description: The wallet ID of the Main Account associated with the Sub Account. This property is returned only if you are creating or querying an Exchange Wallet (Sub Account).
              format: uuid
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            sub_accounts:
              type: array
              items:
                type: object
                required:
                  - wallet_id
                  - account_id
                properties:
                  wallet_id:
                    type: string
                    format: uuid
                    example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                    description: The wallet ID of the Sub Account. This property is returned only if you are creating or querying an Exchange Wallet (Main Account).
                  account_id:
                    type: string
                    description: 'The Sub Account ID. It can be an email address, a user name, or a custom account ID. This property is returned only if you are creating or querying an Exchange Wallet (Main Account).'
                    example: sub01@xx.com
    WalletInfo:
      oneOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - $ref: '#/components/schemas/MPCWalletInfo'
        - $ref: '#/components/schemas/SmartContractWalletInfo'
        - $ref: '#/components/schemas/ExchangeWalletInfo'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          SmartContract: '#/components/schemas/SmartContractWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
    CreatedWallet:
      oneOf:
        - $ref: '#/components/schemas/CreateCustodialWallet'
        - $ref: '#/components/schemas/CreateMpcWallet'
        - $ref: '#/components/schemas/CreateSmartContractWallet'
        - $ref: '#/components/schemas/CreateExchangeWallet'
      discriminator:
        propertyName: type
        mapping:
          Custodial: '#/components/schemas/CreateCustodialWallet'
          MPC: '#/components/schemas/CreateMpcWallet'
          SmartContract: '#/components/schemas/CreateSmartContractWallet'
          Exchange: '#/components/schemas/CreateExchangeWallet'
    UTXO:
      type: object
      description: The UTXO information.
      properties:
        tx_hash:
          type: string
          description: The transaction hash of the UTXO.
          example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        vout_n:
          type: integer
          description: The output index of the UTXO.
          example: 0
        address:
          type: string
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token.'
          example: BTC
        value:
          type: string
          description: The value of the UTXO.
          example: '0.5'
        is_coinbase:
          type: boolean
          description: Whether the UTXO comes from a coinbase transaction.
          example: false
        is_locked:
          type: boolean
          description: Whether the UTXO is locked.
          example: false
        confirmed_number:
          type: integer
          description: The number of confirmations for the UTXO.
          example: 66716
    MaxTransferableValue:
      type: object
      description: 'The maximum amount you can transfer from the wallet or the specified wallet address, along with the corresponding transaction fee.'
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH
        max_transferable_value:
          type: string
          description: The maximum amount you can transfer from the wallet or the specified wallet address.
          example: '3.0'
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    AddressInfo:
      type: object
      description: The address information.
      required:
        - address
        - token_id
      properties:
        address:
          type: string
          description: The wallet address.
          example: '0x0000000000000000000000000000000000000000'
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH_USDT
        memo:
          type: string
          description: The memo code.
          example: '82840924'
        path:
          type: string
          description: The derivation path of the address. This property applies to MPC Wallets only.
          example: m/44'/60'/0'/0
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
        pubkey:
          type: string
          description: The public key of the address. This property applies to MPC Wallets only.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
    AddressEncoding:
      type: string
      enum:
        - ENCODING_P2PKH
        - ENCODING_P2SH_P2WPKH
        - ENCODING_BECH32
        - ENCODING_P2PKH_UNCOMPRESSED
        - ENCODING_P2SH_P2MS
        - ENCODING_P2SH_P2WSH_P2MS
        - ENCODING_P2TR
      description: The address encoding formats. This property only applies to blockchains that have a similar architecture to Bitcoin.
      example: ENCODING_P2PKH
    CreateCustodialWallet:
      type: object
      title: Custodial Wallets
      required:
        - name
        - wallet_type
        - wallet_subtype
      description: The information of Custodial Wallets.
      properties:
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
    CreateMpcWallet:
      title: MPC Wallets
      allOf:
        - $ref: '#/components/schemas/CreateCustodialWallet'
        - type: object
          required:
            - vault_id
          properties:
            vault_id:
              type: string
              description: 'The ID of the owning vault. You can call [List all vaults](/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults) to retrieve all vault IDs under your organization.'
    CreateSmartContractWallet:
      title: Smart Contract Wallets
      oneOf:
        - $ref: '#/components/schemas/CreateSafeWallet'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          Safe: '#/components/schemas/CreateSafeWallet'
    CreateSafeWallet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CreateCustodialWallet'
            - type: object
              required:
                - chain_id
              properties:
                label:
                  type: string
                  description: The wallet label.
                  example: ETH
                chain_id:
                  type: string
                  description: The ID of the chain that the wallet operates on.
                  example: ETH
        - type: object
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: 'The address of the Smart Contract Wallet. If this is not provided, Cobo will create a new Safe{Wallet} and set up Cobo Safe for you. In that case, the `threshold` and `signers` properties are required.'
            signers:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: 'The signers of the Smart Contract Wallet. This property is required when creating a new Safe{Wallet}.'
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: 'The minimum number of confirmations required for the Smart Contract Wallet. This property is required when creating a new Safe{Wallet}.'
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: 'The address of Cobo Safe. If you are importing an existing Safe{Wallet}, Cobo Safe must have been created and enabled.'
            initiator:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: 'The initiator''s wallet ID. This property is required when creating a new Safe{Wallet}.'
                wallet_type:
                  type: string
                  example: MPC
                  description: 'The initiator''s wallet type. This property is required when creating a new Safe{Wallet}.'
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: 'The initiator''s wallet address. This property is required when creating a new Safe{Wallet}.'
    CreateExchangeWallet:
      title: Exchange Wallets
      allOf:
        - $ref: '#/components/schemas/CreateCustodialWallet'
        - type: object
          required:
            - exchange_id
            - apikey
            - secret
          properties:
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            apikey:
              type: string
              description: The API key of your exchange account.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            secret:
              type: string
              description: The API secret of your exchange account.
              example: 75B4F636193162488A3728B4A5797708
            passphrase:
              type: string
              description: The passphrase of your exchange account.
              example: sXASDKWKLLsWWEE
            memo:
              type: string
              description: The memo you use when applying for the API key of your exchange account.
              example: xxx@cobo.com
            account_identify:
              type: string
              description: |
                The identifier of your exchange account.
                - For Binance, this is email address of your exchange account.
                - For OKX, this is the user name of your exchange account.
              example: xxx@cobo.com
            ga_code:
              type: string
              description: The GA code for the exchange.
              example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
            main_wallet_id:
              type: string
              description: The ID of the Exchange Wallet (Main Account).
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    CurveType:
      type: string
      enum:
        - SECP256K1
        - ED25519
      example: ED25519
      description: |
        The elliptic curve type of the [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key). Possible values include:

        - `SECP256K1`: The secp256k1 elliptic curve.

        - `ED25519`: The Ed25519 elliptic curve.
    KeyGroup:
      type: object
      description: The data for key share group information.
      properties:
        group_id:
          type: string
          example: '880311524363903326'
          description: The key share group ID.
        type:
          $ref: '#/components/schemas/KeyGroupType'
        tss_group_ids:
          type: array
          items:
            $ref: '#/components/schemas/TSSGroupId'
        key_holders:
          type: array
          items:
            $ref: '#/components/schemas/KeyHolder'
        node_count:
          type: integer
          description: The number of key share holders in this key share group.
          example: 3
        threshold:
          type: integer
          description: The number of key share holders required to approve each operation in this key share group.
          example: 2
        status:
          $ref: '#/components/schemas/KeyGroupStatus'
        create_timestamp:
          type: integer
          format: int64
          description: 'The key share group''s creation time in Unix timestamp format, measured in milliseconds.'
          example: 1718619403933
    KeyGroupStatus:
      type: string
      enum:
        - New
        - Valid
        - Unavailable
      example: Valid
      description: |
        The status of the key share group. Possible values include:
        - `New`: The key share group has been newly created. The status will become `Valid` after you call [Create TSS request](/api-references/v2/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) and specifying this key share group as the target key share group.

        - `Valid`: The key share group is valid.

        - `Unavailable`: The key share group is currently unavailable. This status appears when a key share holder uses [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) to change node. For example, when a key share holder changes to a new phone or loses their phone, and is in the process of setting up [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on their new phone.
    KeyGroupType:
      type: string
      enum:
        - MainGroup
        - SigningGroup
        - RecoveryGroup
      example: MainGroup
      description: |
        The type of key share group. Possible values include:

        - `MainGroup`: A [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `SigningGroup`: A [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `RecoveryGroup`: A [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        **Note:** For `MainGroup` and `SigningGroup`, a Cobo key share holder will be added automatically.
    KeyHolder:
      type: object
      description: The data for MPC Wallets' key share holder information.
      properties:
        name:
          type: string
          description: The key share holder name.
          example: Key share holder name
        type:
          $ref: '#/components/schemas/KeyHolderType'
        tss_node_id:
          type: string
          description: Key share holder's TSS Node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        online:
          type: boolean
          description: |
            Whether the key share holder's TSS Node is online.
            - `true`: The TSS Node is online.

            - `false`: The TSS Node is offline.
        status:
          $ref: '#/components/schemas/KeyHolderStatus'
    KeyHolderStatus:
      type: string
      enum:
        - Valid
        - NotConfigured
        - NotActivated
        - Changed
      example: Valid
      description: |
        The status of key share holder's TSS Node. Possible values include:
        - `Valid`: The TSS Node is configured and activated.

        - `NotConfigured`: The TSS Node has not been configured. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `NotActivated`: The TSS Node has not been activated. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `Changed`: The TSS Node has been changed. This happens when the key share holder sets up their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on a new phone. This `Changed` status serves as a reminder for you to call [Create TSS request](/api-references/v2/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) with the `KeyGenFromKeyGroup` and `Recovery` action `type` to finalize the setup of the key share holder's new phone. Once all set, the old TSS Node with the `Changed` status will be deleted.
    KeyHolderType:
      type: string
      enum:
        - Cobo
        - Mobile
        - API
      example: Cobo
      description: |
        Key share holder's TSS Node type. Possible values include:

        - `Cobo`: The TSS Node was generated and held by Cobo.

        - `Mobile`: The TSS Node was generated by a [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `API`: The TSS Node was generated by an [API co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#api-co-signer) using the [TSS Node software package](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment).
    MPCVault:
      type: object
      description: The data for vault information.
      properties:
        vault_id:
          type: string
          example: YPdbyVaVGqXXjkUsohHw
          description: The vault ID.
        name:
          type: string
          example: Vault name
          description: The vault name.
        type:
          $ref: '#/components/schemas/MPCVaultType'
        root_pubkeys:
          type: array
          items:
            $ref: '#/components/schemas/RootPubkey'
        create_timestamp:
          type: integer
          format: int64
          description: 'The vault''s creation time in Unix timestamp format, measured in milliseconds.'
          example: 1718619403933
    MPCVaultType:
      type: string
      enum:
        - OrgControlled
        - UserControlled
      example: OrgControlled
      description: |
        The vault type. Possible values include:
        - `OrgControlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).

        - `UserControlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).
    MPCProject:
      type: object
      description: The data for project information.
      properties:
        project_id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: The project ID.
        org_id:
          type: string
          example: f3b4a616-9c43-462e-8cb4-343e304fee64
          description: 'The [Organization](https://manuals.cobo.com/en/portal/organization/introduction) ID.'
        name:
          type: string
          example: Project name
          description: The project name.
        node_count:
          type: integer
          example: 3
          description: The number of key share holders in the project.
        threshold:
          type: integer
          example: 2
          description: The number of key share holders required to sign an operation in the project.
        create_timestamp:
          type: integer
          format: int64
          example: 1718619403933
          description: 'The project''s creation time in Unix timestamp format, measured in milliseconds.'
    RootPubkey:
      type: object
      description: The data for MPC Root Extended Public Key information.
      properties:
        pubkey:
          type: string
          description: 'The vault''s [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key).'
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        curve:
          $ref: '#/components/schemas/CurveType'
    TSSGroupId:
      type: object
      description: The data for the TSS group ID.
      properties:
        group_id:
          type: string
          description: The TSS group ID.
          example: mMedDioOKhTlhGyQRzMv
        curve:
          $ref: '#/components/schemas/CurveType'
    TSSRequest:
      type: object
      description: The data for the TSS request information.
      properties:
        request_id:
          type: string
          description: The TSS request ID.
          example: YPdbyVaVGqXXjkUsohHw
        type:
          $ref: '#/components/schemas/TSSRequestType'
        status:
          $ref: '#/components/schemas/TSSRequestStatus'
    TSSRequestStatus:
      type: string
      enum:
        - PendingKeyHolderConfirmation
        - KeyHolderConfirmationFailed
        - KeyGenerating
        - KeyGeneratingFailed
        - Success
      example: Success
      description: |
        The TSS request status. Possible values include:
        - `PendingKeyHolderConfirmation`: The action done to the TSS request is currently pending enough key share holders to approve.

        - `KeyHolderConfirmationFailed`: Key share holders failed to approve the the action to be done to the TSS request.

        - `KeyGenerating`: The key share is currently being generated for the action to be done to the TSS request.

        - `KeyGeneratingFailed`: The key share generation process has failed for the action to be done to the TSS request.

        - `Success`: The action done to the TSS request has been completed successfully. If you see this status while running [Cancel TSS request](http://localhost:3000/v2/api-references/wallets--mpc-wallets/cancel-tss-request), this mean the specified TSS request has been successfully canceled.
    TSSRequestType:
      type: string
      enum:
        - KeyGen
        - KeyGenFromKeyGroup
        - Recovery
      example: KeyGen
      description: |
        The TSS request type. Possible values include:
        - `KeyGen`: This is a key generation request to create a [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key) and key shares for your [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created the Main Group with [Create key share group](/developers/v2/api-references/wallets--mpc-wallets/create-key-share-group). You only need to do this once per [Organization](https://manuals.cobo.com/en/portal/organization/introduction).

        - `KeyGenFromKeyGroup`: This is a request to use the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to create key shares for your [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) or [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created these key share groups with [Create key share group](/developers/v2/api-references/wallets--mpc-wallets/create-key-share-group).

        - `Recovery`: This is a request to create key shares using the [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) for a key share holder in the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) if their key share has been lost (e.g. by losing their phone).
    FeeType:
      type: string
      enum:
        - Fixed
        - EVM_EIP_1559
        - EVM_Legacy
        - UTXO
      example: EVM_EIP_1559
      default: EVM_EIP_1559
      description: |
        The fee model. Possible values include:
        - `Fixed`: The fixed fee model. 
        - `EVM_EIP_1559`: The EIP-1559 fee model.
        - `EVM_Legacy`: The legacy fee model.
        - `UTXO`: The fee model used in UTXO-based blockchains, such as Bitcoin.
    FeeAmount:
      type: object
      description: The maximum transaction fee.
      required:
        - max_fee_amount
      properties:
        max_fee_amount:
          type: string
          description: The maximum fee that you are willing to pay for the transaction. The transaction will fail if the transaction fee exceeds the maximum fee.
          example: '0.1'
    FeeData:
      type: object
      required:
        - gas_limit
      properties:
        gas_limit:
          type: string
          description: The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
          default: '21000'
          example: '21000'
    EvmEip1559FeeBasePrice:
      type: object
      description: 'The transaction fee price based on the EIP-1559 fee model, which equals the base fee price plus the maximum priority fee.'
      title: EIP-1559
      required:
        - max_priority_fee
        - base_fee
      properties:
        max_priority_fee:
          type: string
          description: 'The maximum priority fee, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.'
          example: '1000000000000'
        base_fee:
          type: string
          description: 'The base fee price of the chain, in wei.'
          example: '9000000000000'
    EvmLegacyFeeBasePrice:
      type: object
      description: 'The transaction fee price based on the legacy fee model, which equals the gas price.'
      required:
        - gas_price
      properties:
        gas_price:
          type: string
          description: 'The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.'
          example: '100000000'
    UtxoFeeBasePrice:
      type: object
      description: 'The transaction fee price for UTXO-based chains (such as Bitcoin), which equals the fee rate.'
      required:
        - fee_rate
      properties:
        fee_rate:
          type: string
          description: The fee rate in sat/vByte. The fee rate represents the satoshis you are willing to pay for each byte of data that your transaction will consume on the blockchain.
          example: '50'
    EvmEip1559FeePrice:
      type: object
      description: The transaction fee price based on the EIP-1559 fee model.
      title: EIP-1559
      required:
        - fee_type
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        slow:
          $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        recommended:
          $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        fast:
          $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
    EvmLegacyFeePrice:
      type: object
      description: The transaction fee price based on the legacy fee model.
      title: Legacy
      required:
        - fee_type
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        slow:
          $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        recommended:
          $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        fast:
          $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
    UtxoFeePrice:
      type: object
      description: The transaction fee price for UTXO-based chains.
      title: UTXO
      required:
        - fee_type
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: BTC
        slow:
          $ref: '#/components/schemas/UtxoFeeBasePrice'
        recommended:
          $ref: '#/components/schemas/UtxoFeeBasePrice'
        fast:
          $ref: '#/components/schemas/UtxoFeeBasePrice'
    FixedFee:
      type: object
      description: The transaction fee that you are willing to pay based on the fixed fee model for come blockchains. The fee can vary between different chains.
      title: Fixed
      required:
        - fee_type
        - token_id
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH_USDT
        - $ref: '#/components/schemas/FeeAmount'
    EvmEip1559Fee:
      type: object
      description: The estimated transaction fee based on the EIP-1559 fee model.
      title: EIP-1559
      required:
        - fee_type
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        slow:
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        recommended:
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        fast:
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
    EvmLegacyFee:
      type: object
      description: The estimated transaction fee based on the legacy fee model.
      title: Legacy
      required:
        - fee_type
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        slow:
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        recommended:
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        fast:
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
    UtxoFee:
      type: object
      description: The estimated transaction fee for UTXO-based chains.
      title: UTXO
      required:
        - fee_type
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token ID of the transaction fee.
          example: ETH
        slow:
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        recommended:
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        fast:
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
    FeeRate:
      oneOf:
        - $ref: '#/components/schemas/EvmEip1559FeePrice'
        - $ref: '#/components/schemas/EvmLegacyFeePrice'
        - $ref: '#/components/schemas/UtxoFeePrice'
        - $ref: '#/components/schemas/FixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559FeePrice'
          EVM_Legacy: '#/components/schemas/EvmLegacyFeePrice'
          UTXO: '#/components/schemas/UtxoFeePrice'
          Fixed: '#/components/schemas/FixedFee'
    EstimationFee:
      oneOf:
        - $ref: '#/components/schemas/EvmEip1559Fee'
        - $ref: '#/components/schemas/EvmLegacyFee'
        - $ref: '#/components/schemas/UtxoFee'
        - $ref: '#/components/schemas/FixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          Fixed: '#/components/schemas/FixedFee'
          EVM_EIP_1559: '#/components/schemas/EvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/EvmLegacyFee'
          UTXO: '#/components/schemas/UtxoFee'
    EvmEip1559TransactionFee:
      type: object
      description: |
        The transaction fee is calculated by multiplying the sum of the base fee price and the maximum priority fee by the gas units used by the transaction. This can be expressed as: Transaction fee = (base fee price + maximum priority fee) * gas units used. If the gas units used exceeds the gas limit, the transaction will fail.
      title: EIP-1559
      required:
        - fee_type
        - token_id
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    EvmLegacyTransactionFee:
      type: object
      description: |
        The transaction fee is calculated by multiplying the gas price (fee price) by the gas units used by the transaction. This can be expressed as: Transaction fee =  (gas price * gas units used). If the gas units used exceeds the gas limit, the transaction will fail.
      required:
        - fee_type
        - token_id
      title: Legacy
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    UtxoTransactionFee:
      type: object
      description: |
        The transaction fee is calculated by multiplying the fee rate (fee price) by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size. The transaction will fail if the transaction fee exceeds the maximum fee. 
      required:
        - fee_type
        - token_id
      title: UTXO
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: BTC
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
        - $ref: '#/components/schemas/FeeAmount'
    TransactionTransferFee:
      oneOf:
        - $ref: '#/components/schemas/EvmEip1559TransactionFee'
        - $ref: '#/components/schemas/EvmLegacyTransactionFee'
        - $ref: '#/components/schemas/UtxoTransactionFee'
        - $ref: '#/components/schemas/FixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559TransactionFee'
          EVM_Legacy: '#/components/schemas/EvmLegacyTransactionFee'
          UTXO: '#/components/schemas/UtxoTransactionFee'
          Fixed: '#/components/schemas/FixedFee'
    Transaction:
      type: object
      description: The information about a transaction.
      required:
        - transaction_id
        - transaction_type
        - status
        - initiator_type
        - source
        - destination
        - created_time
        - updated_time
      properties:
        transaction_id:
          type: string
          description: The transaction ID.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        cobo_id:
          type: string
          description: 'The Cobo ID, which can be used to track a transaction.'
          example: '20231213122855000000000000000000'
        request_id:
          type: string
          description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
          example: web_send_by_user_327_1610444045047
        type:
          $ref: '#/components/schemas/TransactionType'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        sub_status:
          $ref: '#/components/schemas/TransactionSubStatus'
        failed_reason:
          type: string
          description: The reason why the transaction failed.
          example: Rejected by signer Cobo TSS
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).'
          pattern: '^[A-Z]+$'
          example: ETH
        source:
          oneOf:
            - $ref: '#/components/schemas/TransactionAddressSource'
            - $ref: '#/components/schemas/TransactionCustodialWalletSource'
            - $ref: '#/components/schemas/TransactionMPCWalletSource'
            - $ref: '#/components/schemas/TransactionSafeWalletSource'
            - $ref: '#/components/schemas/TransactionExchangeWalletSource'
            - $ref: '#/components/schemas/TransactionFeeStationWalletSource'
          discriminator:
            propertyName: source_type
            mapping:
              Address: '#/components/schemas/TransactionAddressSource'
              FeeStation: '#/components/schemas/TransactionFeeStationWalletSource'
              CustodialWallet: '#/components/schemas/TransactionCustodialWalletSource'
              MPCWallet: '#/components/schemas/TransactionMPCWalletSource'
              SafeWallet: '#/components/schemas/TransactionSafeWalletSource'
              ExchangeWallet: '#/components/schemas/TransactionExchangeWalletSource'
        destination:
          oneOf:
            - $ref: '#/components/schemas/TransactionAddressDestination'
            - $ref: '#/components/schemas/TransactionContractCallDestination'
            - $ref: '#/components/schemas/TransactionMessageSignDestination'
            - $ref: '#/components/schemas/TransactionCustodialWalletDestination'
            - $ref: '#/components/schemas/TransactionMPCWalletDestination'
            - $ref: '#/components/schemas/TransactionSafeWalletDestination'
            - $ref: '#/components/schemas/TransactionExchangeWalletDestination'
          discriminator:
            propertyName: destination_type
            mapping:
              Address: '#/components/schemas/TransactionAddressDestination'
              ContractCall: '#/components/schemas/TransactionContractCallDestination'
              MessageSign: '#/components/schemas/TransactionMessageSignDestination'
              CustodialWallet: '#/components/schemas/TransactionCustodialWalletDestination'
              MPCWallet: '#/components/schemas/TransactionMPCWalletDestination'
              SafeWallet: '#/components/schemas/TransactionSafeWalletDestination'
              ExchangeWallet: '#/components/schemas/TransactionExchangeWalletDestination'
        fee:
          $ref: '#/components/schemas/TransactionFee'
        initiator:
          type: string
          description: The transaction initiator.
          example: 'API Prod Key #1'
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        confirmed_num:
          type: integer
          format: int32
          description: The number of confirmations this transaction has received.
          example: 12
        confirming_threshold:
          type: integer
          format: int32
          description: The minimum number of confirmations required to deem a transaction secure. The common threshold is 6 for a Bitcoin transaction.
          example: 15
        block_number:
          type: integer
          format: int64
          description: The block number.
          example: 123
        block_time:
          type: integer
          format: int64
          description: 'The time when the block was created, in Unix timestamp format, measured in milliseconds.'
          example: 1717740319
        block_hash:
          type: string
          description: The block hash.
          example: '0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735'
        nonce:
          type: integer
          description: The transaction nonce.
          example: 9
        transaction_hash:
          type: string
          description: The transaction hash.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        replacement:
          type: object
          properties:
            replaced_by_type:
              $ref: '#/components/schemas/ReplaceType'
            replaced_by_transaction_id:
              type: string
              description: The ID of the transaction that this transaction was replaced by.
              format: uuid
              example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_hash:
              type: string
              description: The hash of the transaction that this transaction was replaced by.
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type:
              $ref: '#/components/schemas/ReplaceType'
            replaced_transaction_id:
              type: string
              description: The ID of the transaction that this transaction replaced.
              format: uuid
              example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_transaction_hash:
              type: string
              description: The hash of the transaction that this transaction replaced.
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        category:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCategory'
          description: A custom transaction category for you to identify your transfers more easily.
        description:
          type: string
          description: The description for your transaction.
          example: withdrawal to exchange trading account
        force_internal:
          type: boolean
          description: |
            Whether the transaction request must be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).
              - `true`: The transaction request must be executed as a Loop transfer.
              - `false`: The transaction request may not be executed as a Loop transfer.
          example: false
        force_external:
          type: boolean
          description: |
            Whether the transaction request must not be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).
              - `true`: The transaction request must not be executed as a Loop transfer.
              - `false`: The transaction request can be executed as a Loop transfer.
          example: false
        is_loop:
          type: boolean
          description: |
            Whether the transaction is a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).

            - `true`: The transaction is a Loop transfer.
            - `false`: The transaction is not a Loop transfer.
          example: false
        created_time:
          type: integer
          format: int64
          description: 'The time when the transaction was created, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
        updated_time:
          type: integer
          format: int64
          description: 'The time when the transaction was updated, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    TransactionDetail:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            timeline:
              type: array
              items:
                type: object
                description: 'The information about transaction timeline, which lists all statuses that the transaction passes through with timestamps indicating when each status is completed.'
                properties:
                  status:
                    $ref: '#/components/schemas/TransactionStatus'
                  finished:
                    type: boolean
                    description: |
                      Whether the transaction status is completed:
                        - `true`: The transaction status is completed.
                        - `false`: The transaction is currently in the status.
                    example: true
                  finished_time:
                    type: integer
                    description: 'The time when the transaction status is completed in Unix timestamp format, measured in milliseconds.'
                    example: 1610445878970
    TransactionApprover:
      type: object
      description: The approver data for transaction.
      properties:
        name:
          type: string
          description: The approver name of the transaction.
          example: 'Approver #1'
        status:
          type: string
          description: The approval status.
          enum:
            - Pending
            - Approved
            - Rejected
          example: Pending
    TransactionTokenAmount:
      type: object
      description: The data for transaction asset information.
      required:
        - asset_id
        - amount
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
          example: USDT
        amount:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
          format: float
          example: '1.5'
    TransactionCategory:
      type: string
      description: A custom transaction category for you to identify your transfers more easily.
      example: Payment
    TransactionDetails:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            initiator:
              type: string
              description: Transaction initiator
              example: 'API Prod Key #1'
            approvers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionApprover'
            signers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionSigner'
            nonce:
              type: integer
              description: Transaction nonce
              example: 9
            replaced_by:
              type: string
              description: Replace by transaction hash
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            fee:
              $ref: '#/components/schemas/TransactionTransferFee'
            fueled_by:
              type: string
              description: Fueled by address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            confirmed_num:
              type: integer
              description: Transaction confirmed number
              example: 12
            confirming_threshold:
              type: integer
              format: int32
              description: 'Number of confirmations required for a transaction, such as 15 for ETH chain.'
              example: 15
            token_approval:
              $ref: '#/components/schemas/TransactionTokeApproval'
            message:
              type: string
              description: Transaction raw message
              example: this to certify that am owner this wallet address
            algorithm:
              type: string
              description: Transaction message signing algorithm
            timeline:
              type: array
              items:
                $ref: '#/components/schemas/TransactionTimeline'
    TransactionInitiatorType:
      type: string
      enum:
        - API
        - Web
        - App
        - External
      example: API
      description: |
        The transaction initiator type. Possible values include:
          - `API`: An API initiator, who initiates the transaction by using the WaaS API.
          - `Web`: An web initiator, who initiates the transaction from Cobo Portal.
          - `App`: An App initiator, who initiates the transaction from Cobo Portal Apps.
          - `External`: An external initiator, who initiates the transaction outside Cobo.
    TransactionSigner:
      type: object
      description: The signer data for transaction.
      properties:
        signer:
          type: string
          description: The signer name of the transaction.
          example: Cobo TSS
        status:
          type: string
          description: The signing status.
          enum:
            - Pending
            - Signed
            - Timeout
            - Rejected
          example: Signed
        failed_reason:
          type: string
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
    TransactionStatus:
      type: string
      enum:
        - Submitted
        - PendingScreening
        - PendingAuthorization
        - Queued
        - PendingSignature
        - Broadcasting
        - Confirming
        - Completed
        - Failed
        - Rejected
      example: Submitted
      description: |
        The transaction status. Possible values include: 
          - `Submitted`: The transaction is submitted.
          - `PendingScreening`: The transaction is pending screening by Risk Control. 
          - `PendingAuthorization`: The transaction is pending approvals.
          - `PendingSignature`: The transaction is pending signature. 
          - `Broadcasting`: The transaction is being broadcast.
          - `Confirming`: The transaction is waiting for the required number of confirmations.
          - `Completed`: The transaction is completed.
          - `Failed`: The transaction failed.
          - `Rejected`: The transaction is rejected.
    TransactionSubStatus:
      type: string
      enum:
        - RejectedKYT
        - RejectedTravelRule
        - PendingDoubleCheck
        - PendingSpenderCheck
        - PendingRiskControlCheck
        - PendingApproverCheck
        - RejectedCoboCheck
        - RejectedWhiteList
        - RejectedDoubleCheck
        - RejectedSpenderAuth
        - RejectedRiskControlCheck
        - RejectedApproverAuth
        - RejectedbyMobileCosigner
        - PendingWaitSigner
        - FailedBySigner
        - FailedBroadcasting
        - FailedOnChain
        - Queue
        - PendingBlockConfirmations
        - ReplacedByNewTransaction
        - CanceledBySpender
        - CanceledByAPI
        - OnchainRejection
      example: PendingDoubleCheck
      description: |
        The transaction sub-status. Possible values include: 
          - `PendingDoubleCheck`: The transaction is pending a double check. 
          - `RejectedDoubleCheck`: The transaction is rejected because it failed a double check.
          - `PendingSpenderCheck`: The transaction is pending a spender check.
          - `RejectedSpenderAuth`: The transaction is rejected because it is rejected by the spender.
          - `RejectedTravelRule`: The transaction is rejected because it failed to comply with the Travel Rule.
          - `RejectedKYT`: The transaction is rejected because it did not pass the Know Your Transaction (KYT) compliance checks.
          - `PendingRiskControlCheck`: The transaction is pending for a Risk Control check.
          - `RejectedRiskControlCheck`: The transaction is rejected because it failed the Risk Control check.
          - `PendingApproverCheck`: The transaction is pending approval from the approver.
          - `RejectedApproverAuth`: The transaction is rejected by the approver.
          - `RejectedbyMobileCosigner`: The transaction is rejected by a mobile cosigner.
          - `RejectedCoboCheck`: The transaction is rejected because it failed the internal check by Cobo.
          - `RejectedWhiteList`: The transaction is rejected because the sender or receiver is not included in a whitelist.
          - `PendingWaitSigner`: The transaction is pending signature.
          - `FailedBySigner`: The transaction failed during the signing process.
          - `FailedBroadcasting`: The transaction failed to be broadcast to the blockchain network.
          - `CanceledBySpender`: The transaction is canceled by a Spender.
          - `CanceledByAPI`: The transaction is canceled by an API initiator.
          - `Queue`: The transaction is queued to be added to the blockchain.
          - `OnchainRejection`: The transaction is rejected from being added to the blockchain.
          - `FailedOnChain`: The transaction failed due to insufficient confirmations.
          - `PendingBlockConfirmations`: The transaction is awaiting the required number of confirmations.
          - `ReplacedByNewTransaction`: The transaction has been replaced by a new transaction.
    TransactionTimeline:
      type: object
      description: The data for transaction timeline information.
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        finished:
          type: boolean
          description: Whether the timeline status finished
          example: true
        finished_time:
          type: integer
          description: Timeline status finished time
          example: 1610445878970
    TransactionTokeApproval:
      allOf:
        - $ref: '#/components/schemas/TokenInfo'
        - type: object
          description: The data for transaction token approval information.
          properties:
            amount:
              type: number
              description: |
                Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
              format: float
              example: 1.5
            spender:
              type: string
              description: Spender address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    TransactionType:
      type: string
      enum:
        - Deposit
        - Withdrawal
        - TokenApproval
        - ContractCall
        - TransactionFeePayment
        - TransactionFeeRefund
        - RawMessage
        - Multi-Sig
      example: Deposit
      description: |
        The transaction type. Possible values include: 
          - `Deposit`: A deposit transaction.
          - `Withdrawal`: A withdrawal transaction.
          - `TokenApproval`: A transaction that grants permission to access your tokens. 
          - `ContractCall`: A transaction that interacts with a smart contract.
          - `TransactionFeePayment`: A transaction that is initiated from Fee Station to pay the transaction fees.
          - `TransactionFeeRefund`: A transaction that refunds the transaction fees to Fee Station, if a transaction fails after Fee Station has paid the fees.
          - `RawMessage`: A transaction that signs a message. 
          - `Multi-Sig`: A transaction that requires multiple signatures.
    MpcSigningGroup:
      type: object
      description: The information about the Signing Group of an MPC Wallet.
      properties:
        used_key_group_id:
          type: string
          description: The ID of the Signing Group.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        used_node_ids:
          type: array
          items:
            type: string
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          description: The ID of the TSS Nodes that are required to participate in the signature.
    TransactionAddressType:
      type: string
      enum:
        - CustodialAssetWallet
        - CustodialWeb3Wallet
        - MPCClientControlledWallet
        - MPCUserControlledWallet
        - SafeContractWallet
        - ExchangeAccount
        - FeeStation
        - ExternalAddress
      example: CustodialAssetWallet
      description: |
        The address type. Possible values include:
          - `CustodialAssetWallet`: Custodial Wallets (Asset Wallets).
          - `CustodialWeb3Wallet`: Custodial Wallets (Web3 Wallets).
          - `MPCClientControlledWallet`: MPC Wallets (Organization-Controlled).
          - `MPCUserControlledWallet`: MPC Wallets (User-Controlled).
          - `SafeContractWallet`: Smart Contract Wallets (Safe{Wallet}).
          - `ExchangeAccount`: Exchange Wallets.
          - `FeeStation`: A Fee Station.
          - `ExternalAddress`: An external address. 
    TransactionSourceType:
      type: string
      enum:
        - Address
        - CustodialWallet
        - MPCWallet
        - SafeWallet
        - ExchangeWallet
        - FeeStation
      example: ExternalAddress
      description: |
        The transaction source. Possible values include:
          - `Address`: An external address.
          - `CustodialWallet`: A Custodial Wallet.
          - `MPCWallet`: An MPC Wallet.
          - `SafeWallet`: A Safe{Wallet}.
          - `ExchangeWallet`: An Exchange Wallet.
          - `FeeStation`: A Fee Station.
    TransactionAddressSource:
      type: object
      description: The information about the transaction source.
      title: External addresses
      required:
        - source_type
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        account_input:
          type: object
          properties:
            address:
              type: string
              description: The source address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        utxo_inputs:
          type: array
          items:
            type: object
            properties:
              tx_hash:
                type: string
                description: The transaction hash of UTXO that are consumed in the transaction.
                example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
    TransactionFeeStationWalletSource:
      type: object
      description: The information about the transaction source.
      title: Fee Station
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The Wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    TransactionCustodialWalletSource:
      type: object
      description: The information about the transaction source.
      title: Custodial Wallets
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    TransactionMPCWalletSource:
      type: object
      description: The information about the transaction source. Specify either the `account_input` property or the `utxo_inputs` property.
      title: MPC Wallets
      required:
        - source_type
        - wallet_id
        - mpc_used_key_group
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
        account_input:
          type: object
          properties:
            address:
              type: string
              description: The wallet address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        utxo_inputs:
          type: array
          items:
            type: object
            properties:
              tx_hash:
                type: string
                description: The transaction hash of UTXOs that are consumed in the transaction.
                example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
    TransactionSafeWalletSource:
      type: object
      description: The information about the transaction source.
      title: Smart Contract Wallets
      required:
        - source_type
        - wallet_id
        - delegate
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        delegate:
          type: object
          properties:
            wallet_id:
              type: string
              format: uuid
              example: 123e4567-e89b-12d3-a456-426614174000
              description: 'The wallet ID of the Delegate. This is required for initiating a transfer from Smart Contract Wallets (Safe{Wallet}). '
            wallet_type:
              type: string
              example: MPC
              description: 'The wallet type of the Delegate. This is required for initiating a transfer from Smart Contract Wallets (Safe{Wallet}).'
            wallet_address:
              type: string
              example: '0x1234567890123456789012345678901234567890'
              description: 'The wallet address of the Delegate. This is required for initiating a transfer from Smart Contract Wallets (Safe{Wallet}).'
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
    TransactionExchangeWalletSource:
      type: object
      description: The information about the transaction source.
      title: Exchange Wallets
      required:
        - source_type
        - exchange_id
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        sub_wallet_id:
          type: string
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
    TransactionDestinationType:
      type: string
      enum:
        - Address
        - ContractCall
        - MessageSign
        - CustodialWallet
        - MPCWallet
        - SafeWallet
        - ExchangeWallet
      example: Address
      description: |
        The transaction destination type. Possible values include:
          - `Address`: An external address. 
          - `ContractCall`: A smart contract.
          - `MessageSign`: A message to be signed. 
          - `CustodialWallet`: A Custodial Wallet.
          - `MPCWallet`: An MPC Wallet.
          - `SafeWallet`: A Smart Contract Wallet (Safe{Wallet}).
          - `ExchangeWallet`: An Exchange Wallet.
    TransactionAddressDestination:
      type: object
      description: The information about the transaction destination.
      title: External addresses
      required:
        - destination_type
        - token_id
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
          example: USDT
        account_output:
          type: object
          properties:
            address:
              type: string
              description: The destination address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo:
              type: string
              description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
              example: '82840924'
            amount:
              type: string
              description: |
                The transaction amount. For example, if you trade 1.5 ETH, then the amount is `1.5`.
              example: '1.5'
        utxo_outputs:
          type: object
          properties:
            outputs:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                    description: The destination address.
                    example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  amount:
                    type: string
                    description: |
                      The transaction amount. For example, if you trade 1.5 ETH, then the amount is `1.5`.
                    example: '1.5'
                  script:
                    type: string
                    description: The script of the output. It is a programmable code fragment that defines the conditions under which the UTXO can be spent.
                    example: 76a914fb37342f6275b13936799def06f2DEMO
            change_address:
              type: string
              description: The address used to receive the remaining funds or change from the transaction.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
    TransactionContractCallDestination:
      type: object
      description: The information about the transaction destination.
      title: Smart contracts
      required:
        - destination_type
        - address
        - value
        - calldata
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        address:
          type: string
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        value:
          type: string
          description: |
            The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
        calldata:
          type: string
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
    TransactionMessageSignDestination:
      type: object
      description: The information about the transaction destination.
      title: Messages
      required:
        - destination_type
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message:
          type: string
          description: The raw data to be signed that are encoded in Base64.
          example: YWFhYQ==
        structured_data:
          type: string
          description: The structured data to be signed that are encoded in JSON.
          example: |
            {\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}]}}
    TransactionCustodialWalletDestination:
      type: object
      description: The information about the transaction destination.
      title: Custodial Wallets
      required:
        - destination_type
        - wallet_id
        - token_id
        - address
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
          example: USDT
        address:
          type: string
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
          example: '82840924'
        amount:
          type: string
          description: |
            The transaction amount. For exmaole, if you trade 1.5 ETH, then the amount is `1.5`.
          example: '1.5'
    TransactionMPCWalletDestination:
      type: object
      description: The information about the transaction destination.
      title: MPC Wallets
      required:
        - destination_type
        - wallet_id
        - token_id
        - address
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
          example: USDT
        address:
          type: string
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
          example: '82840924'
        amount:
          type: string
          description: |
            The transaction amount. For example, if you trade 1.5 ETH, then the amount is `1.5`.
          example: '1.5'
    TransactionSafeWalletDestination:
      type: object
      description: The information about the transaction destination.
      title: Smart Contract Wallets
      required:
        - destination_type
        - wallet_id
        - token_id
        - address
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
          example: USDT
        address:
          type: string
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
          example: '82840924'
        amount:
          type: string
          description: |
            The transaction amount. For example, if you trade 1.5 ETH, then the amount is `1.5`.
          example: '1.5'
    TransactionExchangeWalletDestination:
      type: object
      description: The information about the transaction destination.
      title: Exchange Wallets
      required:
        - destination_type
        - exchange_id
        - wallet_id
        - asset_id
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        sub_wallet_id:
          type: string
          description: The exchange trading account or the sub-wallet ID.
          example: Asset
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
          example: USDT
        address:
          type: string
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
          example: '82840924'
        amount:
          type: string
          description: |
            The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
    TransactionFixedFee:
      type: object
      description: The transaction fee actually charged by the chain that uses the fixed fee model.
      required:
        - fee_type
      title: Fixed
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token ID of the transaction fee.
              example: ETH_USDT
            fee_used:
              type: string
              description: The transaction fee.
              example: '0.1'
        - $ref: '#/components/schemas/FeeAmount'
    TransactionEvmEip1559Fee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the EIP-1559 fee model. 
        The transaction fee is calculated by multiplying the sum of the base fee price and the priority fee by the used gas. This can be expressed as: Transaction fee = (base fee price + maximum priority fee) * used gas.
      title: EIP-1559
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            fee_used:
              type: string
              description: The transaction fee.
              example: '0.1'
            gas_used:
              type: string
              description: The number of gas units used in the transaction.
              example: '100000000'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    TransactionEvmLegacyFee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the legacy fee model. 
        The transaction fee is calculated by multiplying the gas fee price by the used gas. This can be expressed as: Transaction fee = (gas price) * used gas.
      title: Legacy
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            fee_used:
              type: string
              description: The transaction fee.
              example: '0.1'
            gas_used:
              type: string
              description: The gas units used in the transaction.
              example: '100000000'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    TransactionUtxoFee:
      type: object
      description: |
        TThe transaction fee actually charged by the chain that uses the UTXO fee model, such as Bitcoin.
        The transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size.
      title: UTXO
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            fee_used:
              type: string
              description: The transaction fee.
              example: '0.1'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
        - $ref: '#/components/schemas/FeeAmount'
    TransactionFee:
      oneOf:
        - $ref: '#/components/schemas/TransactionEvmEip1559Fee'
        - $ref: '#/components/schemas/TransactionEvmLegacyFee'
        - $ref: '#/components/schemas/TransactionUtxoFee'
        - $ref: '#/components/schemas/TransactionFixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/TransactionEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionUtxoFee'
          Fixed: '#/components/schemas/TransactionFixedFee'
    TransactionRbf:
      type: object
      description: the information about the request to drop or to speed up transactions.
      required:
        - request_id
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    TransactionResend:
      type: object
      description: The information about the request to resend transactions.
      required:
        - request_id
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    ReplaceType:
      type: string
      enum:
        - Cancel
        - Drop
        - Resend
        - SpeedUp
      example: Resend
      description: |
        The `replaced_by_type` property indicates the replacement type of the transaction that this transaction was replaced by, and the `replaced_type` property indicates the replacement type of the transaction that this transaction replaced.
        Possible values include: 
          - `Cancel`: To cancel a transaction.
          - `Drop`: To drop a transaction.
          - `Resend`: To resend a transaction.
          - `SpeedUp`: To speed up a transaction.
    BaseTransferSource:
      type: object
      description: The information about the transaction source.
      title: Custodial Wallets
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    AddressTransferSource:
      allOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - type: object
          required:
            - address
          properties:
            address:
              type: string
              description: The wallet address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    MpcTransferSource:
      title: MPC Wallets
      description: The information about the transaction source. Specify either the `account_input` or `utxo_inputs` property.
      allOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - type: object
          properties:
            account_input:
              type: object
              properties:
                address:
                  type: string
                  description: The wallet address.
                  example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            utxo_inputs:
              type: object
              properties:
                included_inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      tx_hash:
                        type: string
                        description: The transaction hash of UTXO to be consumed in the transaction.
                        example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                      vout_n:
                        type: integer
                        description: The output index of the UTXO.
                        example: 0
                excluded_inputs:
                  type: array
                  items:
                    type: object
                    properties:
                      tx_hash:
                        type: string
                        description: The transaction hash of UTXO not to be consumed in the transaction.
                        example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
                      vout_n:
                        type: integer
                        description: The output index of the UTXO.
                        example: 0
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
    SafeTransferSource:
      title: Smart Contract Wallets
      description: The information about the transaction source.
      allOf:
        - $ref: '#/components/schemas/AddressTransferSource'
        - type: object
          required:
            - delegate
          properties:
            delegate:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: 'The wallet ID of the Delegate. This is required when initiating a transfer from Smart Contract Wallets (Safe{Wallet}). '
                wallet_type:
                  type: string
                  example: MPC
                  description: 'The wallet type of the Delegate. This is required when initiating a transfer from Smart Contract Wallets (Safe{Wallet}).'
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: 'The wallet address of the Delegate. This is required when initiating a transfer from Smart Contract Wallets (Safe{Wallet}).'
    ExchangeTransferSource:
      title: Exchange Wallets
      description: The information about the transaction source. An Exchange Wallet (Sub Account) as the transaction source can only transfer tokens to another Exchange Wallet.
      allOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - type: object
          required:
            - sub_wallet_id
          properties:
            sub_wallet_id:
              type: string
              description: The exchange trading account or the sub-wallet ID.
              example: Asset
    TransferSource:
      oneOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - $ref: '#/components/schemas/MpcTransferSource'
        - $ref: '#/components/schemas/SafeTransferSource'
        - $ref: '#/components/schemas/ExchangeTransferSource'
      discriminator:
        propertyName: source_type
        mapping:
          Asset: '#/components/schemas/BaseTransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
          'Safe{Wallet}': '#/components/schemas/SafeTransferSource'
          Main: '#/components/schemas/ExchangeTransferSource'
          Sub: '#/components/schemas/ExchangeTransferSource'
    AddressTransferDestination:
      type: object
      description: |
        The information about the transaction destination. Specify either the `account_output` property or the `utxo_outputs` property. Only MPC Wallets as the transaction source can transfer tokens to multiple addresses by using the `utxo_outputs` property.
      title: Addresses
      required:
        - destination_type
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        account_output:
          type: object
          properties:
            address:
              type: string
              description: The destination address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo:
              type: string
              description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
              example: '82840924'
            amount:
              type: string
              description: |
                The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
              example: '1.5'
        utxo_outputs:
          type: object
          properties:
            outputs:
              type: array
              items:
                type: object
                properties:
                  address:
                    type: string
                    description: The destination address.
                    example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
                  amount:
                    type: string
                    description: |
                      The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
                    example: '1.5'
                  script:
                    type: string
                    description: The script of the output. It is a programmable code fragment that defines the conditions under which the UTXO can be spent.
                    example: 76a914fb37342f6275b13936799def06f2DEMO
            change_address:
              type: string
              description: The address used to receive the remaining funds or change from the transaction.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal:
          type: boolean
          description: |
            Whether the transaction request must be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).
              - `true`: The transaction request must be executed as a Loop transfer.
              - `false`: The transaction request may not be executed as a Loop transfer.
          example: false
        force_external:
          type: boolean
          description: |
            Whether the transaction request must not be executed as a Loop transfer. For more information about Loop, see [Loop's website](https://loop.top/).
              - `true`: The transaction request must not be executed as a Loop transfer.
              - `false`: The transaction request can be executed as a Loop transfer.
          example: false
    ExchangeTransferDestination:
      type: object
      description: The information about the transaction destination. An Exchange Wallet (Sub Account) as the transaction destination can only receives token transfers from another Exchange Wallet.
      title: Exchange Wallets
      required:
        - destination_type
        - wallet_id
        - sub_wallet_id
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        sub_wallet_id:
          type: string
          description: The exchange trading account or the sub-wallet ID.
          example: Asset
        amount:
          type: string
          description: |
            The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
    TransferDestinationType:
      type: string
      enum:
        - Address
        - ExchangeWallet
      example: Address
      description: |
        The transaction destination type. Possible values include:
        - `Address`: An address, including an address of Custodial Wallets, MPC Wallets, or Smart Contract Wallets (Safe{Wallet}) and an external address.
        - `ExchangeWallet`: An Exchange Wallet.
    TransferDestination:
      oneOf:
        - $ref: '#/components/schemas/AddressTransferDestination'
        - $ref: '#/components/schemas/ExchangeTransferDestination'
      discriminator:
        propertyName: destination_type
        mapping:
          Address: '#/components/schemas/AddressTransferDestination'
          ExchangeWallet: '#/components/schemas/ExchangeTransferDestination'
    Transfer:
      type: object
      description: The information about a token transfer.
      title: Transfer
      required:
        - request_id
        - request_type
        - source
        - token_id
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        destination:
          $ref: '#/components/schemas/TransferDestination'
        category_names:
          type: array
          description: The custom category for you to identify your transactions.
          items:
            type: string
            example: Trading
        description:
          type: string
          description: The description of the transfer.
          example: Transfer from wallet
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    SignMessage:
      type: object
      description: The information about a transaction that signs a message. You can provide the message either as raw data or as structured data.
      required:
        - request_id
        - request_type
        - chain_id
        - source
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).'
          pattern: '^[A-Z]+$'
          example: ETH
        source:
          description: The information about the transaction source.
          type: object
          required:
            - wallet_id
            - address
          properties:
            wallet_id:
              type: string
              description: The wallet ID.
              format: uuid
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            address:
              type: string
              description: The wallet address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
        destination:
          type: object
          description: The information about the transaction destination.
          properties:
            message:
              type: string
              description: 'The raw data of the message to be signed, encoded in Base64 format.'
              example: YWFhYQ==
            structured_data:
              type: object
              additionalProperties: true
              description: 'The structured data of the message to be signed, encoded in JSON format.'
              example: |
                {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
        description:
          type: string
          description: The description of the message sign transaction.
          example: Transaction to sign a message initiated from a wallet
    EstimateFee:
      oneOf:
        - $ref: '#/components/schemas/EstimateFeeTransfer'
        - $ref: '#/components/schemas/EstimateFeeContractCall'
      discriminator:
        propertyName: request_type
        mapping:
          Transfer: '#/components/schemas/EstimateFeeTransfer'
          Call: '#/components/schemas/EstimateFeeContractCall'
    EstimateFeeTransfer:
      type: object
      description: The information about a token transfer.
      title: Transfer
      required:
        - request_id
        - request_type
        - source
        - token_id
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          type: string
          enum:
            - Transfer
            - ContractCall
            - MessageSign
          example: Transfer
          description: |
            The request type. Possible values include:
              - `Transfer`: A request to transfer tokens.
              - `ContractCall`: A request to interact with a smart contract.
              - `MessageSign`: A request to sign a message.
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          type: string
          description: 'The token ID of the transaction fee. You can retrieve token IDs by using the [Get fee rates](/api-references/v2/transactions/get-fee-rates) operation.'
          example: ETH_USDT
        destination:
          $ref: '#/components/schemas/TransferDestination'
    EstimateFeeContractCall:
      type: object
      description: The information about a transaction that interacts with a smart contract
      title: Contract call
      required:
        - request_id
        - request_type
        - chain_id
        - source
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          $ref: '#/components/schemas/EstimateFeeTransfer/properties/request_type'
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          type: object
          description: The information about the transaction destination.
          properties:
            address:
              type: string
              description: The destination address.
              example: bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v
            value:
              type: string
              description: |
                The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`. 
              example: '1.5'
            calldata:
              type: string
              description: |
                The data that is used to invoke a specific function or method within the specified contract at the destination address.
              format: byte
              example: U3dhZ2dlciByb2Nrcw==
    BaseContractCallSource:
      type: object
      description: The information about the transaction source.
      required:
        - source_type
        - wallet_id
        - address
      properties:
        source_type:
          type: string
          enum:
            - Org-Controlled
            - User-Controlled
            - 'Safe{Wallet}'
          example: Org-Controlled
          description: |
            The type of the wallet. Possible values include:
            - `Org-Controlled`: MPC Wallets (Organization-Controlled).
            - `User-Controlled`: MPC Wallets (User-Controlled).
            - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    MpcContractCallSource:
      title: MPC Wallets
      allOf:
        - $ref: '#/components/schemas/BaseContractCallSource'
        - type: object
          properties:
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
    SafeContractCallSource:
      title: Smart Contract Wallets
      allOf:
        - $ref: '#/components/schemas/BaseContractCallSource'
        - type: object
          required:
            - delegate
          properties:
            delegate:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: 'The wallet ID of the Delegate. This is required for initiating a transfer from a Smart Contract Wallet (Safe{Wallet}).'
                wallet_type:
                  type: string
                  example: MPC
                  description: 'The wallet type of the Delegate. This is required for initiating a transfer from a Smart Contract Wallet (Safe{Wallet}).'
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: 'The wallet address of the Delegate. This is required for initiating a transfer from a Smart Contract Wallet (Safe{Wallet}).'
                mpc_used_key_group:
                  $ref: '#/components/schemas/MpcSigningGroup'
    ContractCallSource:
      oneOf:
        - $ref: '#/components/schemas/MpcContractCallSource'
        - $ref: '#/components/schemas/SafeContractCallSource'
      discriminator:
        propertyName: source_type
        mapping:
          Org-Controlled: '#/components/schemas/MpcContractCallSource'
          User-Controlled: '#/components/schemas/MpcContractCallSource'
          'Safe{Wallet}': '#/components/schemas/SafeContractCallSource'
    ContractCall:
      type: object
      description: The information about a transaction that interacts with a smart contract
      title: Contract call
      required:
        - request_id
        - request_type
        - chain_id
        - source
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          type: object
          description: The information about the transaction destination.
          properties:
            address:
              type: string
              description: The destination address.
              example: bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v
            value:
              type: string
              description: |
                The quantity of the token in the transaction. For example, if you trade 1.5 ETH, then the value is `1.5`. 
              example: '1.5'
            calldata:
              type: string
              description: |
                The data that is used to invoke a specific function or method within the specified contract at the destination address.
              format: byte
              example: U3dhZ2dlciByb2Nrcw==
        description:
          type: string
          description: The description of the contract call transaction.
          example: Transaction to call a smart contract initiated from a wallet
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    WebhookEvent:
      type: object
      description: The webhook event payload.
      required:
        - id
        - url
        - created_timestamp
        - type
        - data
      properties:
        id:
          description: The event ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        url:
          description: The webhook endpoint URL.
          maxLength: 500
          type: string
          format: url
          example: 'https://example.com/webhook'
        created_timestamp:
          description: 'The time when the event occurred, in Unix timestamp format, measured in milliseconds.'
          type: integer
          example: 1701396866000
        type:
          $ref: '#/components/schemas/WebhookEventType'
        data:
          $ref: '#/components/schemas/Transaction'
        status:
          $ref: '#/components/schemas/WebhookEventStatus'
        next_retry_timestamp:
          description: |
            The timestamp indicating the next scheduled retry to deliver this event, in Unix timestamp format, measured in milliseconds. This field is only present if the event status is `Retrying`.
          type: integer
          example: 1701396866000
        retries_left:
          description: The number of retries left. This field is only present if the event status is `Retrying`.
          type: integer
          example: 3
    WebhookEventType:
      type: string
      enum:
        - wallets.transaction.created
        - wallets.transaction.updated
        - wallets.transaction.failed
        - wallets.transaction.succeeded
      example: wallets.transaction.created
      description: |-
        The event type.
          - wallets.transaction.created: This event occurs when a transaction is created.
          - wallets.transaction.updated: This event occurs when a transaction is created or when there is an update of the transaction status.
          - wallets.transaction.failed: This event occurs when a transaction fails.
          - wallets.transaction.succeeded: This event occurs when a transaction has been successfully completed.
    WebhookEventStatus:
      type: string
      enum:
        - Success
        - Retrying
        - Failed
      example: Success
      description: |-
        The event status. Possible values include:
        - `Success`: The event has been delivered, and the webhook endpoint has responded to the event.
        - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, Cobo will retry delivering the event.
        - `Failed`: The event cannot be delivered and Cobo will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.
    WebhookEventLog:
      type: object
      description: The webhook event log.
      required:
        - id
        - created_timestamp
        - status
        - request_headers
        - request_body
        - success
      properties:
        id:
          description: The event log ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        created_timestamp:
          description: 'The time when the log was created, in Unix timestamp format, measured in milliseconds.'
          type: integer
          example: 1701396866000
        request_headers:
          type: object
          description: The request headers of the webhook event.
          example: '{"Content-Type": "application/json"}'
        request_body:
          $ref: '#/components/schemas/WebhookEvent'
        response_body:
          type: object
          description: The response body of the webhook event.
        response_status_code:
          type: integer
          description: The response status code of the webhook event.
          example: 200
        response_time:
          type: integer
          description: 'The response time of the webhook event, in milliseconds.'
          example: 100
        success:
          type: boolean
          description: Whether the webhook event has been successfully delivered.
          example: true
        failure_reason:
          type: string
          description: The reason why the webhook event fails to be delivered.
          example: Connect Timeout
    Endpoint:
      type: object
      description: The information about a webhook endpoint.
      required:
        - url
        - subscribed_events
        - created_timestamp
        - id
        - status
      properties:
        url:
          description: The webhook endpoint URL.
          maxLength: 500
          type: string
          format: url
          example: 'https://example.com/webhook'
        subscribed_events:
          description: The event types subscribed by a webhook endpoint.
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        created_timestamp:
          description: 'The time when the endpoint was registered, in Unix timestamp format, measured in seconds.'
          type: integer
          example: 1701396866
        id:
          description: The webhook endpoint ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        status:
          $ref: '#/components/schemas/EndpointStatus'
        description:
          description: The description of the webhook endpoint.
          type: string
          example: My webhook endpoint
    EndpointStatus:
      type: string
      enum:
        - STATUS_ACTIVE
        - STATUS_INACTIVE
        - STATUS_PENDING_ACTIVE
        - STATUS_PENDING_INACTIVE
        - STATUS_PENDING_UPDATE
        - STATUS_REJECT_ACTIVE
      example: STATUS_ACTIVE
      description: |
        The webhook endpoint status. Possible values include:
        - `STATUS_ACTIVE`: The endpoint is currently in use.
        - `STATUS_INACTIVE`: The endpoint has been revoked and can no longer receive webhook events.
        - `STATUS_PENDING_ACTIVE`: The request to create the endpoint is awaiting approval. After the approval, the endpoint will be available for use.
        - `STATUS_PENDING_INACTIVE`: The request to revoke the endpoint is awaiting approval. After the approval,the endpoint will no longer receive webhook events.
        - `STATUS_PENDING_UPDATE`: The request to update the endpoint is awaiting approval. After the approval, the endpoint will be updated.
        - `STATUS_REJECT_ACTIVE`: The request to create the endpoint has been rejected.
    BaseStakeExtra:
      type: object
      description: Base stake extra.
      required:
        - pool_type
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
    BabylonStakeExtra:
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The stake extra for babylon.
          required:
            - finality_provider_public_key
            - lock_time
          properties:
            finality_provider_public_key:
              description: The public key of finality provider.
              type: string
              pattern: '^[0-9a-fA-F]{64}$'
              example: '0000000000000000000000000000000000000000000000000000000000000000'
            stake_block_time:
              description: The stake block time.
              type: integer
              format: int64
              example: 2000
    EigenLayerLstStakeExtra:
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The stake extra of eigen layer lst token.
          required:
            - id
          properties:
            operator:
              description: The operator address.
              type: string
              example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
    EigenLayerNativeStakeExtra:
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The stake extra of eigen layer native ETH.
          properties:
            fee_recipient:
              description: 'The fee recipient address, if not provided the staker address will be used.'
              type: number
              format: int32
              example: 30
    Activity:
      type: object
      description: The staking activity.
      required:
        - stake_id
        - pool_id
        - amount
        - status
        - created_at
        - updated_at
      properties:
        id:
          description: The unique id of the activity.
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        initiator:
          description: The initiator of the activity.
          type: string
          example: vanya@cobo.com
        type:
          $ref: '#/components/schemas/ActivityType'
        wallet_id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: The id of the wallet to stake.
        address:
          type: string
          example: '0x0000000000000000000000000000000000000000'
          description: The staker wallet address.
        pool_id:
          type: string
          example: babylon_btc
          description: The id of the staking pool.
        staking_id:
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The id of the related staking.
        amount:
          type: string
          example: '100.00'
          description: The amount of the activity.
        tx_ids:
          type: array
          items:
            type: string
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The related txs of the activity.
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
        status:
          $ref: '#/components/schemas/ActivityStatus'
        created_time:
          description: The time when the activity was created.
          type: integer
          format: int64
          example: 1640995200000
        updated_time:
          description: The time when the activity was last updated.
          type: integer
          format: int64
          example: 1640995200000
    ActivityInitiator:
      type: object
      properties:
        initiator:
          type: string
          example: vanya@cobo.com
          description: The initiator of the staking activity.
    CreateStakeActivity:
      type: object
      required:
        - amount
        - fee
        - request_id
        - wallet_id
        - address
        - pool_id
        - extra
      properties:
        wallet_id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: The id of the wallet to stake.
        address:
          type: string
          example: '0x0000000000000000000000000000000000000000'
          description: The staker wallet address.
        pool_id:
          type: string
          example: babylon_btc
          description: The id of the staking pool
        amount:
          type: string
          example: '100.00'
          description: The amount to stake
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
        extra:
          oneOf:
            - $ref: '#/components/schemas/BabylonStakeExtra'
            - $ref: '#/components/schemas/EigenLayerLstStakeExtra'
            - $ref: '#/components/schemas/EigenLayerNativeStakeExtra'
          discriminator:
            propertyName: pool_type
            mapping:
              Babylon: '#/components/schemas/BabylonStakeExtra'
              EigenLayerNativeETH: '#/components/schemas/EigenLayerLstStakeExtra'
              EigenLayerLST: '#/components/schemas/EigenLayerNativeStakeExtra'
    CreateWithdrawActivity:
      type: object
      required:
        - staking_id
        - fee
      properties:
        staking_id:
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The id of the related staking.
        amount:
          type: string
          example: '100.00'
          description: The amount to stake
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    CreateUnstakeActivity:
      type: object
      required:
        - staking_id
      properties:
        staking_id:
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The id of the related staking.
        amount:
          type: string
          example: '100.00'
          description: The amount to stake
        fee:
          $ref: '#/components/schemas/TransactionTransferFee'
    ActivityStatus:
      type: string
      enum:
        - Success
        - Processing
        - Failed
      example: Success
      description: The status of activity.
    ActivityType:
      type: string
      enum:
        - Stake
        - Unstake
        - Withdraw
        - Claim
        - Delegate
        - Undelegate
      example: Stake
      description: The type of activity.
    AmountDetails:
      type: array
      description: The staking amount details.
      items:
        type: object
        required:
          - status
          - amount
        properties:
          status:
            type: string
            example: active
            description: The staking status.
          amount:
            type: string
            example: '100.00'
            description: The staking amount.
          activity_id:
            type: string
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
            description: The related staking activity ID.
    BabylonValidator:
      type: object
      description: The babylon validator information.
      required:
        - name
        - public_key
        - icon_url
        - commission_rate
        - supported_pos_chains
      properties:
        icon_url:
          description: The URL of the validator's icon.
          type: string
          format: url
          example: 'https://example.com/icon.png'
        name:
          description: The name of validator.
          type: string
          example: Cobo
        priority:
          description: The priority of validator.
          type: integer
          example: 0
        public_key:
          description: The public key of validator.
          type: string
          example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
        commission_rate:
          description: The commission rate of validator.
          type: number
          format: float
          example: 0.1
        supported_pos_chains:
          description: The list of supported pos chains.
          type: array
          items:
            type: string
            enum:
              - Babylon
              - Cosmos
          example:
            - Babylon
            - Cosmos
    EigenlayerValidator:
      type: object
      description: The EigenLayer validator info.
      required:
        - name
        - address
        - icon_url
      properties:
        icon_url:
          description: The URL of the validator's icon.
          type: string
          format: url
          example: 'https://example.com/icon.png'
        name:
          description: The name of validator.
          type: string
          example: Cobo
        priority:
          description: The priority of validator.
          type: integer
          example: 0
        address:
          description: The address of validator.
          type: string
          example: 1Lru9ewXCbVLQAetCLDgFoo6465kpGKbGV
        commission_rate:
          description: The commission of validator.
          type: number
          format: float
          example: 0.1
    PoolDetails:
      allOf:
        - $ref: '#/components/schemas/PoolSummary'
        - type: object
          description: The detail of the staking protocol.
          required:
            - validators_info
          properties:
            pool_type:
              $ref: '#/components/schemas/StakingPoolType'
            min_amount:
              description: The minimum amount to stake.
              type: string
              example: '0.01'
            max_amount:
              description: The maximum amount to stake.
              type: string
              example: '100.00'
            min_stake_period:
              description: The minimum staking period in days.
              type: integer
              format: int32
              example: 30
            max_stake_period:
              description: The maximum staking period in days.
              type: integer
              format: int32
              example: 1000
            validators_info:
              description: The list of validators.
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/BabylonValidator'
                  - $ref: '#/components/schemas/EigenlayerValidator'
    PoolSummary:
      type: object
      description: The summary of the staking pool.
      required:
        - id
        - chain_id
        - protocol
        - protocol_icon_url
        - token_id
        - est_apr
        - supported_wallet_types
      properties:
        id:
          description: The unique protocol id.
          type: string
          example: babylon_btc
        chain_id:
          description: The unique chain id.
          type: string
          example: Bitcoin
        protocol:
          description: The name of the protocol.
          type: string
          example: Babylon
        protocol_icon_url:
          description: The URL of the protocol's icon.
          type: string
          format: url
          example: 'https://example.com/icon.png'
        supported_wallet_types:
          description: The list of available wallet types.
          type: array
          items:
            $ref: '#/components/schemas/WalletType'
          example:
            - MPC
        token_id:
          description: The unique token id.
          type: string
          example: BTC
        est_apr:
          description: The estimated APR.
          type: number
          format: float
          example: 0.05
    Stakings:
      type: object
      description: The staking info.
      required:
        - id
        - wallet_id
        - address
        - pool_id
        - amounts
        - status
        - validator_info
        - created_time
        - updated_time
      properties:
        id:
          description: The unique id of the stake.
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        wallet_id:
          description: The unique wallet id.
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        address:
          description: The staker wallet address.
          type: string
          example: '0x0000000000000000000000000000000000000000'
        amounts:
          $ref: '#/components/schemas/AmountDetails'
        initiator:
          description: The initiator of the stake.
          type: string
          example: Vanya@cobo.com
        unlock_time:
          description: The unlock time.
          type: integer
          format: int64
          example: 1640995200000
        unlock_block_height:
          description: The unlock block height.
          type: integer
          format: int64
          example: 871234
        pool_id:
          description: The unique pool id.
          type: string
          example: babylon_btc
        pos_chain:
          description: The pos chain of the stake.
          type: string
          example: Babylon Chain
        rewards_info:
          description: The rewards info of the stake.
          type: object
          example: {}
        created_time:
          description: The time when the stake was created.
          type: integer
          format: int64
          example: 1640995200000
        updated_time:
          description: The time when the stake was last updated.
          type: integer
          format: int64
          example: 1640995200000
        validator_info:
          description: The validator info of the stake.
          type: object
          properties:
            icon_url:
              type: string
              example: 'https://example.com/logo.png'
            public_key:
              type: string
              example: '0000000000000000000000000000000000000000000000000000000000000000'
            name:
              type: string
              example: Cobo
            address:
              type: string
              example: '0x0000000000000000000000000000000000000000'
            commission_rate:
              type: string
              example: '0.1'
    StakingPoolType:
      type: string
      enum:
        - Babylon
        - EigenLayerNativeETH
        - EigenLayerLst
      example: Babylon
      x-enumDescriptions:
        Babylon: The Babylon staking protocol.
        EigenLayerNativeETH: The Eigen Layer staking pool for native ETH.
        EigenLayerLst: The Eigen Layer staking pool for lst token.
    BaseEstimateStakingFee:
      type: object
      required:
        - activity_type
      properties:
        activity_type:
          $ref: '#/components/schemas/ActivityType'
    EstimateStakeFee:
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - $ref: '#/components/schemas/CreateStakeActivity'
    EstimateUnstakeFee:
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - $ref: '#/components/schemas/CreateUnstakeActivity'
    EstimateWithdrawFee:
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - $ref: '#/components/schemas/CreateWithdrawActivity'
  parameters:
    sortByParam:
      name: sort_by
      in: query
      description: The field used for sorting.
      required: false
      schema:
        type: string
        default: ''
      example: timestamp
    directionParam:
      name: direction
      in: query
      description: |
        The sort direction. Possible values include:
          - `ASC`: Sort the results in ascending order.
          - `DESC`: Sort the results in descending order.
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ''
      example: ASC
    limitParam:
      name: limit
      in: query
      description: 'The maximum number of objects to return. For most operations, the value range is [1, 50].'
      required: false
      schema:
        type: integer
        format: int32
        default: 10
      example: 10
    beforeParam:
      name: before
      in: query
      description: |
        An object ID that serves as a starting point for retrieving data in reverse chronological order. For example, if you specify `before` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`, the request will retrieve a list of data objects that end before the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1`. You can set this parameter to the value of `pagination.before` in the response of the previous request.

        - If you set both `after` and `before`, an error will occur.

        - If you leave both `before` and `after` empty, the first page of data is returned.

        - If you set `before` to `infinity`, the last page of data is returned.
      required: false
      schema:
        type: string
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
    afterParam:
      name: after
      in: query
      description: |
        An object ID that acts as a starting point for retrieving data in chronological order. For example, if you specify `after` as `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`, the request will retrieve a list of data objects that start after the object with the object ID `RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`. You can set this parameter to the value of `pagination.after` in the response of the previous request.

        - If you set both `after` and `before`, an error will occur.

        - If you leave both `before` and `after` empty, the first page of data is returned.
      required: false
      schema:
        type: string
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
    optionalAssetIdParam:
      name: asset_id
      in: query
      required: false
      description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
      schema:
        type: string
      example: USDT
    optionalAssetIdListParam:
      name: asset_ids
      in: query
      required: false
      description: 'A list of asset IDs, separated by comma. (This concept applies to Exchange Wallets only) An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
      schema:
        type: string
        description: 'A list of asset IDs, separated by comma.'
      example: 'USDT,USDC'
    requiredAssetIdParam:
      name: asset_id
      in: query
      required: true
      description: '(This concept applies to Exchange Wallets only) The asset ID. An asset is a digital representation of a valuable resource on a blockchain network. Exchange Wallets group your holdings by asset, even if the same asset exists on different blockchains. For example, if your Exchange Wallet has 1 USDT on Ethereum and 1 USDT on TRON, then your asset balance is 2 USDT.'
      schema:
        type: string
      example: USDT
    chainIdParam:
      name: chain_id
      in: path
      required: true
      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
      example: ETH
    requiredChainIdParam:
      name: chain_id
      in: query
      required: true
      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
      example: ETH
    optionalChainIdParam:
      name: chain_id
      in: query
      required: false
      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
      example: ETH
    optionalChainIdListParam:
      name: chain_ids
      in: query
      required: false
      description: 'A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
        description: 'A list of chain IDs, separated by comma.'
      example: 'BTC,ETH'
    tokenIdParam:
      name: token_id
      in: path
      required: true
      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
      example: ETH_USDT
    optionalTokenIdParam:
      name: token_id
      in: query
      required: false
      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
      example: ETH_USDT
    optionalTokenListIdParam:
      name: token_ids
      in: query
      required: false
      description: 'A list of token IDs, separated by comma. The token ID is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
        description: 'A list of token IDs, separated by comma.'
      example: 'ETH_USDT,ETH_USDC'
    requiredTokenIdParam:
      name: token_id
      in: query
      required: true
      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
      example: ETH_USDT
    requiredFeeRateParam:
      name: fee_rate
      in: query
      required: true
      description: The fee rate in sats/vByte or fee_price in gwei.
      schema:
        type: string
      example: '0.001'
    requiredWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: true
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    optionalWalletTypeParam:
      name: wallet_type
      in: query
      required: false
      description: |
        The wallet type.

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
      schema:
        $ref: '#/components/schemas/WalletType'
    optionalWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: false
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    walletIdParam:
      name: wallet_id
      in: path
      required: true
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalWalletIdParam:
      name: wallet_id
      in: query
      required: false
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalWalletListIdParam:
      name: wallet_ids
      in: query
      required: false
      description: 'A list of wallet IDs, separated by comma.'
      schema:
        type: string
        description: 'A list of wallet IDs, separated by comma.'
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868'
    addressParam:
      name: address
      in: path
      required: true
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    requiredAddressParam:
      name: address
      in: query
      required: true
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    requiredSubWalletIdParam:
      name: sub_wallet_id
      in: query
      required: true
      description: Unique id of the wallet
      schema:
        type: string
      example: SPOT
    optionalAddressParam:
      name: address
      in: query
      required: false
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    toAddressParam:
      name: to_address
      in: query
      required: true
      description: The recipient's address.
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    fromAddressParam:
      name: from_address
      in: query
      required: false
      description: The sender's address.
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    optionalUtxoTxHashParam:
      name: tx_hash
      in: query
      required: false
      schema:
        type: string
        description: The transaction hash of the UTXO.
      example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
    keyGroupIdParam:
      name: key_share_group_id
      in: path
      required: true
      description: The key share group ID.
      schema:
        type: string
      example: '880311524363903326'
    optionalKeyGroupTypeParam:
      name: key_group_type
      in: query
      description: |
        The selected key share group type to retrieve. Possible values include:
        - `MainKeyGroup`: Only [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.

        - `SigningKeyGroup`: Only [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.

        - `RecoveryKeyGroup`: Only [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) will be retrieved.

        **Note:** If there's no value selected for `key_group_type`, all key share group types will be retrieved.
      required: false
      schema:
        $ref: '#/components/schemas/KeyGroupType'
    projectIdParam:
      name: project_id
      in: path
      required: true
      description: 'The project ID, which you can retrieve by calling [List all projects](/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalProjectIdQueryParam:
      name: project_id
      in: query
      description: 'The project ID, which you can retrieve by calling [List all projects](/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). This parameter is applicable to MPC Wallets only.'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalProjectIdListQueryParam:
      name: project_id
      in: query
      description: The MPC project ID.
      schema:
        description: 'A list of MPC project IDs, separated by comma.'
        type: string
        format: uuid
      example: 'a3d8eae2-1740-4b5e-92f2-88c2b1e44c6b,b51f63a3-8a8e-4a34-ae9e-6f3e6b1fdf99'
    requiredTargetKeyGroupIdParam:
      name: target_key_group_id
      in: query
      description: 'The target key share group ID of the TSS request, which you can retrieve by calling [List all key share groups](/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-groups).'
      required: true
      schema:
        type: string
      example: '880311524363903326'
    tssRequestIdParam:
      name: tss_request_id
      in: path
      required: true
      description: 'The TSS request ID, which you can retrieve by calling [List TSS requests](/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    vaultIdParam:
      name: vault_id
      in: path
      required: true
      description: 'The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallet/list-all-mpc-vaults).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultIdQueryParam:
      name: vault_id
      in: query
      required: false
      description: 'The vault ID, which you can retrieve by calling [List all vaults](/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults). This parameter is applicable to MPC Wallets only.'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultIdListQueryParam:
      name: vault_id
      in: query
      required: false
      description: The vault ID.
      schema:
        description: 'A list of vault IDs, separated by comma.'
        type: string
        format: uuid
      example: 'f5c3f9e8-1d8a-44b2-9284-94bf76b7b017,ab2e3f55-472e-4a98-86d1-446d2f9e839e'
    optionalVaultNameParam:
      name: vault_name
      in: query
      required: false
      description: Unique id of the mpc vault
      schema:
        type: string
      example: my vault name
    exchangeIdParam:
      name: exchange_id
      in: path
      required: true
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalExchangeIdParam:
      name: exchange_id
      in: query
      required: false
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    requiredExchangeIdParam:
      name: exchange_id
      in: query
      required: true
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalApikeyParam:
      name: apikey
      in: query
      description: The API Key for the exchange
      required: false
      schema:
        type: string
      example: d8f062da-39f4-4a11-8b9d-12595854237f
    optionalSecretParam:
      name: secret
      in: query
      description: The API Secret for the exchange.
      required: false
      schema:
        type: string
      example: 75B4F636193162488A3728B4A5797708
    optionalPassphraseParam:
      name: passphrase
      in: query
      description: The API passphrase for the exchange wallet.
      required: false
      schema:
        type: string
      example: A3DBHJV
    optionalRequestIdParam:
      name: request_id
      in: query
      required: false
      description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
      schema:
        type: string
      example: web_send_by_user_327_1610444045047
    optionalCoboIdParam:
      name: cobo_id
      in: query
      required: false
      description: 'The Cobo ID, which can be used to track a transaction.'
      schema:
        type: string
      example: '20231213122855000000000000000000'
    optionalTransactionTypeParam:
      name: type
      in: query
      required: false
      description: The type of a transaction
      schema:
        $ref: '#/components/schemas/TransactionType'
    optionalTransactionTypeListParam:
      name: type
      in: query
      required: false
      description: |
        The transaction type. Possible values include: 
          - `Deposit`: A deposit transaction.
          - `Withdrawal`: A withdrawal transaction.
          - `TokenApproval`: A transaction that grants permission to access your tokens. 
          - `ContractCall`: A transaction that interacts with a smart contract.
          - `TransactionFeePayment`: A transaction that is initiated by Fee Station to pay your transaction fee.
          - `TransactionFeeRefund`: A transaction that refunds transaction fees from Fee Station.
          - `RawMessage`: A transaction that signs a message. 
          - `Multi-Sig`: A transaction that requires multiple signatures.
      schema:
        type: string
        description: 'A list of transaction types, separated by comma.'
      example: 'Deposit,Withdrawal'
    optionalTransactionStatusParam:
      name: status
      in: query
      required: false
      description: The status of a transaction
      schema:
        $ref: '#/components/schemas/TransactionStatus'
    optionalTransactionStatusListParam:
      name: status
      in: query
      required: false
      description: |
        The transaction status. Possible values include: 
          - `Submitted`: The transaction is submitted.
          - `PendingScreening`: The transaction is pending screening by Risk Control. 
          - `PendingAuthorization`: The transaction is pending approvals.
          - `PendingSignature`: The transaction is pending signature. 
          - `Broadcasting`: The transaction is being broadcast.
          - `Confirming`: The transaction is waiting for the required number of confirmations.
          - `Completed`: The transaction is completed.
          - `Failed`: The transaction failed.
          - `Rejected`: The transaction is rejected.
      schema:
        description: 'A list of transaction statuses, separated by comma.'
      example: 'Completed,Failed'
    optionalMinCreatedTimestampParam:
      name: min_created_timestamp
      in: query
      required: false
      description: 'The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.'
      schema:
        type: integer
      example: 1635744000
    optionalMaxCreatedTimestampParam:
      name: max_created_timestamp
      in: query
      required: false
      description: 'The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.'
      schema:
        type: integer
      example: 1635744000
    optionalTransactionSourceTypeListParam:
      name: source_type
      in: query
      required: false
      description: |
        The type of transaction source. Possible values include:
          - `Address`: An external address.
          - `CustodialWallet`: A Custodial Wallet.
          - `MPCWallet`: An MPC Wallet.
          - `SafeWallet`: A Smart Contract Wallet (Safe{Wallet}).
          - `ExchangeWallet`: An Exchange Wallet.
          - `FeeStation`: A Fee Station.
      schema:
        description: 'A list of transaction sources, separated by comma.'
      example: 'Deposit,Withdrawal'
    optionalTransactionSourceAddressListParam:
      name: source_wallet_id
      in: query
      required: false
      description: The wallet ID of the transaction source.
      schema:
        description: 'A list of wallet IDs, separated by comma.'
        type: string
        format: uuid
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3'
    optionalTransactionSourceWalletIdListParam:
      name: source_address
      in: query
      required: false
      description: The address of the transaction source.
      schema:
        description: 'A list of addresses, separated by comma.'
        type: string
    optionalTransactionDestinationTypeListParam:
      name: destination_type
      in: query
      required: false
      description: |
        The transaction destination type. Possible values include:
          - `Address`: An external address. 
          - `ContractCall`: A transaction that interacts with a smart contract.
          - `MessageSign`: A transaction that signs a message. 
          - `CustodialWallet`: A Custodial Wallet.
          - `MPCWallet`: An MPC Wallet.
          - `SafeWallet`: A Smart Contract Wallets (Safe{Wallet}).
          - `ExchangeWallet`: An Exchange Wallet.
      schema:
        description: 'A list of destination types, separated by comma.'
      example: 'ContractCall,MessageSign'
    optionalTransactionDestinationAddressListParam:
      name: destination_wallet_id
      in: query
      required: false
      description: The wallet ID of the transaction destination.
      schema:
        description: 'A list of wallet IDs, separated by comma.'
        type: string
        format: uuid
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3'
    optionalTransactionDestinationWalletIdListParam:
      name: destination_address
      in: query
      required: false
      description: |
        The address of the transaction destination. If the address includes a memo, use `|` to append the memo to the address. For example, if the address is `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku` and the memo is `82840924`, you need to provide `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku|82840924` as the property value.
      schema:
        description: 'A list of addresses, separated by comma.'
        type: string
    transactionIdParam:
      name: transaction_id
      in: path
      required: true
      description: The transaction ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    webhookEventIdParam:
      name: event_id
      in: path
      required: true
      description: 'The event ID. You can obtain a list of event IDs by calling [List all events](/developers/v2/api-references/developers--webhooks/list-all-events).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    endpointIdParam:
      name: endpoint_id
      in: path
      required: true
      description: 'The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    activityIdRequiredParam:
      name: activity_id
      in: path
      required: true
      description: activity id
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    poolIdRequiredParam:
      name: pool_id
      in: path
      required: true
      description: staking pool id
      schema:
        type: string
      example: babylon_btc
    poolIdOptionalParam:
      name: pool_id
      in: query
      required: false
      description: staking pool id
      schema:
        type: string
      example: babylon_btc
    stakingIdRequiredParam:
      name: staking_id
      in: path
      required: true
      description: staking id
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    stakingIdOptionalParam:
      name: staking_id
      in: query
      required: false
      description: staking id
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    activityTypeOptionalParam:
      name: activity_type
      in: query
      required: false
      description: activity type
      schema:
        $ref: '#/components/schemas/ActivityType'
      example: Stake
    activityStatusOptionalParam:
      name: activity_status
      in: query
      required: false
      description: activity status
      schema:
        $ref: '#/components/schemas/ActivityStatus'
      example: Success
    activityInitiatorOptionalParam:
      name: initiator
      in: query
      required: false
      description: 'activity initiator, maybe email or api key.'
      schema:
        type: string
      example: vanya@cobo.com
    maxModifiedTimestampOptionalParam:
      name: max_modified_timestamp
      in: query
      required: false
      description: The maximum modified timestamp in Unix epoch seconds
      schema:
        type: integer
        format: int64
      example: 1635744000000
    minModifiedTimestampOptionalParam:
      name: min_modified_timestamp
      in: query
      required: false
      description: The minimum modified timestamp in Unix epoch seconds
      schema:
        type: integer
        format: int64
      example: 1635744000000
  requestBodies:
    createWalletBody:
      description: The request body to create a wallet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWallet'
    updateWalletBody:
      description: The request body.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Example Wallet
                description: The wallet name.
              apikey:
                type: string
                description: The API key of your exchange account. This property is required when updating the information of an Exchange Wallet.
                example: d8f062da-39f4-4a11-8b9d-12595854237f
              secret:
                type: string
                description: The API secret of your exchange account. This property is required when updating the information of an Exchange Wallet.
                example: 75B4F636193162488A3728B4A5797708
              passphrase:
                type: string
                description: The passphrase of your exchange account.
                example: sXASDKWKLLsWWEE
              memo:
                type: string
                description: The memo you use when applying for the API key of your exchange account.
                example: xxx@cobo.com
              account_identify:
                type: string
                description: |
                  The identifier of your exchange account.
                  - For Binance, this is email address of your exchange account.
                  - For OKX, this is the user name of your exchange account.
                example: xxx@cobo.com
              ga_code:
                type: string
                description: The GA code for the exchange.
                example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
              main_wallet_id:
                type: string
                description: The ID of the Exchange Wallet (Main Account).
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    createAddressBody:
      description: The request body to generates addresses within a specified wallet.
      content:
        application/json:
          schema:
            type: object
            required:
              - token_id
              - count
            properties:
              token_id:
                type: string
                description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
                pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
                example: ETH_USDT
              count:
                type: integer
                maximum: 50
                minimum: 1
                default: 1
                description: The number of addresses to create.
                example: 1
              encoding:
                $ref: '#/components/schemas/AddressEncoding'
    lockSpendablesBody:
      description: The request body of the Lock/Unlock UTXOs operation.
      content:
        application/json:
          schema:
            type: object
            required:
              - spendables
            properties:
              spendables:
                type: array
                items:
                  type: object
                  required:
                    - token_id
                    - tx_hash
                    - vout_n
                  properties:
                    token_id:
                      type: string
                      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](/developers/v2/api-references/wallets/list-enabled-tokens).'
                      example: BTC
                    tx_hash:
                      type: string
                      description: The transaction hash.
                      example: 9bdf8e7ae03c237e115f09543fbdb40f8efa600106e78b67ce4d5adfadda2dbb
                    vout_n:
                      type: integer
                      description: The output index of the UTXO.
                      example: 0
    createKeyGroupBody:
      description: The request body to create a key share group.
      content:
        application/json:
          schema:
            type: object
            required:
              - group_type
              - node_count
              - threshold
              - key_holders
            properties:
              group_type:
                $ref: '#/components/schemas/KeyGroupType'
              node_count:
                type: integer
                description: |
                  The number of key share holders in this key share group.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - node count" format), so you can only set `node_count` to 2 or 3. 

                  2. Threshold must be less than or equal to node count.
                example: 3
              threshold:
                type: integer
                description: |
                  The number of key share holders required to sign an operation.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - node count" format), so you can only set `threshold` to 2 or 3. 

                  2. Threshold must be less than or equal to node count.
                example: 2
              key_holders:
                type: array
                items:
                  type: object
                  description: 'When creating MainKeyGroup and SigningKeyGroup, the Cobo key share holder will be added automatically.'
                  properties:
                    name:
                      type: string
                      description: Key share holder's name.
                      example: Key share holder name
                    type:
                      $ref: '#/components/schemas/KeyHolderType'
                    tss_node_id:
                      type: string
                      description: The TSS Node ID.
                      example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
    createMpcProjectBody:
      description: The request body to create a project.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - node_count
              - threshold
            properties:
              name:
                type: string
                example: Project name
                description: The project name.
              node_count:
                type: integer
                description: |
                  The number of key share holders in the project.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - node count" format), so you can only set `node_count` to 2 or 3. 

                  2. Threshold must be less than or equal to node count.
                example: 3
              threshold:
                type: integer
                description: |
                  The number of key share holders required to sign an operation in the project.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - node count" format), so you can only set `threshold` to 2 or 3. 

                  2. Threshold must be less than or equal to node count.
                example: 2
    createTssRequestBody:
      description: The request body to create a TSS request.
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - target_key_group_id
            properties:
              type:
                $ref: '#/components/schemas/TSSRequestType'
              target_key_group_id:
                type: string
                description: The target key share group ID.
                example: '912503538189021590'
              source_key_group_id:
                type: string
                description: |
                  The source key share group ID.

                  **Note:** `source_key_share_group_id` is used only when `type` is set to either `KeyGenfromKeyGroup` or `Recovery`. This is to specify the key share group to be used as the source key share group to create key shares for the `target_key_share_group`.
                example: '987654321098765432'
              detail_params:
                type: object
                properties:
                  node_ids:
                    type: array
                    items:
                      type: string
                    example:
                      - cobo1AbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefgh
                      - cobo2AbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefgh
                    description: |
                      The TSS Node IDs participating in creating a new key share group when `type` is set to either `KeyGenFromKeyGroup` or `Recovery`. 

                      **Note:** In any [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) such as the 2-2, 2-3, and 3-3 schemes (in the "threshold - node count" format), for `node_ids`, you only need to fill in 1 Cobo TSS Node ID and enough non-Cobo TSS Node IDs to satisfy the number of approvers specified in `threshold`. To obtain the Cobo TSS Node ID, run [List all Cobo key share holders](/developers/v2/api-references/wallets--mpc-wallets/list-all-cobo-key-share-holders).
    createMpcVaultBody:
      description: The request body to create a vault.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - vault_type
            properties:
              project_id:
                type: string
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
                description: |
                  The project ID, which you can retrieve by calling [List all projects](/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).

                  **Notes:**
                  1. If you set `vault_type` to `OrgControlled`, the value of `project_id` will be ignored.
                  2. If you set `vault_type` to `UserControlled`, then `project_id` is required.
              name:
                type: string
                example: Name of new vault
                description: The name of the new vault.
              vault_type:
                $ref: '#/components/schemas/MPCVaultType'
    updateProjectBody:
      description: The request body to update a project's name.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: New project name
                description: The project's new name.
    updateVaultBody:
      description: The request body to update a vault's name.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The new name of the vault.
                example: The new name of the vault
    createTransferBody:
      description: The request body to create a transfer transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transfer'
    createSmartContractCallBody:
      description: The request body for making a contract call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContractCall'
    createMessageSignBody:
      description: The request body to create a message sign transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignMessage'
    estimateFeeBody:
      description: The request body to estimate the transaction fee of a token transfer or a contract call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimateFee'
    feeRequestBody:
      description: The request body to drop or to speed up transactions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRbf'
    resendTransactionBody:
      description: The request body to resend transactions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionResend'
    createStakeActivityBody:
      description: The request body to create a staking activity.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateStakeActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    createWithdrawActivityBody:
      description: The request body to create a withdraw activity.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateWithdrawActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    createUnstakeActivityBody:
      description: The request body to create a unstake activity.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateUnstakeActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    estimateStakeActivityFeeBody:
      description: The request body to create a get estimate fee of a staking activity.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/EstimateStakeFee'
              - $ref: '#/components/schemas/EstimateUnstakeFee'
              - $ref: '#/components/schemas/EstimateWithdrawFee'
            discriminator:
              propertyName: activity_type
              mapping:
                Stake: '#/components/schemas/EstimateStakeFee'
                Unstake: '#/components/schemas/EstimateUnstakeFee'
                Withdraw: '#/components/schemas/EstimateWithdrawFee'
    createWebhookEndpointBody:
      description: The request body to register a webhook endpoint.
      content:
        application/json:
          schema:
            type: object
            required:
              - subscribed_events
              - url
            properties:
              url:
                description: The webhook endpoint URL.
                type: string
                format: url
                example: 'https://example.com/webhook'
              subscribed_events:
                description: |
                  The event types you want to subscribe to for this webhook endpoint. You can call [Get webhook event types](/developers/v2/api-references/developers--webhooks/get-webhook-event-types) to retrieve all available event types.
                items:
                  $ref: '#/components/schemas/WebhookEventType'
                type: array
              description:
                description: The description of the webhook endpoint.
                type: string
                example: My webhook endpoint
    updateWebhookBody:
      description: The request body to update a webhook endpoint.
      content:
        application/json:
          schema:
            type: object
            properties:
              subscribed_events:
                description: 'The new event types you want to subscribe to for this webhook endpoint. You can call [Get webhook event types](/developers/v2/api-references/developers--webhooks/get-webhook-event-types) to retrieve all available event types.'
                items:
                  $ref: '#/components/schemas/WebhookEventType'
                type: array
              status:
                type: string
                enum:
                  - STATUS_INACTIVE
                example: STATUS_INACTIVE
                description: 'The new status you want to set the webhook endpoint to. If you set `status` to `STATUS_INACTIVE`, the endpoint will be revoked, meaning it will no longer receive any webhook events.'
              description:
                description: The webhook endpoint description.
                type: string
                example: My webhook endpoint
  responses:
    badRequestError:
      description: Bad request. Your request contains malformed syntax or invalid parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    unauthorizedError:
      description: Unauthorized. Please provide valid credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    forbiddenError:
      description: Forbidden. You do not have the permission to access the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notFoundError:
      description: Requested resources not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    tooManyRequestError:
      description: Too many requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    serviceUnavailableError:
      description: Unknown internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    getChainsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ChainInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getChainByIdResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChainInfo'
    getAssetsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AssetInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokensResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ExtendedTokenInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokenByIdResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExtendedTokenInfo'
    getTokenBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TokenBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAssetBalancesResponse:
      description: Successfully listed tokens
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AssetBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletsResponse:
      description: Successfully listed wallets
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/WalletInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletByIdResponse:
      description: Successful get a wallet info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    createWalletResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    updateWalletResponse:
      description: Successfully updated address
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    deleteWalletResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - submitted
            properties:
              submitted:
                type: boolean
                example: true
                description: |
                  Whether the request to delete the wallet has been successfully submitted.
                  - `true`: The request to delete the wallet has been successfully submitted.
                  - `false`: The request to delete the wallet has not been submitted.
    spendableListResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/UTXO'
              pagination:
                $ref: '#/components/schemas/Pagination'
    lockSpendableResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              executed:
                type: boolean
                example: true
                description: |
                  Whether the locking or unlocking operation has been successfully executed.
                  - `true`: The operation has been successfully executed.
                  - `false`: The operation has not been executed.
    maxTransferableValueResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MaxTransferableValue'
    getAddressesResponse:
      description: Successfully listed addresses
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AddressInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    createAddressResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AddressInfo'
    getAddressValidityResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - validity
            properties:
              validity:
                type: boolean
                description: |
                  Whether the address is valid.
                  - `true`: The address is valid.
                  - `false`: the address is invalid.
                example: true
    createKeyGroupsResponse:
      description: mpc vault successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    createMpcProjectResponse:
      description: Successfully created project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    createTssRequestResponse:
      $ref: '#/components/responses/createMpcVaultResponse'
    createMpcVaultResponse:
      description: Successfully created the vault.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getCoboKeyHoldersResponse:
      description: Successfully listed MPC Wallets' key share holder information.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/KeyHolder'
    getKeyGroupResponse:
      description: Successfully get mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    getKeyGroupsResponse:
      description: Successfully listed key share groups.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/KeyGroup'
    getMpcProjectResponse:
      description: Successfully listed all vaults.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    getMpcProjectsResponse:
      description: Successfully listed all projects.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MPCProject'
    getTssRequestResponse:
      description: Successfully retrieved TSS request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    getMpcVaultResponse:
      description: Successfully retrieved vault information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getMpcVaultsResponse:
      description: Successfully listed all vaults.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MPCVault'
    deleteKeyGroupResponse:
      description: Successfully deleted the specified key share group.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    putKeyGroupResponse:
      description: Successfully modify mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    putTssRequestResponse:
      description: Successfully modified the TSS request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    putVaultResponse:
      description: Successfully modify mpc vault
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getSubAccountIdsResponse:
      description: Successfully list of exchange sub account ids
      content:
        application/json:
          schema:
            type: array
            description: Sub account id list
            items:
              type: string
            example:
              - f47ac10b-58cc-4372-a567-0e02b2c3d479
    getChainFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FeeRate'
            description: |
              The fee rate for the specified chain or token. 

              The `max_priority_fee` in the EIP-1559 fee model and the `max_fee_amount` properties in the fixed fee model represent the recommended values from the chain.
    getTransactionsResponse:
      description: The information about the transactions.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTransactionByIdResponse:
      description: The information about a transaction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionDetail'
    estimateFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EstimationFee'
    transactionFeeResponse:
      description: Successful get a transaction detail
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionTransferFee'
    createTransactionRequestResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - request_id
              - transaction_id
              - status
            properties:
              request_id:
                type: string
                description: The request ID that is used to track a withdrawal request. The request ID is provided by you and must be unique within your organization.
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
              transaction_id:
                type: string
                description: The transaction ID.
                example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              status:
                $ref: '#/components/schemas/TransactionStatus'
    createWebhookEndpointResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Endpoint'
    getWebhookEndpointResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Endpoint'
    listWebhookEndpointsResponse:
      description: Successfully listed of webhook endpoints
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/Endpoint'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    updateWebhookEndpointResponse:
      description: Update webhook endpoint successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Endpoint'
    listWebhookEventsResponse:
      description: A list of webhook events has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/WebhookEvent'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWebhookEventResponse:
      description: The webhook event information is successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEvent'
    getWebhookEventDefinitionsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                event_type:
                  $ref: '#/components/schemas/WebhookEventType'
                description:
                  type: string
                  description: The description of the webhook event type.
                  example: Occurs when the transaction status is updated
    retryWebhookEventResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              retried:
                type: boolean
                example: true
                description: Whether the retry request has been successfully sent.
    getWebhookEventLogsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/WebhookEventLog'
    listStakingPoolsResponse:
      description: A list of staking protocols has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/PoolSummary'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    createActivityResponse:
      description: Successfully created a staking activity.
      content:
        application/json:
          schema:
            type: object
            required:
              - activity_id
            properties:
              activity_id:
                type: string
                description: The id of the activity
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
              staking_id:
                type: string
                description: The id of the related staking
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
    activityDetailsResponse:
      description: A staking activity has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Activity'
    stakingsDetailsResponse:
      description: A staking has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Stakings'
    poolDetailsResponse:
      description: A staking pool has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetails'
    listStakingsResponse:
      description: A list of staking has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/Stakings'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    listActivitiesResponse:
      description: A list of staking activities has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    estimateStakingFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              fee_type:
                $ref: '#/components/schemas/FeeType'
              fee_amount:
                type: string
                description: The amount of the estimate transaction fee
                example: '0.02'
              token_id:
                type: string
                description: The token ID of the transaction fee.
                example: ETH
  securitySchemes:
    CoboAuth:
      type: apiKey
      in: header
      name: BIZ-API-KEY
      description: The API key.
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://auth.cobo.com/authorize'
          tokenUrl: 'https://auth.cobo.com/oauth/token'
          scopes:
            'custodial_asset_wallet:create': Create access to custodial asset wallets
            'custodial_asset_wallet:add': Generate address access to custodial asset wallets
            'custodial_asset_wallet:edit': Change wallet name access to custodial asset wallets
            'custodial_asset_wallet:withdraw': Withdraw access to custodial asset wallets
            'mpc_organization_controlled_wallet:create': Create access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:add': Generate address access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:edit': Change wallet name access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:withdraw': Withdraw access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:contract_call': Contract call access to MPC organization-controlled wallets
            'mpc_organization_controlled_wallet:message_sign': Message sign access to MPC organization-controlled wallets
            'mpc_organization_controlled_vault:manage': Create/Edit access to MPC organization-controlled vaults
            'mpc_organization_controlled_key_group:manage': Create/Edit/Delete access to MPC organization-controlled key groups
            'mpc_organization_controlled_tss_request:manage': Create/Cancel access to MPC organization-controlled tss requests
            'mpc_user_controlled_wallet:create': Create access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:add': Generate address access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:edit': Change wallet name access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:withdraw': Withdraw access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:contract_call': Contract call access to MPC user-controlled wallets
            'mpc_user_controlled_wallet:message_sign': Message sign access to MPC user-controlled wallets
            'mpc_user_controlled_project:manage': Create/Edit access to MPC user-controlled projects
            'mpc_user_controlled_vault:manage': Create/Edit access to MPC user-controlled vaults
            'mpc_user_controlled_key_group:manage': Create/Edit/Delete access to MPC user-controlled key groups
            'mpc_user_controlled_tss_request:manage': Create/Cancel access to MPC user-controlled tss requests
            'webhook:resend': Resend access to webhook events
            'webhook_url:edit': Create/Edit access to webhook urls
security:
  - CoboAuth: []
