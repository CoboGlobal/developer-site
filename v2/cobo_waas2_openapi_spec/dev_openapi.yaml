openapi: 3.0.3
x-mcp:
  enabled: true
info:
  title: Cobo Wallet as a Service 2.0
  description: |
    The Cobo Wallet-as-a-Service (WaaS) 2.0 API is the latest version of Cobo's WaaS API offering. It enables you to access Cobo's full suite of crypto wallet technologies with powerful and flexible access controls. By encapsulating complex security protocols and streamlining blockchain interactions, this API allows you to concentrate on your core business activities without worrying about the safety of your assets. The WaaS 2.0 API presents the following key features:

    - A unified API for Cobo's [all four wallet types](https://manuals.cobo.com/en/portal/introduction#an-all-in-one-wallet-platform)
    - Support for 80+ chains and 3000+ tokens
    - A comprehensive selection of webhook events
    - Flexible usage models for MPC Wallets, including [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/introduction) and [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/ucw/introduction)
    - Programmatic control of smart contract wallets such as Safe{Wallet} with fine-grained access controls
    - Seamlessly transfer funds across multiple exchanges, including Binance, OKX, Bybit, Deribit, and more

    For more information about the WaaS 2.0 API, see [Introduction to WaaS 2.0](https://www.cobo.com/developers/v2/guides/overview/introduction).
  termsOfService: 'https://cobo.com/waas/tos/'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Cobo WaaS
    url: 'https://www.cobo.com/waas'
    email: help@cobo.com
  version: 1.0.0
servers:
  - url: 'https://api.dev.cobo.com/v2'
    description: Development environment
  - url: 'https://api.cobo.com/v2'
    description: Production environment
tags:
  - name: Organizations
    description: Operations related to Organizations.
  - name: Wallets
    description: Operations related to all wallets.
  - name: Wallets - MPC Wallets
    description: Operations related to mpc wallet.
  - name: Wallets - Exchange Wallet
    description: Operations related to exchange wallet.
  - name: Wallets - Smart Contract Wallets
    description: Operations related to smart contract wallet.
  - name: Transactions
    description: Operations related to all transactions.
  - name: Developers - Webhooks
    description: Operations related to webhooks.
  - name: Stakings
    description: Operations related to staking.
  - name: OAuth
    description: Operations related to OAuth.
  - name: Developers
    description: Operations related to developers.
  - name: AddressBooks
    description: Operations related to address books.
  - name: TravelRule
    description: Operations related to travel rule.
  - name: PrimeBroker
    description: Operations related to prime broker.
  - name: AppWorkflows
    description: Operations related to app workflow.
  - name: FeeStation
    description: Operations related to fee station.
  - name: Payment
    description: Operations related to payment.
  - name: Tokenization
    description: Operations related to tokenization.
  - name: AutoSweep
    description: Operations related to auto sweep.
paths:
  /organizations/info:
    get:
      tags:
        - Organizations
      operationId: get_org_info
      summary: Get organization information
      description: |
        This operation retrieves the detailed information about the organization associated with the current API key.
      responses:
        '200':
          $ref: '#/components/responses/getOrgInfoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/chains:
    get:
      tags:
        - Wallets
      operationId: list_supported_chains
      summary: List supported chains
      description: |
        This operation retrieves all chains supported by a specific wallet type or subtype. 

        It provides details such as the chain ID, chain symbol, and other relevant information. If you do not specify a wallet type, this operation returns a combination of chains supported by each wallet type. You can filter the result by chain IDs. The chain metadata is publicly available without any permission restrictions.

        Cobo Portal currently supports over 80 blockchains and more than 3,000 tokens. In addition to this operation, you can also view the full list of supported chains [here](https://www.cobo.com/chains). We regularly update the list with new additions. If you want to request support for a specific chain or token, please [contact us](https://www.cobo.com/contact).
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/chains/{chain_id}':
    parameters:
      - $ref: '#/components/parameters/chainIdParam'
    get:
      tags:
        - Wallets
      operationId: get_chain_by_id
      summary: Get chain information
      description: |
        This operation retrieves the detailed information about a specified chain.
      responses:
        '200':
          $ref: '#/components/responses/getChainByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/tokens:
    get:
      tags:
        - Wallets
      operationId: list_supported_tokens
      summary: List supported tokens
      description: |
        This operation retrieves all tokens supported by a specific wallet type or subtype. 

        It provides details such as token ID, token symbol, and other relevant information. If you do not specify a wallet type, this operation returns a combination of tokens supported by each wallet type. You can filter the result by token IDs or chain IDs. The token metadata is publicly available without any permission restrictions.

        Cobo Portal currently supports over 80 blockchains and more than 3,000 tokens. In addition to this operation, you can also view the full list of supported tokens [here](https://www.cobo.com/tokens). We regularly update the list with new additions. If you want to request support for a specific chain or token, please [contact us](https://www.cobo.com/contact).
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/tokens/{token_id}':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    get:
      tags:
        - Wallets
      operationId: get_token_by_id
      summary: Get token information
      description: |
        This operation retrieves the detailed information about a specified token.
      responses:
        '200':
          $ref: '#/components/responses/getTokenByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/enabled_chains:
    get:
      tags:
        - Wallets
      operationId: list_enabled_chains
      summary: List enabled chains
      description: |
        This operation retrieves all the chains that can be used by your organization. 

        You can filter the result by wallet type or subtype. If you do not specify a wallet type, this operation returns a combination of chains that can be used by your organization for each wallet type.
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/enabled_tokens:
    get:
      tags:
        - Wallets
      operationId: list_enabled_tokens
      summary: List enabled tokens
      description: |
        This operation retrieves all the tokens that can be used by your organization. 

        You can filter the result by wallet type, subtype, chain IDs, and token IDs. If you do not specify a wallet type, this operation returns a combination of tokens that can be used by your organization for each wallet type.
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/tokens/listing_requests:
    post:
      tags:
        - Wallets
      operationId: create_token_listing_request
      summary: Create token listing request
      description: |
        This operation creates a token listing request. The token to be listed must already be deployed on the specified blockchain and have a valid contract address.

        <note>Currently, tokens listed through this operation are only supported in wallets of type `Custodial` or `MPC`, and subtype `Asset`, `Web3`, or `Org-Controlled`.</note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.create
      requestBody:
        $ref: '#/components/requestBodies/createTokenListingRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTokenListingRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets
      operationId: list_token_listing_requests
      summary: List token listing requests
      description: |
        This operation lists all token listing requests in your organization. You can filter the results by request status.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - name: status
          in: query
          description: The current status of the token listing request.
          required: false
          schema:
            $ref: '#/components/schemas/TokenListingRequestStatus'
      responses:
        '200':
          description: List of token listing requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TokenListing'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/tokens/listing_requests/{request_id}':
    get:
      tags:
        - Wallets
      operationId: get_token_listing_request_by_request_id
      summary: Get token listing request
      description: |
        This operation retrieves detailed information about a specific token listing request, including its current status.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - name: request_id
          in: path
          description: The unique identifier of the token listing request.
          required: true
          schema:
            type: string
          example: 123e4567e89b12d3a456426614174000
      responses:
        '200':
          description: Detailed information about a token listing request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenListing'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets:
    post:
      tags:
        - Wallets
      operationId: create_wallet
      summary: Create wallet
      description: |
        This operation creates a wallet with the provided information.

        <Note>This operation is not applicable to Smart Contract Wallets.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.create
      requestBody:
        $ref: '#/components/requestBodies/createWalletBody'
      responses:
        '201':
          $ref: '#/components/responses/createWalletResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets
      operationId: list_wallets
      summary: List all wallets
      description: |
        This operation retrieves the information of all wallets under your organization. You can filter the result by wallet type and subtype. For MPC Wallets, you can also filter by project ID and vault ID.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalProjectIdQueryParam'
        - $ref: '#/components/parameters/optionalVaultIdQueryParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getWalletsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets
      operationId: get_wallet_by_id
      summary: Get wallet information
      description: |
        This operation retrieves the detailed information about a specified wallet.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      responses:
        '200':
          $ref: '#/components/responses/getWalletByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Wallets
      operationId: update_wallet_by_id
      summary: Update wallet
      description: |
        This operation updates the information of a specified wallet.
      security:
        - OAuth2:
            - wallet.update
      requestBody:
        $ref: '#/components/requestBodies/updateWalletBody'
      responses:
        '200':
          $ref: '#/components/responses/updateWalletResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/delete':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: delete_wallet_by_id
      summary: Delete wallet
      description: |
        This operation deletes a specified wallet.

        <Note>This operation is applicable to Exchange Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.delete
      responses:
        '201':
          $ref: '#/components/responses/deleteWalletResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/utxos':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets
      operationId: list_utxos
      summary: List UTXOs
      description: |
        The operation retrieves a list of unspent transaction outputs (UTXOs) for a specified wallet and token.

        <Note>This operation is applicable to MPC Wallets and Custodial Wallets (Web3 Wallets) only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/optionalAddressParam'
        - $ref: '#/components/parameters/optionalUtxoTxHashParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listUtxoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/utxos/batch_check':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: batch_check_utxo
      summary: Batch check UTXOs
      description: |
        This operation verifies the existence and details of specified unspent transaction outputs (UTXOs) for a given wallet and token. A maximum of 100 UTXOs can be verified per request.
        <Note>This operation is applicable to MPC Wallets and Custodial Wallets (Web3 Wallets) only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      requestBody:
        $ref: '#/components/requestBodies/batchCheckUtxoRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/batchCheckUtxoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/utxos/lock':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: lock_utxos
      summary: Lock UTXOs
      description: |
        This operation locks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.manage_utxo
      requestBody:
        $ref: '#/components/requestBodies/lockUtxosBody'
      responses:
        '201':
          $ref: '#/components/responses/lockUtxoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/utxos/unlock':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: unlock_utxos
      summary: Unlock UTXOs
      description: |
        This operation unlocks the UTXOs with specified transaction hashes. Locked UTXOs cannot be transferred until unlocked.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.manage_utxo
      requestBody:
        $ref: '#/components/requestBodies/lockUtxosBody'
      responses:
        '201':
          $ref: '#/components/responses/lockUtxoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/max_transferable_value':
    get:
      tags:
        - Wallets
      operationId: get_max_transferable_value
      summary: Get maximum transferable value
      description: |
        <Warning>This operation is planned for deprecation. We recommend using  [Estimate maximum transferable value](https://www.cobo.com/developers/v2/api-references/wallets/estimate-maximum-transferable-value) instead.</Warning>
        This operation retrieves the maximum amount that you can transfer from a wallet or a specified wallet address, along with the corresponding transaction fee.

        You must specify `to_address` in your query because it affects the transaction fee.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/requiredFeeRateParam'
        - $ref: '#/components/parameters/requiredToAddressParam'
        - $ref: '#/components/parameters/optionalFromAddressParam'
      responses:
        '200':
          $ref: '#/components/responses/maxTransferableValueResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/max_transferable_value_with_fee_model':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: get_max_transferable_value_with_fee_model
      summary: Estimate maximum transferable value
      description: |
        This operation estimates the maximum transferable value from a wallet or a specific wallet address, based on the specified fee settings.

        The `to_address` property is required because it affects the fee calculation.

        <Note>This operation is applicable to Custodial Wallets (Web3 Wallets) and MPC Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      requestBody:
        $ref: '#/components/requestBodies/maxTransferableValueRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/maxTransferableValueResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/addresses':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: create_address
      summary: Create addresses in wallet
      description: |
        This operation generates one or more addresses within a specified wallet.

        <Note>This operation is applicable to Custodial Wallets and MPC Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.create_address
      requestBody:
        $ref: '#/components/requestBodies/createAddressBody'
      responses:
        '201':
          $ref: '#/components/responses/createAddressResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets
      operationId: list_addresses
      summary: List wallet addresses
      description: |
        This operation retrieves a list of addresses within a specified wallet.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalAddressListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/addresses/{address}/tokens':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
      - $ref: '#/components/parameters/addressParam'
    get:
      tags:
        - Wallets
      operationId: list_token_balances_for_address
      summary: List token balances by address
      description: |
        The operation retrieves a list of token balances for a specified address within a wallet. 

        <Note>This operation is applicable to MPC Wallets and Smart Contract Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/tokens':
    get:
      tags:
        - Wallets
      operationId: list_token_balances_for_wallet
      summary: List token balances by wallet
      description: |
        The operation retrieves a list of token balances within a specified wallet.

        <Note>This operation is not applicable to Exchange Wallets.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/tokens/{token_id}':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
      - $ref: '#/components/parameters/tokenIdParam'
    get:
      tags:
        - Wallets
      operationId: list_address_balances_by_token
      summary: List address balances by token
      description: |
        This operation retrieves a list of address balances for a specified token within a wallet.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/optionalAddressListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/tokens/{token_id}/refresh_address_balances':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
      - $ref: '#/components/parameters/tokenIdParam'
    put:
      tags:
        - Wallets
      operationId: refresh_address_balances_by_token
      summary: Refresh address balances by token
      description: |
        This operation refreshes the balances of specified addresses for a given token within a wallet.

        The successful return of the request only means that the refresh request has been submitted.

        <Note>This operation is applicable to MPC Wallets only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      requestBody:
        $ref: '#/components/requestBodies/refreshAddressBalancesBody'
      responses:
        '200':
          $ref: '#/components/responses/refreshAddressBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/check_address_validity:
    get:
      tags:
        - Wallets
      operationId: check_address_validity
      summary: Check address validity
      description: |
        This operation verifies if a given address is valid for a specific chain.
      parameters:
        - $ref: '#/components/parameters/requiredChainIdParam'
        - $ref: '#/components/parameters/requiredAddressParam'
      responses:
        '200':
          $ref: '#/components/responses/checkAddressValidityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/check_addresses_validity:
    get:
      tags:
        - Wallets
      operationId: check_addresses_validity
      summary: Check addresses validity
      description: |
        This operation verifies if given addresses are valid for a specific chain.
      parameters:
        - $ref: '#/components/parameters/requiredChainIdParam'
        - $ref: '#/components/parameters/requiredAddressListParam'
      responses:
        '200':
          $ref: '#/components/responses/checkAddressesValidityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/check_address_chains_validity:
    get:
      tags:
        - Wallets
      operationId: check_address_chains_validity
      summary: Check address validity across chains
      description: |
        This operation verifies if a given address is valid for a list of chains.

        <Note>You can specify up to 20 chain IDs in a single request.</Note>
      parameters:
        - $ref: '#/components/parameters/requiredAddressParam'
        - $ref: '#/components/parameters/requiredChainIdListParam'
      responses:
        '200':
          $ref: '#/components/responses/checkAddressChainsValidityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/mpc/cobo_key_share_holders:
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_cobo_key_holders
      summary: List all Cobo key share holders
      description: |
        This operation retrieves a list of all Cobo key share holders and their information. 

        <Info>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Info>
      responses:
        '200':
          $ref: '#/components/responses/getCoboKeyHoldersResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/mpc/projects:
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_mpc_project
      summary: Create project
      description: |
        This operation creates a project.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_project.create
      requestBody:
        $ref: '#/components/requestBodies/createMpcProjectBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcProjectResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_mpc_projects
      summary: List all projects
      description: |
        This operation retrieves a list of all projects.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_project.read
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/projects/{project_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_mpc_project_by_id
      summary: Get project information
      description: |
        This operation retrieves detailed information about a project.
        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_project.read
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Wallets - MPC Wallets
      operationId: update_mpc_project_by_id
      summary: Update project name
      description: |
        This operation updates a project's name.

        <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_project.update
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateProjectBody'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/mpc/vaults:
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_mpc_vault
      summary: Create vault
      description: |
        This operation creates a vault.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_vault.create
      requestBody:
        $ref: '#/components/requestBodies/createMpcVaultBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcVaultResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_mpc_vaults
      summary: List all vaults
      description: |
        This operation retrieves a list of all vaults. You can filter the result by project ID.

        **Notes for query parameters**:
        1. `project_id` is required when `vault_type` is set to `User-Controlled`.
        2. `project_id` must be left blank when `vault_type` is set to `Org-Controlled`.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_vault.read
      parameters:
        - name: vault_type
          in: query
          description: |
            The vault type. Possible values include:
            - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).

            - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).
          required: true
          schema:
            $ref: '#/components/schemas/MPCVaultType'
        - $ref: '#/components/parameters/optionalProjectIdQueryParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_mpc_vault_by_id
      summary: Get vault information
      description: |
        This operation retrieves detailed information about a vault.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_vault.read
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Wallets - MPC Wallets
      operationId: update_mpc_vault_by_id
      summary: Update vault name
      description: |
        This operation updates a vault's name.

        <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info>
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_vault.update
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateVaultBody'
      responses:
        '200':
          $ref: '#/components/responses/putVaultResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_key_share_holder_group
      summary: Create key share holder group
      description: |
        This operation creates a key share holder group for a specified vault. <Note>This operation will not return the `tss_key_share_groups` property until key shares have been created using the [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](https://www.cobo.com/developers/v2/api-references/wallets/create-wallet) operation is only possible after you've completed the previous actions.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.create
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createKeyShareHolderGroupBody'
      responses:
        '201':
          $ref: '#/components/responses/createKeyShareHolderGroupsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_key_share_holder_groups
      summary: List all key share holder groups
      description: |
        This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type.
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.read
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/optionalKeyShareHolderGroupTypeParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyShareHolderGroupsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_key_share_holder_group_by_id
      summary: Get key share holder group information
      description: |
        This operation retrieves detailed information about a specified key share holder group.
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.read
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyShareHolderGroupIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyShareHolderGroupResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Wallets - MPC Wallets
      operationId: update_key_share_holder_group_by_id
      summary: Update key share holder group
      description: |
        This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.update
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyShareHolderGroupIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateGroupBody'
      responses:
        '200':
          $ref: '#/components/responses/putKeyShareHolderGroupResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}/delete':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: delete_key_share_holder_group_by_id
      summary: Delete key share holder group
      description: This operation deletes a specified key share holder group.
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.delete
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyShareHolderGroupIdParam'
      responses:
        '201':
          $ref: '#/components/responses/deleteKeyShareHolderGroupResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: create_tss_request
      summary: Create TSS request
      description: |
        This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery.
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.create
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createTssRequestBody'
      responses:
        '201':
          description: mpc vault successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_tss_requests
      summary: List TSS requests
      description: |
        This operation retrieves a list of TSS requests and their details.
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.read
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/requiredKeyShareHolderGroupIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          description: Successfully retrieved TSS request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TSSRequest'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_tss_request_by_id
      summary: Get TSS request
      description: |
        This operation retrieves detailed information about a TSS request.
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.read
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getTssRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel':
    post:
      tags:
        - Wallets - MPC Wallets
      operationId: cancel_tss_request_by_id
      summary: Cancel TSS request
      description: |
        This operation cancels a TSS request.
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.delete
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
      responses:
        '201':
          $ref: '#/components/responses/putTssRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/key_share_holders':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: list_key_share_holders
      summary: List all key share holders
      description: |
        This operation retrieves a list of all key share holders under a specified vault. You can filter the result by key share holder group ID.
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.read
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/optionalGroupIdsListQueryParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyShareHoldersResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/mpc/vaults/{vault_id}/key_share_holders/{tss_node_id}':
    get:
      tags:
        - Wallets - MPC Wallets
      operationId: get_key_share_holder_by_tss_node_id
      summary: Get key share holder information
      description: |
        This operation retrieves detailed information about a specified key share holder.
      security:
        - CoboAuth: []
        - OAuth2:
            - mpc_key_group.read
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssNodeIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyShareHolderResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /wallets/exchanges:
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_exchanges
      summary: List supported exchanges
      description: 'This operation retrieves the information about the exchanges supported by Cobo''s Exchange Wallets, including exchange IDs and trading account types.'
      responses:
        '200':
          $ref: '#/components/responses/getExchangeSettingsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/exchanges/{exchange_id}/assets':
    parameters:
      - $ref: '#/components/parameters/exchangeIdParam'
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_supported_assets_for_exchange
      summary: List supported assets
      description: This operation retrieves all the assets supported by a specified exchange.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAssetsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/exchanges/{exchange_id}/assets/{asset_id}/chains':
    parameters:
      - $ref: '#/components/parameters/exchangeIdParam'
      - name: asset_id
        in: path
        required: true
        description: '(This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account. You can get the ID of the assets supported by an exchanges by calling [List supported assets](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-assets).'
        schema:
          type: string
        example: USDT
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_supported_chains_for_exchange
      summary: List supported chains
      description: |
        This operation retrieves all the chains supported by a specified exchange for a given asset. 

        You can use this operation to confirm whether you can transfer an asset from or to your Exchange Wallet when using a specific chain.
      responses:
        '200':
          $ref: '#/components/responses/getChainsByAssetIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/exchanges/assets':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_asset_balances_for_exchange_wallet
      summary: List asset balances
      description: |
        This operation retrieves the asset balances in a specified Exchange Wallet. You can filter the results by trading account type or asset ID.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/optionalTradingAccountTypeListParam'
        - $ref: '#/components/parameters/optionalAssetIdListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAssetBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/wallets/{wallet_id}/smart_contracts/delegates':
    post:
      tags:
        - Wallets - Smart Contract Wallets
      operationId: list_safe_wallet_delegates
      summary: List Delegates
      description: |
        This operation retrieves all available Delegates of a Safe\{Wallet\} for a given transfer or contract call request.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
      requestBody:
        $ref: '#/components/requestBodies/safeWalletDelegatesRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/getSafeWalletDelegatesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/check_loop_transfers:
    get:
      tags:
        - Transactions
      operationId: check_loop_transfers
      summary: Check Cobo Loop transfers
      description: |
        This operation verifies if the transactions from a given source wallet to a list of given destinations can be executed as Cobo Loop transfers. 

        For more information about Cobo Loop, see [Cobo Loop's product manuals](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop).
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.estimate_fee
      parameters:
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/requiredSourceWalletIdParam'
        - $ref: '#/components/parameters/requiredDestinationAddressesParam'
      responses:
        '200':
          $ref: '#/components/responses/checkLoopTransfersResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/estimate_fee:
    post:
      tags:
        - Transactions
      operationId: estimate_fee
      summary: Estimate transaction fee
      description: |
        This operation estimates the transaction fee of a token transfer or a contract call based on the fee model that the chain uses, considering factors such as network congestion and transaction complexity.

        You need to specify the transaction information, including the request ID, request type, source address, destination address, token ID (only applicable to token transfers), and chain ID (only applicable to contract calls).

        The response can contain different properties based on the transaction fee model used by the chain. For the legacy, EIP-1559, and UTXO fee models, Cobo also supports three different transaction speed levels: slow, recommended, and fast. For more information about estimating transaction fees, refer to [Estimate transaction fee](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees).
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.estimate_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeBody'
      responses:
        '201':
          $ref: '#/components/responses/estimateFeeResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/transfer:
    post:
      tags:
        - Transactions
      operationId: create_transfer_transaction
      summary: Transfer token
      description: |
        The operation transfers your assets from a wallet created on Cobo Portal to another address.

        You need to specify details such as the sender address and recipient address, token ID, and the amount to transfer. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        <Note>If you make transfers from Custodial Wallets (Asset Wallets) and Exchange Wallets, do not set the fee-related properties, as they will not take effects.</Note>

        <Note>You can transfer tokens to multiple addresses only if you use MPC Wallets as the transaction source. To do this, you should use the <code>utxo_outputs</code> property to specify the destination addresses.</Note>

        <Info>If you initiate a transaction from a Smart Contract Wallet, a relevant transaction will be triggered from the Delegate to the Cobo Safe's address of the Smart Contract Wallet, with a transfer amount of <code>0</code>.</Info>
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.withdraw
      requestBody:
        $ref: '#/components/requestBodies/createTransferBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/contract_call:
    post:
      tags:
        - Transactions
      operationId: create_contract_call_transaction
      summary: Call smart contract
      description: |
        This operation creates a transaction to interact with a smart contract on the blockchain.

        You need to provide details such as the source address, destination address, and the calldata. You can specify the fee-related properties to limit the transaction fee. A transaction request for tracking is returned upon successful operation.

        <Note>Currently, this operation only applies to the transactions from Custodial Wallets (Web3 Wallets), MPC Wallets, or Smart Contract Wallets on the blockchains that have a similar architecture to Ethereum.</Note>

        <Info>If you initiate a transaction from a Smart Contract Wallet, a relevant transaction will be triggered from the Delegate to the Cobo Safe's address of the Smart Contract Wallet, with a transfer amount of <code>0</code>.</Info>
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.contract_call
      requestBody:
        $ref: '#/components/requestBodies/createSmartContractCallBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/message_sign:
    post:
      tags:
        - Transactions
      operationId: create_message_sign_transaction
      summary: Sign message
      description: |
        This operation creates a transaction to sign the provided message using cryptographic techniques.

        In some scenarios, you want to sign a message for identity authentication or transaction approval. You need to provide details such as the source address, destination address, and the message to be signed. A transaction request for tracking is returned upon successful operation.

        You can get the signature result by calling [Get transaction information](https://www.cobo.com/developers/v2/api-references/transactions/get-transaction-information). 

        <Note>This operation only applies to transactions from MPC Wallets.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.message_sign
      requestBody:
        $ref: '#/components/requestBodies/createMessageSignBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions:
    get:
      tags:
        - Transactions
      operationId: list_transactions
      summary: List all transactions
      description: |
        This operation retrieves all the transactions under your organization.

        You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamps. You can also paginate and sort your query results.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.read
      parameters:
        - $ref: '#/components/parameters/optionalRequestIdParam'
        - $ref: '#/components/parameters/optionalCoboIdParam'
        - $ref: '#/components/parameters/optionalTransactionIdParam'
        - $ref: '#/components/parameters/optionalTransactionHashParam'
        - $ref: '#/components/parameters/optionalTransactionTypeListParam'
        - $ref: '#/components/parameters/optionalTransactionStatusListParam'
        - $ref: '#/components/parameters/optionalWalletListIdParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/optionalAssetIdListParam'
        - $ref: '#/components/parameters/optionalVaultIdQueryParam'
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalProjectIdQueryParam'
        - $ref: '#/components/parameters/optionalMinCreatedTimestampParam'
        - $ref: '#/components/parameters/optionalMaxCreatedTimestampParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/directionParam'
      responses:
        '200':
          $ref: '#/components/responses/getTransactionsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    get:
      tags:
        - Transactions
      operationId: get_transaction_by_id
      summary: Get transaction information
      description: |
        This operation retrieves detailed information about a specified transaction, such as the transaction status, source address, destination address, and timestamp.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.read
      responses:
        '200':
          $ref: '#/components/responses/getTransactionByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/resend':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: resend_transaction_by_id
      summary: Resend transaction
      description: |
        This operation resends a specified transaction. Resending a transaction means retrying a previously failed transaction. For more details about resending a transaction, see [Resend a transaction](https://www.cobo.com/developers/v2/guides/transactions/manage-transactions#resend-a-transaction).

        Resending a transaction is a high‑risk operation. Ensure that the original transaction has not been broadcast to the blockchain, has already expired, and will never be confirmed. Otherwise, the same transaction may be confirmed on‑chain twice.

        <Note>This operation only applies to transactions from MPC Wallets in the SOL token.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.manage
      requestBody:
        $ref: '#/components/requestBodies/resendTransactionBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/cancel':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: cancel_transaction_by_id
      summary: Cancel transaction
      description: |
        This operation cancels a specified transaction. Canceling a transaction stops it while it is still pending. For more information, see [Cancel a transaction](https://www.cobo.com/developers/v2/guides/transactions/manage-transactions#cancel-a-transaction).

        <Note>This operation only applies to transactions from MPC Wallets and Smart Contract Wallets.</Note>

        A transaction can be cancelled if its status is either of the following:
        - `Submitted`
        - `PendingScreening`
        - `PendingAuthorization`
        - `PendingSignature` (Only when the sub-status is `Queue`, `InsufficientBalance`, `InsufficientBalanceFundLocked`, `PendingSignerApproval`, `PendingSystemProcessing`, or `Built`)
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.manage
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/broadcast:
    post:
      tags:
        - Transactions
      operationId: broadcast_signed_transactions
      summary: Broadcast signed transactions
      description: |
        <Note>This operation is only applicable to the staking scenarios.</Note>
        This operation broadcasts a list of signed transactions. 

        If you set `auto_broadcast` to `false` when [creating a staking activity](https://www.cobo.com/developers/v2/api-references/staking/create-stake-activity), the transaction will not be submitted to the blockchain automatically after being signed. In such cases, you can call this operation to broadcast the transaction to the blockchain.

        A transaction can only be broadcast if its status is `Broadcasting`.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.manage
      requestBody:
        $ref: '#/components/requestBodies/broadcastTransactionsBody'
      responses:
        '201':
          $ref: '#/components/responses/broadcastTransactionsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/drop':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: drop_transaction_by_id
      summary: Drop transaction
      description: |
        This operation drops a specified transaction. Dropping a transaction leverages RBF to replace the original transaction with a version that effectively cancels it. For more details about dropping a transaction, refer to [Drop a transaction](https://www.cobo.com/developers/v2/guides/transactions/manage-transactions#drop-a-transaction).

        A transaction can be sped up only if its status is `Broadcasting`.

        <Note>This operation only applies to transactions from Custodial Wallets (Web3 Wallets), MPC Wallets and Smart Contract Wallets. It does not apply to transactions on the following chains: VET, TRON, TVET, SOL, and TON.</Note>

        You can use the `address` or `included_utxos` properties in the request body to specify the address or UTXOs that will cover the transaction fee. Generally, the transaction fee is paid by the original transaction's source. If that source's balance is insufficient, the specified address or UTXOs can be used to cover the fee.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.manage
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/speedup':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: speedup_transaction_by_id
      summary: Speed up transaction
      description: |
        This operation accelerates a specified transaction. Speeding up a transaction will trigger a Replace-By-Fee (RBF) transaction which is a new version of the original transaction. For more details about speeding up a transaction, refer to [Speed up a transaction](https://www.cobo.com/developers/v2/guides/transactions/manage-transactions#speed-up-a-transaction).

        You can use the `address` or `included_utxos` properties in the request body to specify the address or UTXOs that will cover the transaction fee. Generally, the transaction fee is paid by the original transaction's source. If that source's balance is insufficient, the specified address or UTXOs can be used to cover the fee.

        A transaction can be sped up only if its status is `Broadcasting`.

        <Note>This operation only applies to transactions from Custodial Wallets (Web3 Wallets), MPC Wallets and Smart Contract Wallets. It does not apply to transactions on the following chains: VET, TRON, TVET, SOL, and TON.</Note>

        <Info>If you speed up a transaction from a Smart Contract Wallet, two RBF transactions will be triggered, one for the transaction from the Smart Contract Wallet, and the other for the transaction from the Delegate.</Info>
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.manage
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/sign_and_broadcast':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: sign_and_broadcast_transaction_by_id
      summary: Sign and broadcast transaction
      description: |
        This operation signs and broadcasts a specified transaction.

        To call this operation, the following conditions must be met:
        - The `transaction_process_type` of the transaction must be set to `BuildOnly` when you call the [Transfer token](https://www.cobo.com/developers/v2/api-references/transactions/transfer-token) or [Call smart contract](https://www.cobo.com/developers/v2/api-references/transactions/call-smart-contract) operation.  
        - The transaction status must be `Built`.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.manage
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/transactions/{transaction_id}/approval_detail':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    get:
      tags:
        - Transactions
      operationId: get_transaction_approval_detail
      summary: Get transaction approval details
      description: |
        This operation retrieves detailed approval information about a specified transaction.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.read
      responses:
        '200':
          $ref: '#/components/responses/getTransactionApprovalDetailResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/approval_details:
    get:
      tags:
        - Transactions
      operationId: list_transaction_approval_details
      summary: List transaction approval details
      description: |
        This operation retrieves detailed approval information for all transactions.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.read
      parameters:
        - $ref: '#/components/parameters/optionalTransactionIdParam'
        - $ref: '#/components/parameters/optionalCoboIdParam'
      responses:
        '200':
          $ref: '#/components/responses/batchGetTransactionApprovalDetailResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/approval/details:
    get:
      tags:
        - Transactions
      operationId: list_approval_details
      summary: List transaction approvals
      description: |
        This operation retrieves comprehensive approval information for transactions, including approval status, reviewer details, signatures, and approval history. You can filter the results by transaction IDs, Cobo IDs, or request IDs. 

        This operation is commonly used to monitor approval progress and identify delays in multi-signature workflows.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.read
      parameters:
        - $ref: '#/components/parameters/optionalTransactionIdParam'
        - $ref: '#/components/parameters/optionalCoboIdParam'
        - $ref: '#/components/parameters/optionalRequestIDsParam'
      responses:
        '200':
          $ref: '#/components/responses/listApprovalDetailsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /transactions/templates:
    get:
      tags:
        - Transactions
      operationId: list_transaction_templates
      summary: List approval templates
      description: |
        This operation retrieves approval templates based on the specified template key and template version.

        These templates define the content used to generate approval messages displayed to users, including messages for transaction approvals and other approval workflows.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.read
      parameters:
        - $ref: '#/components/parameters/requiredTemplateKeyParam'
        - $ref: '#/components/parameters/optionalTemplateVersionParam'
      responses:
        '200':
          $ref: '#/components/responses/getTemplatesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /oauth/token:
    get:
      tags:
        - OAuth
      operationId: get_token
      summary: Get Org Access Token
      description: |
        <Note>This operation is only applicable to Cobo Portal App developers. To call this operation, you need to use the Cobo OAuth authentication method that requires an app key.</Note>
        This operation allows Cobo Portal Apps to get an Org Access Token and a Refresh Token with a specified client ID, organization ID, and grant type. 

        Access tokens allow the app to signal to the WaaS service that it has received permission to access specific resources of the app user's [organization](https://manuals.cobo.com/en/portal/organization/introduction). Once the app has been granted permission by the organization's admin, it can use this operation to obtain both an Org Access Token and a Refresh Token.

        For security purposes, Org Access Tokens expire after a certain period. Once they expire, the app needs to call [Refresh token](https://www.cobo.com/developers/v2/api-references/oauth/refresh-org-access-token) to get a new Org Access Token and a new Refresh Token. 
      parameters:
        - $ref: '#/components/parameters/ClientIdRequiredParam'
        - $ref: '#/components/parameters/OrgIdRequiredParam'
        - $ref: '#/components/parameters/GrantTypeRequiredParam'
      responses:
        2XX:
          $ref: '#/components/responses/getTokenResponse'
        4XX:
          $ref: '#/components/responses/oauthErrorResponse'
        5XX:
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - OAuth
      operationId: refresh_token
      summary: Refresh Org Access Token
      description: |
        <Note>This operation is only applicable to Cobo Portal Apps developers. To call this operation, you need to use the Cobo OAuth authentication method that requires an app key.</Note>
        This operation allows Cobo Portal Apps to obtain a new Org Access Token with a specified client ID, grant type and a Refresh Token. 

        For security purposes, Org Access Tokens expire after a certain period. Once they expire, the app needs to call this operation to get a new Org Access Token and a new Refresh Token. 
      requestBody:
        $ref: '#/components/requestBodies/tokenEndpointBody'
      responses:
        2XX:
          $ref: '#/components/responses/refreshTokenResponse'
        4XX:
          $ref: '#/components/responses/oauthErrorResponse'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /oauth/permission_token/exchange:
    post:
      tags:
        - OAuth
      operationId: exchange_permission_token
      summary: Get Access Token
      description: |
        This operation acquires an Access Token and a Refresh Token for the [Checkout SDK](https://www.cobo.com/developers/v2_cn/payments/checkout-sdk).

        For security purposes, an Access Token expires after a certain period. Once it expires, you need to call the [Refresh Access Token](https://www.cobo.com/developers/v2/api-references/oauth/refresh-access-token) operation to get a new Access Token and a new Refresh Token.
      requestBody:
        $ref: '#/components/requestBodies/permissionTokenExchangeBody'
      responses:
        '201':
          $ref: '#/components/responses/permissionTokenResponse'
        4XX:
          $ref: '#/components/responses/oauthErrorResponse'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /oauth/permission_token/refresh:
    post:
      tags:
        - OAuth
      operationId: refresh_permission_token
      summary: Refresh Access Token
      description: |
        This operation refreshes the Access Token and Refresh Token for the [Checkout SDK](https://www.cobo.com/developers/v2_cn/payments/checkout-sdk).

        For security purposes, an Access Token expires after a certain period. Once it expires, you need to call this operation to get a new Access Token and Refresh Token.
      requestBody:
        $ref: '#/components/requestBodies/permissionTokenRefreshBody'
      responses:
        '201':
          $ref: '#/components/responses/permissionTokenResponse'
        4XX:
          $ref: '#/components/responses/oauthErrorResponse'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /webhooks/endpoints:
    get:
      tags:
        - Developers - Webhooks
      summary: List webhook endpoints
      description: This operation retrieves the information of all webhook endpoints registered under your organization. You can filter the result by endpoint status and the subscribed event type.
      operationId: list_webhook_endpoints
      security:
        - CoboAuth: []
        - OAuth2:
            - webhook.read
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/WebhookEndpointStatus'
          required: false
        - in: query
          name: event_type
          schema:
            $ref: '#/components/schemas/WebhookEventType'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listWebhookEndpointsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - Developers - Webhooks
      summary: Register webhook endpoint
      description: This operation registers a new webhook endpoint for your organization.
      operationId: create_webhook_endpoint
      security:
        - CoboAuth: []
        - OAuth2:
            - webhook.edit
      requestBody:
        $ref: '#/components/requestBodies/createWebhookEndpointBody'
      responses:
        '201':
          $ref: '#/components/responses/createWebhookEndpointResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}':
    parameters:
      - $ref: '#/components/parameters/endpointIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: Get webhook endpoint information
      description: This operation retrieves the information of a specified webhook endpoint.
      operationId: get_webhook_endpoint_by_id
      security:
        - CoboAuth: []
        - OAuth2:
            - webhook.read
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEndpointResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Developers - Webhooks
      summary: Update webhook endpoint
      description: This operation updates the information of a specified webhook endpoint.
      operationId: update_webhook_endpoint_by_id
      security:
        - CoboAuth: []
        - OAuth2:
            - webhook.edit
      requestBody:
        $ref: '#/components/requestBodies/updateWebhookBody'
      responses:
        '200':
          $ref: '#/components/responses/updateWebhookEndpointResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /webhooks/events/definitions:
    get:
      tags:
        - Developers - Webhooks
      summary: Get webhook event types
      description: This operation retrieves all supported webhook event types.
      operationId: list_webhook_event_definitions
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEventDefinitionsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /webhooks/events/trigger:
    post:
      tags:
        - Developers - Webhooks
      summary: Trigger test event
      description: |
        This operation tests the functionality of your webhook endpoint by triggering a test webhook event. The test event will be sent to all the endpoints you have registered on Cobo Portal.

        You only need to provide the event type. By default, the payload contains dummy data with no impact on your real business transactions or activities. You can optionally provide the `override_data` property to customize the payload.
      operationId: trigger_test_webhook_event
      requestBody:
        $ref: '#/components/requestBodies/triggerTestEventBody'
      responses:
        '201':
          $ref: '#/components/responses/triggerTestWebhookEventResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}/events':
    get:
      tags:
        - Developers - Webhooks
      summary: List all webhook events
      description: |
        This operation retrieves a list of webhook events that have occurred within the last 30 days.

        <Note>The request will only return webhook events that have occurred to the wallets associated with your current API key. For example, if the current API key is only associated with Custodial Wallets, any webhook events that have occurred to an MPC Wallet will not be retrieved with the current API key.</Note>
      operationId: list_webhook_events
      security:
        - CoboAuth: []
        - OAuth2:
            - webhook.read
      parameters:
        - $ref: '#/components/parameters/endpointIdParam'
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/WebhookEventStatus'
          required: false
          example: Success
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/WebhookEventType'
          required: false
          example: wallets.transaction.updated
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listWebhookEventsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}/events/{event_id}':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
      - $ref: '#/components/parameters/endpointIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: Retrieve event information
      description: |
        This operation retrieves the information of a webhook event by the event ID.
      operationId: get_webhook_event_by_id
      security:
        - CoboAuth: []
        - OAuth2:
            - webhook.read
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEventResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}/events/{event_id}/logs':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
      - $ref: '#/components/parameters/endpointIdParam'
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/beforeParam'
      - $ref: '#/components/parameters/afterParam'
    get:
      tags:
        - Developers - Webhooks
      summary: List webhook event logs
      description: |
        This operation retrieves a list of webhook event logs by event ID. Each retry will generate a separate event log.
      operationId: list_webhook_event_logs
      security:
        - CoboAuth: []
        - OAuth2:
            - webhook.read
      responses:
        '200':
          $ref: '#/components/responses/getWebhookEventLogsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/webhooks/endpoints/{endpoint_id}/events/{event_id}/retry':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
      - $ref: '#/components/parameters/endpointIdParam'
    post:
      tags:
        - Developers - Webhooks
      summary: Retry event
      description: |
        This operation retries delivering a webhook event with the specified event ID. You can only retry delivering a webhook event in the `Retrying` or `Failed` status.
      operationId: retry_webhook_event_by_id
      security:
        - CoboAuth: []
        - OAuth2:
            - webhook.resend
      responses:
        '201':
          $ref: '#/components/responses/retryWebhookEventResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/pools:
    get:
      tags:
        - Stakings
      summary: List staking pools
      description: |
        This operation retrieves a list of staking pools currently supported.
      operationId: list_staking_pools
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listStakingPoolsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/stakings/pools/{pool_id}':
    get:
      tags:
        - Stakings
      summary: Get staking pool details
      description: |
        This operation retrieves the detailed information about a specified staking pool.
      operationId: get_staking_pool_by_id
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/poolIdRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/poolDetailsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/estimate_fee:
    post:
      tags:
        - Stakings
      operationId: get_staking_estimation_fee
      summary: Estimate staking fees
      description: |
        <Note>This operation is deprecated. Please use the [updated version](https://www.cobo.com/developers/v2/api-references/stakings/estimate-staking-fees-v2) instead.</Note> 
        This operation calculates the fee required for a staking activity based on factors such as network congestion and transaction complexity.

        For some protocols, you can use the `fee.fee_rate` property in the request body to specify the fee rate you are willing to pay.

        The `fee.max_fee_amount` property in the request body will be ignored.

        <Note>For the Babylon protocol, you can only select UTXO as the fee model.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.estimate_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateStakeActivityFeeBody'
      responses:
        '201':
          $ref: '#/components/responses/estimateStakingFeeResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/estimate_fee_v2:
    post:
      tags:
        - Stakings
      operationId: get_staking_estimation_fee_v2
      summary: Estimate staking fees v2
      description: |
        This operation calculates the fee required for a staking activity based on factors such as network congestion and transaction complexity.

        <Note>For the Babylon protocol, you can only select UTXO as the fee model.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.estimate_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateStakeActivityFeeBody'
      responses:
        '201':
          $ref: '#/components/responses/estimateStakingFeeV2Response'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/activities/stake:
    post:
      tags:
        - Stakings
      summary: Create stake activity
      description: |
        This operation creates a staking request.

        For some protocols, you can use the `fee` property in the request body to specify the maximum fee you are willing to pay. The transaction will fail if the actual fee exceeds the specified maximum fee. 

        <Note>For the Babylon protocol, you can only select UTXO as the fee model.</Note>
      operationId: create_stake_activity
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.stake
      requestBody:
        $ref: '#/components/requestBodies/createStakeActivityBody'
      responses:
        '201':
          $ref: '#/components/responses/createActivityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings:
    get:
      tags:
        - Stakings
      summary: List staking positions
      description: |
        This operation retrieves a list of staking positions. 
      operationId: list_stakings
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/poolIdOptionalParam'
        - name: statuses
          in: query
          required: false
          description: |
            The statuses of the staking amounts, separated by comma. Possible values include:

            - `StakeInProgress`: The staking request is submitted and is waiting to be confirmed by the staking protocol.
            - `Active`: The amount has been staked.
            - `Rejected`: The staking request has been rejected because the signer refuses to sign the transaction.
            - `LimitExceeded`: The total staking cap of the staking protocol has been reached.
            - `Invalid`: The staking request is invalid. This is often due to the failure to broadcast the transaction.
            - `UnstakeInProgress`: The unstaking request is submitted and is waiting to be confirmed by the staking protocol.
            - `Withdrawable`: The tokens have been unstaked and are ready to be withdrawn.
            - `WithdrawInProgress`: The withdrawal request is submitted and is waiting to be confirmed on the chain network.
            - `Closed`: The staking position is closed.
          schema:
            type: string
          example: 'Active,StakeInProgress,'
        - $ref: '#/components/parameters/optionalWalletIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listStakingsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/stakings/{staking_id}':
    get:
      tags:
        - Stakings
      summary: Get staking position details
      description: |
        This operation retrieves the detailed information about a specified staking position.
      operationId: get_staking_by_id
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/stakingIdRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/stakingsDetailsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/activities/unstake:
    post:
      tags:
        - Stakings
      summary: Create unstake activity
      description: |
        This operation creates an unstaking request. Your staked tokens will be automatically unlocked once the specified locking period ends. If you want to withdraw your tokens beforehand, you can unstake them with this operation.

        For some protocols, you can use the `fee` property in the request body to specify the maximum fee you are willing to pay. The transaction will fail if the actual fee exceeds the specified maximum fee. 

        <Note>For the Babylon protocol, you can only select UTXO as the fee model.</Note>
      operationId: create_unstake_activity
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.unstake
      requestBody:
        $ref: '#/components/requestBodies/createUnstakeActivityBody'
      responses:
        '201':
          $ref: '#/components/responses/createActivityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/activities/withdraw:
    post:
      tags:
        - Stakings
      summary: Create withdraw activity
      description: |
        This operation creates a withdrawal request. 

        For some protocols, you can use the `fee` property in the request body to specify the maximum fee you are willing to pay. The transaction will fail if the actual fee exceeds the specified maximum fee. 

        <Note>For the Babylon protocol, you can only select UTXO as the fee model.</Note>
      operationId: create_withdraw_activity
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.unstake_withdraw
      requestBody:
        $ref: '#/components/requestBodies/createWithdrawActivityBody'
      responses:
        '201':
          $ref: '#/components/responses/createActivityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/activities/claim:
    post:
      tags:
        - Stakings
      summary: Create claim activity
      description: |
        This operation creates a claim request.

        <Note>Currently, only the Ethereum Beacon protocol supports this operation.</Note>

        For some protocols, you can use the `fee` property in the request body to specify the maximum fee you are willing to pay. The transaction will fail if the actual fee exceeds the specified maximum fee. 
      operationId: create_claim_activity
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.stake
      requestBody:
        $ref: '#/components/requestBodies/createClaimActivityBody'
      responses:
        '201':
          $ref: '#/components/responses/createActivityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/activities:
    get:
      tags:
        - Stakings
      summary: List staking activities
      description: |
        This operation retrieves a list of staking activities.
      operationId: list_staking_activities
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/poolIdOptionalParam'
        - $ref: '#/components/parameters/stakingIdOptionalParam'
        - $ref: '#/components/parameters/activityTypeOptionalParam'
        - $ref: '#/components/parameters/activityStatusOptionalParam'
        - $ref: '#/components/parameters/minModifiedTimestampOptionalParam'
        - $ref: '#/components/parameters/maxModifiedTimestampOptionalParam'
        - $ref: '#/components/parameters/activityInitiatorOptionalParam'
        - $ref: '#/components/parameters/optionalRequestIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listActivitiesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/stakings/activities/{activity_id}':
    get:
      tags:
        - Stakings
      summary: Get staking activity details
      description: |
        This operation retrieves the details of a specified staking activity.
      operationId: get_staking_activity_by_id
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/activityIdRequiredParam'
      responses:
        '200':
          description: A staking activity has been successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/protocols/babylon/stakings/registrations:
    post:
      tags:
        - Stakings
      summary: Register for Babylon Phase-2
      description: |
        This operation initiates a Babylon Phase-2 registration request. 

        Before calling this operation, please ensure the following:
        - The staking position is eligible for the Babylon Phase-2 and has not been registered. You can call the [List staking positions eligible for Babylon Phase-2](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions-eligible-for-babylon-phase-2) operation to check the registration status.
        - The Babylon address has enough asset to pay for the registration fee.
        - The Babylon address must be a Babylon address in an MPC Wallet in your organization.

        The system first checks whether the provided address is eligible for Phase-2. If eligible, it creates a unique registration ID, which can be used to track the status. 

        The registration is processed asynchronously and may take some time to complete. It is recommended that you regularly call the [Get Babylon Phase-2 registration details](https://www.cobo.com/developers/v2/api-references/stakings/get-babylon-phase-2-registration-details) operation to check the status and handle registration accordingly.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: create_babylon_staking_registration
      requestBody:
        $ref: '#/components/requestBodies/createBabylonStakingRegistrationBody'
      responses:
        '201':
          $ref: '#/components/responses/createBabylonStakingRegistrationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Stakings
      summary: List Babylon Phase-2 registrations
      description: |
        This operation lists all Babylon Phase-2 registration records within your organization. You can filter the results by request status and staking position ID.

        The registration is processed asynchronously and may take some time to complete. It is recommended to implement automatic monitoring and handle the registration on time.

        If the registration request fails, please check the error message and resolve the issues before resubmitting the registration request.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: list_babylon_staking_registrations
      parameters:
        - $ref: '#/components/parameters/babylonRegistrationRequestStatusOptionalParam'
        - $ref: '#/components/parameters/stakingIdOptionalParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listBabylonStakingRegistrationsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/stakings/protocols/babylon/stakings/registrations/{registration_id}':
    get:
      tags:
        - Stakings
      summary: Get Babylon Phase-2 registration details
      description: |
        This operation returns the details of a specific Babylon Phase-2 registration, including registration status, Bitcoin (BTC) and Babylon addresses, staked amount, and error messages (if any).

        Please note that registration is an asynchronous process and may take several minutes to complete. It is recommended to call this operation at regular intervals to track the status.

        If the registration request fails, please check the error message and resolve the issues before resubmitting the registration request.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: get_babylon_staking_registration_by_id
      parameters:
        - $ref: '#/components/parameters/babylonRegistrationIdRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/getBabylonStakingRegistrationDetailsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/protocols/babylon/stakings/eligibles:
    get:
      tags:
        - Stakings
      summary: List staking positions eligible for Babylon Phase-2
      description: |
        This operation lists all staking positions that are eligible for Babylon Phase-2. If an eligible staking position's status is `Unregistered`, you can initiate a registration for it. You can filter the results by registration status.

        You can use this operation to:
        - Check which staking positions can be registered
        - Get staking details before initiating registration
        - Monitor available positions for registration

        As registration is an asynchronous process and might take some time to complete, it is recommended that you regularly call this operation to check staking position eligibility and register eligible positions on time.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: list_babylon_eligible_stakings
      parameters:
        - $ref: '#/components/parameters/babylonRegistrationStatusOptionalParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listBabylonStakingEligibleResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/protocols/babylon/airdrops/registrations:
    post:
      tags:
        - Stakings
      summary: Register for Babylon airdrop
      description: |
        This operation initiates a Babylon airdrop registration request. 

        Before calling this operation, please ensure the following:
        - The Bitcoin (BTC) address is eligible for the Babylon airdrop and has not been registered. You can call the [List wallets eligible for Babylon airdrop](https://www.cobo.com/developers/v2/api-references/stakings/list-wallets-eligible-for-babylon-airdrop) operation to check the registration status.
        - The Babylon address has enough asset to pay for the registration fee.
        - The Babylon address must be a Babylon address in an MPC Wallet in your organization.

        The system first checks whether the provided address is eligible for the Babylon airdrop. If eligible, it creates a unique registration ID, which can be used to track the status. 

        The registration is processed asynchronously and may take some time to complete. It is recommended that you regularly call the [Get Babylon airdrop registration details](https://www.cobo.com/developers/v2/api-references/stakings/get-babylon-airdrop-registration-details) operation to check the status and handle registration accordingly.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: create_babylon_airdrop_registration
      requestBody:
        $ref: '#/components/requestBodies/createBabylonAirdropRegistrationBody'
      responses:
        '201':
          $ref: '#/components/responses/createBabylonAirdropRegistrationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Stakings
      summary: List Babylon airdrop registrations
      description: |
        This operation lists all Babylon airdrop registration records within your organization. You can filter the results by request status and Bitcoin (BTC) address.

        The registration is processed asynchronously and may take some time to complete. It is recommended to implement automatic monitoring and handle the registration on time.

        If the registration request fails, please check the error message and resolve the issues before resubmitting the registration request.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: list_babylon_airdrop_registrations
      parameters:
        - $ref: '#/components/parameters/babylonRegistrationRequestStatusOptionalParam'
        - $ref: '#/components/parameters/btcAddressOptionalParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listBabylonAirdropRegistrationsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/stakings/protocols/babylon/airdrops/registrations/{registration_id}':
    get:
      tags:
        - Stakings
      summary: Get Babylon airdrop registration details
      description: |
        This operation returns the details of a specific Babylon airdrop registration, including registration status, Bitcoin (BTC) and Babylon addresses, airdrop amount, and error messages (if any).

        Please note that registration is an asynchronous process and may take several minutes to complete. It is recommended to call this operation at regular intervals to track the status.

        If the registration request fails, please check the error message and resolve the issues before resubmitting the registration request.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: get_babylon_airdrop_registration_by_id
      parameters:
        - $ref: '#/components/parameters/babylonRegistrationIdRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/getBabylonAirdropRegistrationDetailsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /stakings/protocols/babylon/airdrops/eligibles:
    get:
      tags:
        - Stakings
      summary: List wallets eligible for Babylon airdrop
      description: |
        This operation lists all wallets that are eligible for the Babylon airdrop. If an eligible wallet's status is `Unregistered`, you can initiate an airdrop registration for it. You can filter the results by airdrop registration status.

        You can use this operation to:
        - Check which wallets are eligible for airdrop registrations
        - Estimate airdrop amounts before claiming
        - Monitor available airdrop

        As registration is an asynchronous process and might take some time to complete, it is recommended that you regularly call this operation to check wallet eligibility and register eligible wallets on time.

        For more information, refer to [Babylon's official doc](https://github.com/babylonlabs-io/babylon/tree/main/docs).
      operationId: list_babylon_eligible_airdrops
      parameters:
        - $ref: '#/components/parameters/babylonRegistrationStatusOptionalParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listBabylonAirdropEligibleResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /developers/api_key_info:
    get:
      tags:
        - Developers
      operationId: get_api_key_info
      summary: Get API key information
      description: This operation retrieves the details of the API key that you are using.
      security:
        - CoboAuth: []
        - OAuth2:
            - api_key.read
      responses:
        '200':
          $ref: '#/components/responses/getApiKeyInfoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /developers/callback_messages:
    get:
      tags:
        - Developers
      operationId: list_callback_messages
      summary: List all callback messages
      description: |
        This operation retrieves all the callback messages in your organization.

        For more details about how to respond to callback messages, refer to [Callback messages](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages).
      security:
        - CoboAuth: []
        - OAuth2:
            - callback.read
      parameters:
        - $ref: '#/components/parameters/optionalCallbackMessageIdsParam'
        - $ref: '#/components/parameters/optionalRequestIdsParam'
        - $ref: '#/components/parameters/optionalTransactionIdsParam'
        - $ref: '#/components/parameters/optionalWalletIdsParam'
        - $ref: '#/components/parameters/optionalCallbackStatusParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listCallbackMessagesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/developers/callback_messages/{message_id}/retry':
    post:
      tags:
        - Developers
      operationId: retry_callback_message
      summary: Retry callback message
      description: |
        This operation resends a callback message that failed previously.

        If your callback endpoint doesn't respond as expected, the WaaS service will retry sending the callback message up to 30 times. After that, the callback message status will be `Failed`. Use this operation to resend the message. For more details, refer to [Webhooks and Callbacks](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/set-up-endpoint#callback-messages).
      security:
        - CoboAuth: []
        - OAuth2:
            - callback.resend
      parameters:
        - $ref: '#/components/parameters/callbackMessageIdParam'
      responses:
        '201':
          $ref: '#/components/responses/retryCallbackMessageResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /address_books:
    get:
      tags:
        - AddressBooks
      summary: List address book entries
      description: |
        This operation retrieves a list of addresses from your address book.
      operationId: list_address_books
      security:
        - CoboAuth: []
        - OAuth2:
            - address_book.read
      parameters:
        - $ref: '#/components/parameters/requiredChainIdParam'
        - $ref: '#/components/parameters/optionalAddressParam'
        - $ref: '#/components/parameters/optionalAddressBookLabelParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listAddressBooksResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/prime_broker/user/{user_id}/guard_pubkey':
    post:
      tags:
        - PrimeBroker
      summary: Create Guard pubkey binding
      description: |
        This operation creates a binding between a broker user ID and a Cobo Guard public key. 
      operationId: create_guard_pubkey
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '201':
          $ref: '#/components/responses/createGuardPubkeyResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
    put:
      tags:
        - PrimeBroker
      summary: Change Guard pubkey binding
      description: |
        This operation updates an existing binding to associate a broker user ID with a new Cobo Guard public key.
      operationId: change_guard_pubkey
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          $ref: '#/components/responses/createGuardPubkeyResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
    get:
      tags:
        - PrimeBroker
      summary: Query a Guard pubkey
      description: |
        This operation retrieves the current Cobo Guard public key binding details for a broker user.
      operationId: query_guard_pubkey
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          $ref: '#/components/responses/queryGuardPubkeyResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
  '/prime_broker/user/{user_id}/guard_pubkey/delete':
    post:
      tags:
        - PrimeBroker
      summary: Delete Guard pubkey binding
      description: |
        This operation deletes a binding between a broker user ID and a Cobo Guard public key.
      operationId: delete_guard_pubkey
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '201':
          $ref: '#/components/responses/deleteGuardPubkeyResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
  '/prime_broker/user/{user_id}/addresses':
    post:
      tags:
        - PrimeBroker
      summary: Bind addresses to a broker user
      description: |
        This operation binds addresses to a broker user.
      operationId: create_prime_broker_address
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createPrimeBrokerUserAddressBody'
      responses:
        '201':
          $ref: '#/components/responses/createUserAdressResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
  '/prime_broker/approval_statement/{statement_id}':
    get:
      tags:
        - PrimeBroker
      summary: Query approval statement
      description: |
        This operation queries an approval statement.
      operationId: query_approval_statement
      parameters:
        - name: statement_id
          in: path
          required: true
          description: The approval statement ID.
          schema:
            type: string
            description: The approval statement ID.
          example: '168108513539918'
      responses:
        '200':
          $ref: '#/components/responses/queryApprovalStatementResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
  /travel_rule/transaction/countries:
    get:
      tags:
        - TravelRule
      operationId: list_supported_countries
      summary: List supported countries
      description: |
        This operation retrieves a list of supported countries that can be used when submitting Travel Rule information.

        Use this endpoint to obtain valid country values for:
          - Place of incorporation of a legal entity
          - Place of birth of a natural person
      security:
        - CoboAuth: []
        - OAuth2:
            - travel_rule.read
      responses:
        '200':
          $ref: '#/components/responses/getCountriesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /travel_rule/transaction/limitation:
    get:
      tags:
        - TravelRule
      operationId: get_transaction_limitation
      summary: Retrieve transaction limitations
      description: |
        This operation retrieves Travel Rule requirements and available options for a transaction based on its transaction type and ID.

        Use this endpoint before submitting Travel Rule information to understand the requirements and available options for your transaction.
      security:
        - CoboAuth: []
        - OAuth2:
            - travel_rule.read
      parameters:
        - $ref: '#/components/parameters/requiredTransactionTypeParam'
        - $ref: '#/components/parameters/requiredTransactionIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getTransactionLimitationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /travel_rule/transaction/deposit/travel_rule_info:
    post:
      tags:
        - TravelRule
      operationId: submit_deposit_travel_rule_info
      summary: Submit Travel Rule information for deposits
      description: |
        This operation submits Travel Rule information for a deposit transaction.
      security:
        - CoboAuth: []
        - OAuth2:
            - travel_rule.edit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TravelRuleDepositRequest'
      responses:
        '201':
          $ref: '#/components/responses/submitTravelRuleInfoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /travel_rule/transaction/withdraw/travel_rule_info:
    post:
      tags:
        - TravelRule
      operationId: submit_withdraw_travel_rule_info
      summary: Submit Travel Rule information for withdrawals
      description: |
        This operation submits Travel Rule information for a withdrawal transaction.
      security:
        - CoboAuth: []
        - OAuth2:
            - travel_rule.edit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TravelRuleWithdrawRequest'
      responses:
        '201':
          $ref: '#/components/responses/submitTravelRuleInfoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /fee_station/addresses:
    get:
      tags:
        - FeeStation
      operationId: list_fee_station_addresses
      summary: List Fee Station addresses
      description: |
        This operation retrieves a list of deposit addresses of your Fee Station, including the chain ID, address, and additional information. You can filter the result by chain ID and address.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalAddressListParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /fee_station/tokens:
    get:
      tags:
        - FeeStation
      operationId: list_token_balances_for_fee_station
      summary: List Fee Station token balances
      description: |
        The operation retrieves a list of token balances within your Fee Station.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getFeeStationTokenBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /fee_station/transactions:
    get:
      tags:
        - FeeStation
      operationId: list_fee_station_transactions
      summary: List all Fee Station transactions
      description: |
        This operation retrieves all Fee Station transactions under your organization.

        You can filter the results by request ID, Cobo ID, transaction ID, transaction hash, type, status, and timestamp. You can also paginate and sort your query results.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.read
      parameters:
        - $ref: '#/components/parameters/optionalRequestIdParam'
        - $ref: '#/components/parameters/optionalCoboIdParam'
        - $ref: '#/components/parameters/optionalTransactionIdParam'
        - $ref: '#/components/parameters/optionalTransactionHashParam'
        - $ref: '#/components/parameters/optionalFeeStationTransactionTypeListParam'
        - $ref: '#/components/parameters/optionalTransactionStatusListParam'
        - $ref: '#/components/parameters/optionalChainIdListParam'
        - $ref: '#/components/parameters/optionalTokenListIdParam'
        - $ref: '#/components/parameters/optionalAssetIdListParam'
        - $ref: '#/components/parameters/optionalMinCreatedTimestampParam'
        - $ref: '#/components/parameters/optionalMaxCreatedTimestampParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/directionParam'
      responses:
        '200':
          $ref: '#/components/responses/getTransactionsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/fee_station/transactions/{transaction_id}':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    get:
      tags:
        - FeeStation
      operationId: get_fee_station_transaction_by_id
      summary: Get Fee Station transaction information
      description: |
        This operation retrieves detailed information about a specified Fee Station transaction record, such as the transaction status, source address, destination address, and timestamp.
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.read
      responses:
        '200':
          $ref: '#/components/responses/getTransactionByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /fee_station/transactions/estimate_fee:
    post:
      tags:
        - FeeStation
      operationId: estimate_fee_station_fee
      summary: Estimate fee for Fee Station transaction
      description: |
        This operation estimates the gas fee required for a top-up transaction sent by [Fee Station](https://manuals.cobo.com/en/portal/fee-station/introduction) to provide gas to the sender of the original transaction.

        You need to provide the token ID and transfer amount.

        For more information about transaction fee models and how fees are calculated, refer to [Estimate transaction fee](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees).
      security:
        - CoboAuth: []
        - OAuth2:
            - transaction.estimate_fee
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeStationFeeBody'
      responses:
        '201':
          $ref: '#/components/responses/getFeeStationEstimationFeeResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /app/workflows:
    get:
      tags:
        - AppWorkflows
      summary: List app workflows
      description: |
        This operation retrieves all approval workflows of an Cobo Portal App.
        <Note>You need to [configure approval workflow](https://www.cobo.com/developers/v2/apps/configure-workflow) in the app Manifest file first.</Note>
        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: list_app_workflows
      security:
        - CoboAuth: []
        - OAuth2:
            - app_governance_policy.read
      responses:
        '200':
          $ref: '#/components/responses/listAppWorkflowsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /app/workflows/approval_requests:
    post:
      tags:
        - AppWorkflows
      summary: Request workflow approval
      description: |
        This operation triggers a specified workflow and generates a new approval request.

        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: create_approval_request
      security:
        - CoboAuth: []
        - OAuth2:
            - app_governance_policy.update
      requestBody:
        $ref: '#/components/requestBodies/requestApprovalBody'
      responses:
        '201':
          $ref: '#/components/responses/requestApprovalResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - AppWorkflows
      summary: List approval requests
      description: |
        This operation retrieves a list of approval requests.

        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: list_approval_requests
      security:
        - CoboAuth: []
        - OAuth2:
            - app_governance_policy.read
      parameters:
        - $ref: '#/components/parameters/ApprovalOperationIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listApprovalRequestsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/app/workflows/approval_requests/{approval_id}':
    parameters:
      - $ref: '#/components/parameters/ApprovalIdParam'
    get:
      tags:
        - AppWorkflows
      summary: Get approval request details
      description: |
        This operation retrieves the details of a specific approval request.

        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: get_approval_request_by_id
      security:
        - CoboAuth: []
        - OAuth2:
            - app_governance_policy.read
      responses:
        '200':
          $ref: '#/components/responses/getApprovalRequestByIdResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/app/workflows/approval_requests/{approval_id}/revoke':
    parameters:
      - $ref: '#/components/parameters/ApprovalIdParam'
    post:
      tags:
        - AppWorkflows
      summary: Revoke approval request
      description: |
        This operation revokes a pending approval request.

        <Note>To use the approval workflow operations, you must use the Cobo OAuth authentication method ([Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens)).</Note>
      operationId: revoke_approval_request
      security:
        - CoboAuth: []
        - OAuth2:
            - app_governance_policy.update
      requestBody:
        $ref: '#/components/requestBodies/revokeApprovalRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/revokeApprovalRequestResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/merchants:
    post:
      tags:
        - Payment
      operationId: create_merchant
      summary: Create merchant
      description: |
        This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.

        Upon successful creation, a merchant ID is generated and returned along with the merchant's information.

        If you are a merchant (directly serving the payer), you only need to create one merchant and do not need to configure the developer fee rate. The developer fee rate only applies to platforms such as payment service providers (PSPs) that charge fees to their downstream merchants.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.create
      requestBody:
        $ref: '#/components/requestBodies/createMerchantBody'
      responses:
        '201':
          $ref: '#/components/responses/createMerchantResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Payment
      operationId: list_merchants
      summary: List all merchants
      description: |
        This operation retrieves the information of all merchants. 

        You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.read
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/KeywordOptionalParam'
        - $ref: '#/components/parameters/WalletIdOptionalParam'
      responses:
        '200':
          $ref: '#/components/responses/listMerchantResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/payments/merchants/{merchant_id}':
    put:
      tags:
        - Payment
      operationId: update_merchant_by_id
      summary: Update merchant
      description: |
        This operation updates the information of an existing merchant.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.update
      parameters:
        - $ref: '#/components/parameters/MerchantIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/updateMerchantBody'
      responses:
        '200':
          $ref: '#/components/responses/createMerchantResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/refunds:
    post:
      tags:
        - Payment
      operationId: create_refund
      summary: Create refund order
      description: |
        This operation creates a refund order to return cryptocurrency to a specified address. 

        When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_refund.create
      requestBody:
        $ref: '#/components/requestBodies/createRefundBody'
      responses:
        '201':
          $ref: '#/components/responses/createRefundResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Payment
      operationId: get_refunds
      summary: List all refund orders
      description: |
        This operation retrieves the information of all refund orders.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_refund.read
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/MerchantIdOptionalParam'
        - $ref: '#/components/parameters/RequestIdOptionalParam'
        - $ref: '#/components/parameters/PaymentStatusesParam'
      responses:
        '200':
          $ref: '#/components/responses/listRefundsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/payments/refunds/{refund_id}':
    put:
      tags:
        - Payment
      operationId: update_refund_by_id
      summary: Update refund order
      description: |
        This operation updates a specified refund order by modifying its recipient address. You can only update the recipient address for refund orders that have not been processed yet.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_refund.update
      requestBody:
        $ref: '#/components/requestBodies/updateRefundBody'
      parameters:
        - $ref: '#/components/parameters/RefundIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/getRefundDetailResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Payment
      operationId: get_refund_detail_by_id
      summary: Get refund order information
      description: |
        This operation retrieves the detailed information about a specified refund order.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_refund.read
      parameters:
        - $ref: '#/components/parameters/RefundIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/getRefundDetailResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/payments/refunds/{refund_id}/cancel':
    put:
      tags:
        - Payment
      operationId: cancel_refund_by_id
      summary: Cancel refund order
      description: |
        This operation cancels a specified refund order. You can only cancel refund orders that have not been processed yet.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_refund.update
      parameters:
        - $ref: '#/components/parameters/RefundIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/getRefundDetailResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/bank_accounts:
    get:
      tags:
        - Payment
      operationId: list_bank_accounts
      summary: List all bank accounts
      description: |
        This operation retrieves the information of all bank accounts you have registered for payment settlement. Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new bank account.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.read
      responses:
        '200':
          $ref: '#/components/responses/listBankAccountsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/orders:
    post:
      tags:
        - Payment
      operationId: create_payment_order
      summary: Create pay-in order
      description: |
        This operation creates a pay-in order.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_payin.create
      requestBody:
        $ref: '#/components/requestBodies/createPaymentOrderBody'
      responses:
        '201':
          $ref: '#/components/responses/getPaymentOrderResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Payment
      operationId: list_payment_orders
      summary: List all pay-in orders
      description: |
        This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_payin.read
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/MerchantIdOptionalParam'
        - $ref: '#/components/parameters/PspOrderIdOptionalParam'
        - $ref: '#/components/parameters/PaymentStatusesParam'
      responses:
        '200':
          $ref: '#/components/responses/listPaymentOrdersResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/payments/orders/{order_id}':
    put:
      tags:
        - Payment
      operationId: update_payment_order
      summary: Update pay-in order
      description: |
        This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_payin.update
      parameters:
        - $ref: '#/components/parameters/OrderIdRequiredParam'
      requestBody:
        $ref: '#/components/requestBodies/updatePaymentOrderBody'
      responses:
        '200':
          $ref: '#/components/responses/getPaymentOrderResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Payment
      operationId: get_payment_order_detail_by_id
      summary: Get pay-in order information
      description: |
        This operation retrieves details of a specific pay-in order.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_payin.read
      parameters:
        - $ref: '#/components/parameters/OrderIdRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/getPaymentOrderResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/payments/exchange_rates/{token_id}/{currency}':
    get:
      tags:
        - Payment
      operationId: get_exchange_rate
      summary: Get exchange rate
      description: |
        This operation retrieves the current exchange rate between a specified currency pair.
      parameters:
        - $ref: '#/components/parameters/TokenIdRequiredParam'
        - $ref: '#/components/parameters/CurrencyRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/getExchangeRateResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/settlement_info:
    get:
      tags:
        - Payment
      operationId: get_settlement_info_by_ids
      summary: Get withdrawable balances
      description: |
        This operation retrieves the balances of specified merchants or the developer.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_settlement.read
      parameters:
        - $ref: '#/components/parameters/MerchantIdsParam'
        - $ref: '#/components/parameters/CurrencyOptionalParam'
        - $ref: '#/components/parameters/AcquiringTypeOptionalParam'
      responses:
        '200':
          $ref: '#/components/responses/getSettlementInfoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/settlement_requests:
    post:
      tags:
        - Payment
      operationId: create_settlement_request
      summary: Create settlement request
      description: |
        This operation creates a settlement request to withdraw available balances.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_settlement.create
      requestBody:
        $ref: '#/components/requestBodies/createSettlementBody'
      responses:
        '201':
          $ref: '#/components/responses/createSettlementResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Payment
      operationId: list_settlement_requests
      summary: List all settlement requests
      description: |
        This operation retrieves the information of all settlement requests.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_settlement.read
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/RequestIdOptionalParam'
      responses:
        '200':
          $ref: '#/components/responses/listSettlementResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/payments/settlement_requests/{settlement_request_id}':
    get:
      tags:
        - Payment
      operationId: get_settlement_by_id
      summary: Get settlement request information
      description: |
        This operation retrieves the information of a specific settlement request.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_settlement.read
      parameters:
        - $ref: '#/components/parameters/SettlementRequestIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/getSettlementReqeustDetailResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/crypto_addresses:
    post:
      tags:
        - Payment
      operationId: create_crypto_address
      summary: Create crypto address
      description: |
        This operation registers a crypto address for crypto withdrawal.

        The registered address can later be referenced by its ID when creating settlement requests.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.create
      requestBody:
        $ref: '#/components/requestBodies/createCryptoAddressBody'
      responses:
        '201':
          description: Crypto address created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CryptoAddress'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Payment
      operationId: list_crypto_addresses
      summary: List crypto addresses
      description: |
        This operation retrieves a list of crypto addresses registered for crypto withdrawal. 

        Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new crypto address.
      parameters:
        - $ref: '#/components/parameters/TokenIdOptionalParam'
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.read
      responses:
        '200':
          $ref: '#/components/responses/listCryptoAddressesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/payments/crypto_addresses/{crypto_address_id}/delete':
    post:
      tags:
        - Payment
      operationId: delete_crypto_address
      summary: Delete crypto address
      description: |
        This operation unregisters a crypto address from being used for crypto withdrawals.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.update
      parameters:
        - $ref: '#/components/parameters/CryptoAddressIdPathParam'
      responses:
        '201':
          $ref: '#/components/responses/deleteCryptoAddressResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
  /payments/supported_tokens:
    get:
      tags:
        - Payment
      operationId: list_payment_supported_tokens
      summary: List all supported tokens
      description: |
        This operation retrieves the information of all supported tokens.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.read
      responses:
        '200':
          $ref: '#/components/responses/listSupportedTokensResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/topup/address:
    get:
      tags:
        - Payment
      operationId: get_top_up_address
      summary: Get top-up address
      description: |
        This operation retrieves the information of the dedicated top-up address assigned to a specific payer under a merchant on a specified chain.
      parameters:
        - $ref: '#/components/parameters/MerchantIdRequiredParam'
        - $ref: '#/components/parameters/TokenIdQueryRequiredParam'
        - $ref: '#/components/parameters/CustomPayerIdRequiredParam'
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.read
      responses:
        '200':
          $ref: '#/components/responses/getTopUpAddressResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    put:
      tags:
        - Payment
      operationId: update_top_up_address
      summary: Update top-up address
      description: |
        This operation updates the dedicated top-up address assigned to a specific payer under a merchant on a specified chain.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_merchant.update
      requestBody:
        $ref: '#/components/requestBodies/updateTopUpAddressBody'
      responses:
        '200':
          $ref: '#/components/responses/updateTopUpAddressResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/topup/payers:
    get:
      tags:
        - Payment
      operationId: list_top_up_payers
      summary: List payers
      description: |
        This operation retrieves the information of all payers under a merchant. 

        You can filter the result by the payer ID.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_orders_payin.read
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/MerchantIdRequiredParam'
        - $ref: '#/components/parameters/PayerIdOptionalParam'
      responses:
        '200':
          $ref: '#/components/responses/listPaymentPayersResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/force_sweep_requests:
    post:
      tags:
        - Payment
      operationId: create_forced_sweep_request
      summary: Create forced sweep
      description: |
        This operation creates a forced sweep to transfer funds from addresses within a specified wallet to its designated sweep-to address.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_force_sweep.create
      requestBody:
        $ref: '#/components/requestBodies/createForceSweepBody'
      responses:
        '201':
          $ref: '#/components/responses/createForcedSweepResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Payment
      operationId: list_forced_sweep_requests
      summary: List forced sweeps
      description: |
        This operation retrieves the information of all forced sweeps.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_force_sweep.read
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/RequestIdOptionalParam'
      responses:
        '200':
          $ref: '#/components/responses/listForcedSweepsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/settlement_details:
    get:
      tags:
        - Payment
      operationId: list_settlement_details
      summary: List all settlement details
      description: |
        This operation retrieves the information of all settlement details. You can filter the result by merchant ID or status.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_settlement.read
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/MerchantIdOptionalParam'
        - $ref: '#/components/parameters/PaymentStatusesParam'
      responses:
        '200':
          $ref: '#/components/responses/listSettlementDetailResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/balance/payment_wallets:
    get:
      tags:
        - Payment
      operationId: list_payment_wallet_balances
      summary: List payment wallet balances
      description: |
        This operation retrieves the balance information for specified payment wallets. The balance information is grouped by token. If you do not specify the `wallet_ids` parameter, the balance information for all payment wallets will be returned.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_balance.read
      parameters:
        - $ref: '#/components/parameters/WalletIdRequiredParam'
        - $ref: '#/components/parameters/TokenIdQueryRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/listPaymentWalletBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/balance/merchants:
    get:
      tags:
        - Payment
      operationId: list_merchant_balances
      summary: List merchant balances
      description: |
        This operation retrieves the balance information for specified merchants. The balance information is grouped by token and acquiring type. If you do not specify the `merchant_ids` parameter, the balance information for all merchants will be returned.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_balance.read
      parameters:
        - $ref: '#/components/parameters/MerchantIdsParam'
        - $ref: '#/components/parameters/TokenIdQueryRequiredParam'
        - $ref: '#/components/parameters/AcquiringTypeRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/listMerchantBalancesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/balance/psp:
    get:
      tags:
        - Payment
      operationId: get_psp_balance
      summary: Get developer balance
      description: |
        This operation retrieves the balance information for you as the developer. The balance information is grouped by token.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_balance.read
      parameters:
        - $ref: '#/components/parameters/TokenIdQueryRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/getPspBalanceResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /payments/balance/payer/address:
    get:
      tags:
        - Payment
      operationId: get_payer_balance_by_address
      summary: Get payer balance
      description: |
        This operation retrieves the total amount received for a specific payer. The information is grouped by token and receiving address.
      security:
        - CoboAuth: []
        - OAuth2:
            - payment_balance.read
      parameters:
        - $ref: '#/components/parameters/MerchantIdRequiredParam'
        - $ref: '#/components/parameters/PayerIdRequiredParam'
        - $ref: '#/components/parameters/TokenIdQueryRequiredParam'
      responses:
        '200':
          $ref: '#/components/responses/getPayerBalanceByAddressResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /auto_sweep/sweep_to_addresses:
    get:
      tags:
        - AutoSweep
      operationId: list_wallet_sweep_to_addresses
      summary: List sweep-to addresses
      description: |
        This operation retrieves a list of sweep-to addresses within your wallet.
        <Note>Sweep-to addresses are only applicable to MPC Wallets and Web3 Wallets with the auto-sweep feature enabled.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/requiredWalletIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getSweepToAddressesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - AutoSweep
      operationId: create_wallet_sweep_to_addresses
      summary: create sweep-to address
      description: |
        This operation creates a new sweep-to address for the specified wallet. The previously sweep-to address for the same token becomes invalid once the new one is created.

        Use this operation to change the sweep-to address when your setup changes, you switch networks, or the current address is compromised or tainted by suspicious funds. You can withdraw any remaining balances from the old sweep-to addresses to the new address or another designated destination.

        <Note>Sweep-to addresses are only applicable to MPC Wallets and Web3 Wallets with the auto-sweep feature enabled.</Note>
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.create
      requestBody:
        $ref: '#/components/requestBodies/createSweepAddressBody'
      responses:
        '201':
          $ref: '#/components/responses/createSweepToAddressResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /auto_sweep/tasks:
    get:
      tags:
        - AutoSweep
      operationId: list_auto_sweep_task
      summary: List auto-sweep tasks
      description: |
        This operation retrieves a list of auto-sweep tasks for the specified wallet. You can filter the results by token ID, task IDs, or a created-time range.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      parameters:
        - $ref: '#/components/parameters/requiredWalletIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/optionalTaskIdListParam'
        - $ref: '#/components/parameters/optionalMinCreatedTimestampParam'
        - $ref: '#/components/parameters/optionalMaxCreatedTimestampParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/directionParam'
      responses:
        '200':
          $ref: '#/components/responses/listAutoSweepTasksResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - AutoSweep
      operationId: create_auto_sweep_task
      summary: Create auto-sweep task
      description: |
        This operation creates an auto-sweep task for the specified wallet and token. The task triggers transactions to sweep the full balance of the specified token to the configured sweep-to address.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.create
      requestBody:
        $ref: '#/components/requestBodies/createAutoSweepTaskBody'
      responses:
        '201':
          $ref: '#/components/responses/createAutoSweepTaskResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/auto_sweep/tasks/{task_id}':
    parameters:
      - $ref: '#/components/parameters/taskIdParam'
    get:
      tags:
        - AutoSweep
      operationId: get_auto_sweep_task_by_id
      summary: Get auto-sweep task details
      description: |
        This operation retrieves detailed information about a specified auto-sweep task.
      security:
        - CoboAuth: []
        - OAuth2:
            - wallet.read
      responses:
        '200':
          $ref: '#/components/responses/getAutoSweepTaskResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /tokenization/activities:
    get:
      tags:
        - Tokenization
      operationId: list_tokenization_activities
      summary: List tokenization activities
      description: |
        This operation retrieves a list of tokenization activities.
      security:
        - CoboAuth: []
        - OAuth2: []
      parameters:
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/tokenizationActivityTypeOptionalParam'
        - $ref: '#/components/parameters/tokenizationActivityStatusOptionalParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/directionParam'
      responses:
        '200':
          $ref: '#/components/responses/listTokenizationActivitiesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/activities/{activity_id}':
    parameters:
      - $ref: '#/components/parameters/tokenizationActivityIdPathParam'
    get:
      tags:
        - Tokenization
      operationId: get_tokenization_activity
      summary: Get tokenization activity details
      description: |
        This operation retrieves the detailed information for a specific tokenization activity by its ID.
      security:
        - CoboAuth: []
        - OAuth2: []
      responses:
        '200':
          $ref: '#/components/responses/getTokenizationActivityResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /tokenization/estimate_fee:
    post:
      tags:
        - Tokenization
      operationId: estimate_tokenization_fee
      summary: Estimate tokenization operation fee
      description: |
        This operation estimates the fee required for tokenization operations.
        For EVM-based chains, this calculates the gas cost for the specified operation.
      security:
        - CoboAuth: []
        - OAuth2: []
      requestBody:
        $ref: '#/components/requestBodies/tokenizationEstimateFeeBody'
      responses:
        '201':
          $ref: '#/components/responses/estimateTokenizationFeeResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /tokenization/tokens:
    get:
      tags:
        - Tokenization
      operationId: list_issued_tokens
      summary: List issued tokens
      description: |
        This operation retrieves a list of tokens issued by the organization.
        Returns issued token information including total supply, holdings, and token status.
      security:
        - CoboAuth: []
        - OAuth2: []
      parameters:
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/tokenizationTokenStandardOptionalParam'
        - $ref: '#/components/parameters/tokenizationStatusOptionalParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listTokenizationInfoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - Tokenization
      operationId: issue_token
      summary: Issue token
      description: |
        This operation issues a new token contract. It supports various blockchain platforms.

        For EVM-based chains, this involves issuing a new smart contract from a template.
      security:
        - CoboAuth: []
        - OAuth2: []
      requestBody:
        $ref: '#/components/requestBodies/tokenizationIssueTokenBody'
      responses:
        '201':
          $ref: '#/components/responses/tokenizationOperationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    get:
      tags:
        - Tokenization
      operationId: get_tokenization_info
      summary: Get token details
      description: |
        This operation retrieves the detailed information for a specific issued token by its ID.
      security:
        - CoboAuth: []
        - OAuth2: []
      responses:
        '200':
          $ref: '#/components/responses/getTokenizationInfoResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}/mint':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    post:
      tags:
        - Tokenization
      operationId: mint_tokenization
      summary: Mint tokens
      description: |
        This operation mints new tokens to a specified address.
        Creates a mint transaction that will increase the token supply.
      security:
        - CoboAuth: []
        - OAuth2: []
      requestBody:
        $ref: '#/components/requestBodies/tokenizationMintTokenBody'
      responses:
        '201':
          $ref: '#/components/responses/tokenizationOperationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}/burn':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    post:
      tags:
        - Tokenization
      operationId: burn_tokenization
      summary: Burn tokens
      description: |
        This operation burns tokens from a specified address.
        Creates a burn transaction that will decrease the token supply.
      security:
        - CoboAuth: []
        - OAuth2: []
      requestBody:
        $ref: '#/components/requestBodies/tokenizationBurnTokenBody'
      responses:
        '201':
          $ref: '#/components/responses/tokenizationOperationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}/pause':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    post:
      tags:
        - Tokenization
      operationId: pause_tokenization
      summary: Pause token contract
      description: |
        This operation pauses the token contract, temporarily halting token operations and transfers.
      security:
        - CoboAuth: []
        - OAuth2: []
      requestBody:
        $ref: '#/components/requestBodies/tokenizationPauseTokenBody'
      responses:
        '201':
          $ref: '#/components/responses/tokenizationOperationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}/unpause':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    post:
      tags:
        - Tokenization
      operationId: unpause_tokenization
      summary: Unpause token contract
      description: |
        This operation unpauses the token contract, resuming token operations and transfers.
      security:
        - CoboAuth: []
        - OAuth2: []
      requestBody:
        $ref: '#/components/requestBodies/tokenizationUnpauseTokenBody'
      responses:
        '201':
          $ref: '#/components/responses/tokenizationOperationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}/holdings':
    get:
      tags:
        - Tokenization
      operationId: list_tokenization_holdings
      summary: Get token holdings information
      description: |
        This operation retrieves the holdings information for a specific issued token,
        showing which wallets hold the token and their respective balances.
      security:
        - CoboAuth: []
        - OAuth2: []
      parameters:
        - $ref: '#/components/parameters/tokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/listTokenizationHoldingsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}/blocklist/addresses':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    get:
      tags:
        - Tokenization
      operationId: list_tokenization_blocklist_addresses
      summary: List addresses on blocklist
      description: |
        This operation lists addresses on the blocklist.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/directionParam'
      security:
        - CoboAuth: []
        - OAuth2: []
      responses:
        '200':
          $ref: '#/components/responses/listTokenizationBlocklistAddressesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - Tokenization
      operationId: update_tokenization_blocklist_addresses
      summary: Update addresses on blocklist
      description: |
        This operation updates addresses on the blocklist.
      requestBody:
        $ref: '#/components/requestBodies/tokenizationUpdateBlocklistAddressesBody'
      security:
        - CoboAuth: []
        - OAuth2: []
      responses:
        '201':
          $ref: '#/components/responses/tokenizationOperationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}/allowlist/addresses':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    get:
      tags:
        - Tokenization
      operationId: list_tokenization_allowlist_addresses
      summary: List addresses on allowlist
      description: |
        This operation lists addresses on the allowlist.
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/directionParam'
      security:
        - CoboAuth: []
        - OAuth2: []
      responses:
        '200':
          $ref: '#/components/responses/listTokenizationAllowlistAddressesResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    post:
      tags:
        - Tokenization
      operationId: update_tokenization_allowlist_addresses
      summary: Update addresses on allowlist
      description: |
        This operation updates addresses on the allowlist.
      requestBody:
        $ref: '#/components/requestBodies/tokenizationUpdateAllowlistAddressesBody'
      security:
        - CoboAuth: []
        - OAuth2: []
      responses:
        '201':
          $ref: '#/components/responses/tokenizationOperationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}/allowlist/activation':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    post:
      tags:
        - Tokenization
      operationId: update_tokenization_allowlist_activation
      summary: Activate or deactivate allowlist
      description: |
        This operation activates or deactivates the allowlist.
      requestBody:
        $ref: '#/components/requestBodies/tokenizationAllowlistActivationBody'
      security:
        - CoboAuth: []
        - OAuth2: []
      responses:
        '201':
          $ref: '#/components/responses/tokenizationOperationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
    get:
      tags:
        - Tokenization
      operationId: get_tokenization_allowlist_activation
      summary: Get allowlist activation status
      description: |
        This operation retrieves the allowlist activation status of the token contract.
      security:
        - CoboAuth: []
        - OAuth2: []
      responses:
        '200':
          $ref: '#/components/responses/getTokenizationAllowlistActivationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  '/tokenization/tokens/{token_id}/contract_call':
    parameters:
      - $ref: '#/components/parameters/tokenIdParam'
    post:
      tags:
        - Tokenization
      operationId: tokenization_contract_call
      summary: Call token contract
      description: |
        This operation performs a contract call on the token contract.
      security:
        - CoboAuth: []
        - OAuth2: []
      requestBody:
        $ref: '#/components/requestBodies/tokenizationContractCallBody'
      responses:
        '201':
          $ref: '#/components/responses/tokenizationOperationResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
  /tokenization/enabled_chains:
    get:
      tags:
        - Tokenization
      operationId: list_tokenization_supported_chains
      summary: List supported chains for tokenization
      description: |
        This operation retrieves a list of tokenization supported chains.
      security:
        - CoboAuth: []
        - OAuth2: []
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/afterParam'
        - $ref: '#/components/parameters/beforeParam'
      responses:
        '200':
          $ref: '#/components/responses/listTokenizationSupportedChainsResponse'
        4XX:
          $ref: '#/components/responses/badRequestError'
        5XX:
          $ref: '#/components/responses/internalServerError'
components:
  schemas:
    Pagination:
      type: object
      description: The pagination information of the returned data.
      required:
        - before
        - after
        - total_count
      properties:
        before:
          type: string
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
          description: |
            An object ID used to retrieve records before the specified object, indicating earlier or smaller records relative to the current dataset. You can use it to paginate backwards. 

            If empty, it means you have reached the start of the data.  

            Most API endpoints sort by object ID, but some use other fields depending on the endpoint.
        after:
          type: string
          example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
          description: |
            An object ID used to retrieve records after the specified object, indicating newer or larger records relative to the current dataset. You can use it to paginate forwards.  

            If empty, it means you have reached the end of the data.  

            Most API endpoints sort by object ID, but some use other fields depending on the endpoint.
        total_count:
          type: integer
          example: 10000
          description: 'The total number of records that match the query criteria, unaffected by the pagination parameters (`before` , `after`, and `limit`).'
    ErrorResponse:
      type: object
      description: The response of a failed request.
      required:
        - error_code
        - error_message
        - error_id
      properties:
        error_code:
          type: integer
          description: 'The error code. Refer to [Error codes and status codes](https://www.cobo.com/developers/v2/api-references/error-codes) for more details.'
        error_message:
          type: string
          description: The error description.
        error_id:
          type: string
          description: The error log ID. You can provide the error ID when submitting a ticket to help Cobo to locate the issue.
          example: 0b6ddf19083c4bd1a9ca01bec44b24dd
    AssetInfo:
      type: object
      description: The asset information.
      required:
        - asset_id
      properties:
        asset_id:
          type: string
          description: The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        display_code:
          type: string
          description: The asset symbol. You can use the value for display purposes.
          example: USDT
        description:
          type: string
          description: The description of the asset.
          example: Tether USDT
        icon_url:
          type: string
          description: The URL of the asset icon.
          example: 'https://d.cobo.com/public/logos/USDT.png'
    TokenAssetModelType:
      type: string
      enum:
        - Account
        - UTXO
      example: Account
      description: |
        The asset model type. Possible values include:

        - `Account`: The account model. This model tracks the balances of user accounts, similar to the traditional banking system.

        - `UTXO`: The UTXO model. This model tracks individual outputs of a transaction rather than account balances. Each transaction consists of inputs (previous UTXOs) and outputs (new UTXOs).
    TokenInfo:
      type: object
      description: The token information.
      required:
        - token_id
        - chain_id
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token.'
          example: ETH_USDT
        chain_id:
          type: string
          description: The ID of the chain on which the token operates.
          example: ETH
        asset_id:
          type: string
          description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        symbol:
          type: string
          description: 'The token symbol, which is the abbreviated name of a token.'
          example: USDT
        name:
          type: string
          description: 'The token name, which is the full name of a token.'
          example: Tether USDT
        decimal:
          type: integer
          description: The token decimal.
          example: 18
        icon_url:
          type: string
          description: The URL of the token icon.
          example: 'https://d.cobo.com/public/logos/USDT.png'
        token_address:
          type: string
          description: 'The token address, if applicable.'
          example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
        fee_token_id:
          type: string
          description: The fee token ID. A fee token is the token with which you pay transaction fees.
          example: ETH
        can_deposit:
          type: boolean
          description: Whether deposits are enabled for this token.
          example: true
        can_withdraw:
          type: boolean
          description: Whether withdrawals are enabled for this token.
          example: true
        dust_threshold:
          type: string
          description: |
            The minimum withdrawal amount for Custodial Wallets. If your withdrawal amount is smaller than this threshold, the withdrawal request will receive an error.

            Note: [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfers do not have this limitation.
          example: '0.00000546'
        custodial_minimum_deposit_threshold:
          type: string
          description: |
            The minimum deposit amount for Custodial Wallets. If the amount you deposit to a Custodial Wallet is smaller than this threshold, the deposit will not show up on Cobo Portal or trigger any webhook events.

            Note: [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop)transfers do not have this limitation.
          example: '0.0001'
        asset_model_type:
          $ref: '#/components/schemas/TokenAssetModelType'
    ExtendedTokenInfo:
      type: object
      description: 'The token information, including whether the token can be deposited or withdrawn.'
      allOf:
        - type: object
          properties:
            can_deposit:
              type: boolean
              description: |
                Whether the token can be deposited.

                - `true`: The token can be deposited.

                - `false`: The token cannot be deposited.
              default: false
              example: false
            can_withdraw:
              type: boolean
              description: |
                Whether the token can be withdrawn.

                - `true`: The token can be withdrawn.

                - `false`: The token cannot be withdrawn.
              default: false
              example: false
        - $ref: '#/components/schemas/TokenInfo'
    ChainInfo:
      type: object
      description: The chain information.
      required:
        - chain_id
      properties:
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain.'
          example: ETH
        symbol:
          type: string
          description: 'The chain symbol, which is the abbreviated name of a chain.'
          example: ETH
        icon_url:
          type: string
          description: The URL of the chain icon.
          example: 'https://d.cobo.com/public/logos/ETH.png'
        explorer_tx_url:
          type: string
          description: The transaction URL pattern on the blockchain explorer. You can use it to concatenate the transaction URLs.
          example: 'https://etherscan.io/tx/{txn_id}'
        explorer_address_url:
          type: string
          description: The address URL pattern on the blockchain explorer. You can use it to concatenate the address URLs.
          example: 'https://etherscan.io/address/{address}'
        require_memo:
          type: boolean
          description: Whether the chain requires a memo.
          example: false
        confirming_threshold:
          type: integer
          format: int32
          description: 'The number of confirmations required for an on-chain transaction, such as 64 for Ethereum.'
          example: 15
        coinbase_maturity:
          type: integer
          format: int32
          description: 'The number of confirmations required before a coinbase transaction is considered mature and can be spent, for example, 100 confirmations for BTC.'
          example: 15
    WalletType:
      type: string
      enum:
        - Custodial
        - MPC
        - SmartContract
        - Exchange
      example: Custodial
      description: |
        The wallet type. Possible values include:

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
    WalletSubtype:
      type: string
      enum:
        - Asset
        - Web3
        - Org-Controlled
        - User-Controlled
        - 'Safe{Wallet}'
        - Main
        - Sub
      example: Asset
      description: |
        The wallet sub-type. Possible values include:
        - `Asset`: Custodial Wallets (Asset Wallets).
        - `Web3`: Custodial Wallets (Web3 Wallets).
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
        - `Safe{Wallet}`: Smart Contract Wallets (Safe).
        - `Main`: Exchange Wallets (Main Account).
        - `Sub`: Exchange Wallets (Sub Account).

        Each wallet sub-type requires a different set of properties. Switch between the above tabs for details.
    SmartContractWalletType:
      type: string
      enum:
        - 'Safe{Wallet}'
      example: 'Safe{Wallet}'
      default: 'Safe{Wallet}'
      description: The Smart Contract Wallet type.
    SmartContractWalletOperationType:
      type: string
      enum:
        - CoboSafe
      example: CoboSafe
      default: CoboSafe
      description: The way you interact with the Smart Contract Wallet.
    SmartContractInitiator:
      title: Initiator Wallets
      description: The information about the initiator.
      type: object
      required:
        - wallet_id
        - address
      properties:
        wallet_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: The initiator's wallet ID.
        address:
          type: string
          example: '0x1234567890123456789012345678901234567890'
          description: 'The initiator''s wallet address. '
    ExchangeId:
      type: string
      enum:
        - binance
        - okx
        - deribit
        - bybit
        - gate
        - bitget
        - bitmart
        - bitfinex
      description: |
        The ID of the exchange. Possible values include:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
          - `bitget`: Bitget
          - `bitmart`: BitMart
          - `bitfinex`: Bitfinex
      example: binance
    Balance:
      type: object
      description: The balance details.
      required:
        - total
        - available
      properties:
        total:
          type: string
          description: 'The current amount of tokens in an address, which is retrieved directly from the network. To learn more, see [Balances and transaction amounts for MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/balance-amounts) for more details.'
          example: '100.0'
        available:
          type: string
          description: 'The amount of tokens ready to be spent. To learn more, see [Balances and transaction amounts for MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/balance-amounts) for more details.'
          example: '80.5'
        pending:
          type: string
          description: 'The total amount being sent in a transaction, which is calculated as the withdrawal amount plus the transaction fee. To learn more, see [Balances and transaction amounts for MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/balance-amounts) for more details.'
          default: '0'
          example: '10.5'
        locked:
          type: string
          description: 'For UTXO chains, this is the combined value of the selected UTXOs for the transaction. For other chains, it is equal to the Pending amount. To learn more, see [Balances and transaction amounts for MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/balance-amounts) for more details.'
          default: '0'
          example: '3.0'
    TokenBalance:
      type: object
      description: The balance information.
      required:
        - token_id
        - balance
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: BTC
        balance:
          $ref: '#/components/schemas/Balance'
    AddressBalance:
      type: object
      description: The token balance for a specific wallet address.
      required:
        - address
        - balance
      properties:
        address:
          type: string
          description: The wallet address.
          example: '0x0000000000000000000000000000000000000000'
        balance:
          $ref: '#/components/schemas/Balance'
    AssetBalance:
      type: object
      description: The data for asset balance information.
      required:
        - asset_id
        - balance
      properties:
        asset_id:
          type: string
          description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        balance:
          $ref: '#/components/schemas/Balance'
    SubWalletAssetBalance:
      type: object
      description: The information about the asset balance of a trading account.
      required:
        - asset_id
        - balance
      properties:
        trading_account_type:
          type: string
          description: The trading account type.
          example: Spot
        asset_id:
          type: string
          description: The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        balance:
          $ref: '#/components/schemas/Balance'
    BalanceUpdateInfo:
      type: object
      description: The balance information.
      required:
        - token_id
        - address
        - wallet_uuid
        - updated_timestamp
        - balance
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: BTC
        address:
          type: string
          description: The wallet address.
          example: '0x0000000000000000000000000000000000000000'
        wallet_uuid:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The wallet ID.
        updated_timestamp:
          type: integer
          format: int64
          example: 1640995200000
          description: |
            The time when the balance updated, in Unix timestamp format, measured in milliseconds.
        balance:
          $ref: '#/components/schemas/Balance'
    SafeWallet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CustodialWalletInfo'
            - type: object
              properties:
                chain_id:
                  type: string
                  description: The ID of the chain on which the wallet operates.
                  example: ETH
        - type: object
          title: Safe Wallets
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The Smart Contract Wallet address.
            signers:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: The signers of the Smart Contract Wallet.
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: 'The minimum number of confirmations required for the Smart Contract Wallet. '
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The address of Cobo Safe.
            initiator:
              $ref: '#/components/schemas/SmartContractInitiator'
    CustodialWalletInfo:
      type: object
      title: Custodial Wallets
      description: The basic information of a wallet.
      required:
        - wallet_id
        - wallet_type
        - wallet_subtype
        - name
        - org_id
      properties:
        wallet_id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The wallet ID.
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        name:
          type: string
          example: Example Wallet
          description: The wallet name.
        org_id:
          type: string
          description: The ID of the owning organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        enable_auto_sweep:
          type: boolean
          description: Enable the auto sweep feature for the wallet
    MPCWalletInfo:
      title: MPC Wallets
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - vault_id
          properties:
            project_id:
              type: string
              example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
              description: The project ID.
            project_name:
              type: string
              example: Project name
              description: The project name.
            vault_id:
              type: string
              description: The ID of the owning vault.
            vault_name:
              type: string
              example: Vault name
              description: The vault name.
    SmartContractWalletInfo:
      title: Smart Contract Wallets
      oneOf:
        - $ref: '#/components/schemas/SafeWallet'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          'Safe{Wallet}': '#/components/schemas/SafeWallet'
    ExchangeWalletInfo:
      title: Exchange Wallets
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - apikey
            - exchange_id
          properties:
            apikey:
              type: string
              description: The API key of your exchange account.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            main_wallet_id:
              type: string
              description: The wallet ID of the Main Account associated with the Sub Account. This property is returned only if you are creating or querying an Exchange Wallet (Sub Account).
              format: uuid
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    WalletInfo:
      oneOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - $ref: '#/components/schemas/MPCWalletInfo'
        - $ref: '#/components/schemas/SmartContractWalletInfo'
        - $ref: '#/components/schemas/ExchangeWalletInfo'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          SmartContract: '#/components/schemas/SmartContractWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
    UTXO:
      type: object
      description: The UTXO information.
      properties:
        tx_hash:
          type: string
          description: The transaction hash of the UTXO.
          example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        vout_n:
          type: integer
          description: The output index of the UTXO.
          example: 0
        address:
          type: string
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token.'
          example: BTC
        value:
          type: string
          description: The value of the UTXO.
          example: '0.5'
        is_coinbase:
          type: boolean
          description: Whether the UTXO comes from a coinbase transaction.
          example: false
        is_locked:
          type: boolean
          description: Whether the UTXO is locked.
          example: false
        confirmed_number:
          type: integer
          description: The number of confirmations for the UTXO.
          example: 66716
        is_frozen:
          type: boolean
          description: Whether the UTXO is frozen.
          example: false
    BatchUTXOParam:
      type: object
      description: The UTXO information.
      required:
        - tx_hash
      properties:
        tx_hash:
          type: string
          description: The transaction hash.
          example: 9bdf8e7ae03c237e115f09543fbdb40f8efa600106e78b67ce4d5adfadda2dbb
        vout_ns:
          type: array
          items:
            type: integer
            description: The output index of the UTXO.
            example: 0
    MaxTransferableValue:
      type: object
      description: 'The maximum transferable value from the wallet or the specified address, along with the estimated transaction fee.'
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH
        max_transferable_value:
          type: string
          description: The maximum transferable value from the wallet or the specified address.
          example: '3.0'
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
    AddressInfo:
      type: object
      description: The address information.
      required:
        - address
        - chain_id
      properties:
        address:
          type: string
          description: The wallet address.
          example: '0x0000000000000000000000000000000000000000'
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        memo:
          type: string
          description: The memo code.
          example: '82840924'
        path:
          type: string
          description: 'The derivation path of the address. This property applies to MPC Wallets only. To learn the meaning of each level in the path, see [Path levels](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels).'
          example: m/44/0/2/0/0
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
        pubkey:
          type: string
          description: The public key of the address. This property applies to MPC Wallets only.
          example: xpub6HFaEKt4XdwgEQrQmWr8AEAZ7XBSGh7QYFspwdE86sJn6PjkqsPwVQc2poriBdizqXnTB3UWurJJAZpFnD2DAp9vFTmM2gQ264AArYtFWLH
        x_only_pubkey:
          type: string
          description: The 32-byte x-only public key in hexadecimal format after tweaking.
          example: '0x165ed2f04462ec0d3d44dc8690fa9000903b5a96f14ad7f233c21ff748a17b54'
        root_pubkey:
          type: string
          description: The root public key of the address. This property applies to MPC Wallets only.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        taproot_script_tree_hash:
          type: string
          description: The information about the new address.
          example: '0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b'
        taproot_internal_address:
          type: string
          description: The Taproot address before tweaking.
          example: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
    AddressEncoding:
      type: string
      enum:
        - ENCODING_P2PKH
        - ENCODING_P2SH_P2WPKH
        - ENCODING_BECH32
        - ENCODING_P2PKH_UNCOMPRESSED
        - ENCODING_P2SH_P2MS
        - ENCODING_P2SH_P2WSH_P2MS
        - ENCODING_P2TR
        - ENCODING_ADA_BYRON
        - ENCODING_ADA_SHELLEY
        - ENCODING_DEFAULT
      description: The address encoding formats. This property only applies to blockchains that have a similar architecture to Bitcoin.
      example: ENCODING_P2PKH
    CreateCustodialWalletParams:
      type: object
      title: Custodial Wallets
      required:
        - name
        - wallet_type
        - wallet_subtype
      description: The information of Custodial Wallets.
      properties:
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        enable_auto_sweep:
          type: boolean
          description: Enable the auto-sweep feature for the wallet. This parameter only applies to MPC Wallets and Web3 Wallets.
    CreateMpcWalletParams:
      title: MPC Wallets
      allOf:
        - $ref: '#/components/schemas/CreateCustodialWalletParams'
        - type: object
          required:
            - vault_id
          properties:
            vault_id:
              type: string
              description: 'The ID of the owning vault. You can call [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults) to retrieve all vault IDs under your organization.'
    CreateSmartContractWalletParams:
      title: Smart Contract Wallets
      oneOf:
        - $ref: '#/components/schemas/CreateSafeWalletParams'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          'Safe{Wallet}': '#/components/schemas/CreateSafeWalletParams'
    CreateSafeWalletParams:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CreateCustodialWalletParams'
            - type: object
              required:
                - chain_id
              properties:
                chain_id:
                  type: string
                  description: The ID of the chain that the wallet operates on.
                  example: ETH
        - type: object
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: 'The address of the Smart Contract Wallet. If this is not provided, Cobo will create a new Safe{Wallet} and set up Cobo Safe for you. In that case, the `threshold` and `signers` properties are required.'
            signers:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: 'The signers of the Smart Contract Wallet. This property is required when creating a new Safe{Wallet}.'
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: 'The minimum number of confirmations required for the Smart Contract Wallet. This property is required when creating a new Safe{Wallet}.'
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: 'The address of Cobo Safe. If you are importing an existing Safe{Wallet}, Cobo Safe must have been created and enabled.'
            initiator:
              $ref: '#/components/schemas/SmartContractInitiator'
    CreateExchangeWalletParams:
      title: Exchange Wallets
      allOf:
        - $ref: '#/components/schemas/CreateCustodialWalletParams'
        - type: object
          required:
            - exchange_id
            - apikey
            - secret
          properties:
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            apikey:
              type: string
              description: The API key of your exchange account.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            secret:
              type: string
              description: The API secret of your exchange account.
              example: 75B4F636193162488A3728B4A5797708
            passphrase:
              type: string
              description: The passphrase of your exchange account.
              example: sXASDKWKLLsWWEE
            memo:
              type: string
              description: The memo you use when applying for the API key of your exchange account.
              example: xxx@cobo.com
            account_identify:
              type: string
              description: |
                The identifier of your exchange account.
                - For Binance, this is email address of your exchange account.
                - For OKX, this is the user name of your exchange account.
              example: xxx@cobo.com
            ga_code:
              type: string
              description: The GA code for the exchange.
              example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
            main_wallet_id:
              type: string
              description: The ID of the Exchange Wallet (Main Account).
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    CreateWalletParams:
      oneOf:
        - $ref: '#/components/schemas/CreateCustodialWalletParams'
        - $ref: '#/components/schemas/CreateMpcWalletParams'
        - $ref: '#/components/schemas/CreateExchangeWalletParams'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/CreateCustodialWalletParams'
          MPC: '#/components/schemas/CreateMpcWalletParams'
          Exchange: '#/components/schemas/CreateExchangeWalletParams'
    CreatedWalletInfo:
      oneOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - $ref: '#/components/schemas/MPCWalletInfo'
        - $ref: '#/components/schemas/ExchangeWalletInfo'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
    UpdateCustodialWalletParams:
      type: object
      title: Custodial Wallets
      description: The information of Custodial Wallets.
      required:
        - wallet_type
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
        enable_auto_sweep:
          type: boolean
          description: Enable the auto sweep feature for the wallet
    UpdateMpcWalletParams:
      type: object
      title: MPC Wallets
      description: The information of MPC Wallets.
      required:
        - wallet_type
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
        enable_auto_sweep:
          type: boolean
          description: Enable the auto sweep feature for the wallet
    UpdateSmartContractWalletParams:
      type: object
      title: Smart Contract Wallets
      description: The information of Smart Contract Wallets.
      required:
        - wallet_type
        - name
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          type: string
          example: My WaaS 2.0 Wallet
          description: The wallet name.
    UpdateExchangeWalletParams:
      type: object
      title: Exchange Wallets
      description: The information of Exchange Wallets.
      required:
        - wallet_type
        - name
      properties:
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        name:
          type: string
          example: Example Wallet
          description: The wallet name.
    UpdateWalletParams:
      oneOf:
        - $ref: '#/components/schemas/UpdateCustodialWalletParams'
        - $ref: '#/components/schemas/UpdateMpcWalletParams'
        - $ref: '#/components/schemas/UpdateSmartContractWalletParams'
        - $ref: '#/components/schemas/UpdateExchangeWalletParams'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/UpdateCustodialWalletParams'
          MPC: '#/components/schemas/UpdateMpcWalletParams'
          SmartContract: '#/components/schemas/UpdateSmartContractWalletParams'
          Exchange: '#/components/schemas/UpdateExchangeWalletParams'
    SafeWalletDelegatesContractCall:
      title: Contract Call by Delegates
      type: object
      required:
        - request_type
      properties:
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        address:
          type: string
          description: The destination address.
          example: '0x0406db8351aa6839169bb363f63c2c808fee8f99'
        value:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
        calldata:
          type: string
          description: |
            The data used to invoke a specific function or method within the specified contract at the destination address, with a maximum length of 65,000 characters.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
    SafeWalletDelegatesTransfer:
      title: Transfer by Delegates
      type: object
      required:
        - request_type
        - token_id
      properties:
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        token_id:
          type: string
          example: ETH
          description: The token ID.
        amount:
          type: string
          example: '0.1'
          description: 'The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.'
        address:
          type: string
          example: '0x1234567890123456789012345678901234567890'
          description: The address of the recipient.
    SafeWalletDelegates:
      oneOf:
        - $ref: '#/components/schemas/SafeWalletDelegatesContractCall'
        - $ref: '#/components/schemas/SafeWalletDelegatesTransfer'
      discriminator:
        propertyName: request_type
        mapping:
          ContractCall: '#/components/schemas/SafeWalletDelegatesContractCall'
          Transfer: '#/components/schemas/SafeWalletDelegatesTransfer'
    OrgInfo:
      type: object
      description: |
        The information of an organization. To learn more about organizations, see [Introduction to Organization](https://manuals.cobo.com/en/portal/organization/introduction).
      required:
        - org_id
      properties:
        org_id:
          type: string
          description: The organization ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        name:
          type: string
          description: The organization name.
          example: Org name
        created_timestamp:
          type: integer
          format: int64
          description: 'The organization''s creation time in Unix timestamp format, measured in milliseconds.'
          example: 1718619403933
    TokenListingRequestStatus:
      type: string
      enum:
        - Submitted
        - Succeeded
        - Failed
      description: |
        The status of the token listing request.
        - `Submitted`: The request has been submitted and is pending processing.
        - `Succeeded`: The token has been successfully listed.
        - `Failed`: The token listing request was rejected or failed to process.
      example: Submitted
    TokenListingRequestSource:
      type: string
      description: |
        The source of the token listing request.
        - `API`: The request was created via the WaaS 2.0 API.
        - `Admin`: The request was created on Cobo Portal.
      example: API
      enum:
        - API
        - Admin
    CurveType:
      type: string
      enum:
        - SECP256K1
        - ED25519
      example: SECP256K1
      description: |
        The elliptic curve type of the [root extended public key](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#root-extended-public-keys). Possible values include:

        - `SECP256K1`: The secp256k1 elliptic curve.

        - `ED25519`: The Ed25519 elliptic curve.
    KeyShareHolderGroup:
      type: object
      description: The data for key share holder group information.
      properties:
        key_share_holder_group_id:
          type: string
          example: b33130a9-6e18-44a9-9e48-8b3b41921f0e
          description: The key share holder group ID.
        type:
          $ref: '#/components/schemas/KeyShareHolderGroupType'
        tss_key_share_groups:
          type: array
          items:
            $ref: '#/components/schemas/TSSGroups'
        key_share_holders:
          type: array
          items:
            $ref: '#/components/schemas/KeyShareHolder'
        participants:
          type: integer
          description: The number of key share holders in this key share holder group.
          example: 3
        threshold:
          type: integer
          description: The number of key share holders required to approve each operation in this key share holder group.
          example: 2
        status:
          $ref: '#/components/schemas/KeyShareHolderGroupStatus'
        created_timestamp:
          type: integer
          format: int64
          description: 'The key share holder group''s creation time in Unix timestamp format, measured in milliseconds.'
          example: 1718619403933
    KeyShareHolderGroupStatus:
      type: string
      enum:
        - New
        - Valid
        - Unavailable
      example: Valid
      description: |
        The status of the key share holder group. Possible values include:
        - `New`: The key share holder group has been newly created. The status will become `Valid` after you call [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) and specifying this key share holder group as the target key share holder group.

        - `Valid`: The key share holder group is valid.

        - `Unavailable`: The key share holder group is currently unavailable. This status appears when a key share holder uses [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) to change node. For example, when a key share holder changes to a new phone or loses their phone, and is in the process of setting up [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on their new phone.
    KeyShareHolderGroupType:
      type: string
      enum:
        - MainGroup
        - SigningGroup
        - RecoveryGroup
      example: MainGroup
      description: |
        The type of key share holder group. Possible values include:

        - `MainGroup`: A [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `SigningGroup`: A [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        - `RecoveryGroup`: A [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups).

        **Note:** For `MainGroup` and `SigningGroup`, a Cobo key share holder will be added automatically.
    CreateKeyShareHolder:
      type: object
      description: 'When creating MainKeyGroup and SigningKeyGroup, the Cobo key share holder will be added automatically.'
      properties:
        name:
          type: string
          description: Key share holder's name.
          example: Key share holder name
        type:
          $ref: '#/components/schemas/KeyShareHolderType'
        tss_node_id:
          type: string
          description: 'Key share holder''s TSS Node ID. You can obtain the TSS Node ID using either mobile co-signer or server co-signer. See the "Primary Purposes" row on the table in [Create a Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group).'
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        signer:
          type: boolean
          example: true
          description: |
            Whether the key share holder has been selected as the designated transaction signer. For example, in a 2-3 [Threshold Signature Scheme (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss), Cobo will serve as one signer, and you can choose one of the other two key share holders to act as the second transaction signer.
            - `true`: The key share holder is a designated transaction signer.

            - `false`: The key share holder is not a designated transaction signer.
    KeyShareHolder:
      type: object
      description: The data for MPC Wallets' key share holder information.
      properties:
        name:
          type: string
          description: The key share holder name.
          example: Key share holder name
        type:
          $ref: '#/components/schemas/KeyShareHolderType'
        tss_node_id:
          type: string
          description: The key share holder's TSS Node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        online:
          type: boolean
          description: |
            Whether the key share holder's TSS Node is online.
            - `true`: The TSS Node is online.

            - `false`: The TSS Node is offline.
        signer:
          type: boolean
          example: true
          description: |
            Whether the key share holder has been selected as the designated transaction signer. For example, in a 2-3 [Threshold Signature Scheme (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss), Cobo will serve as one signer, and you can choose one of the other two key share holders to act as the second transaction signer.
            - `true`: The key share holder is a designated transaction signer.

            - `false`: The key share holder is not a designated transaction signer.
        status:
          $ref: '#/components/schemas/KeyShareHolderStatus'
        account_id:
          type: string
          description: The key share holder's Cobo Portal account ID.
          example: auth0|cobo|839305394802991371
    KeyShareHolderStatus:
      type: string
      enum:
        - Valid
        - NotConfigured
        - NotActivated
        - Changed
      example: Valid
      description: |
        The status of key share holder's TSS Node. Possible values include:
        - `Valid`: The TSS Node is configured and activated.

        - `NotConfigured`: The TSS Node has not been configured. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `NotActivated`: The TSS Node has not been activated. This status is only applicable to [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/back-up-key-share-groups#mobile-co-signer) using the [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `Changed`: The TSS Node has been changed. This happens when the key share holder sets up their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) on a new phone. This `Changed` status serves as a reminder for you to call [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallet/create-a-tss-request-to-generate-key-secrets-for-a-tss-group) with the `KeyGenFromKeyGroup` and `Recovery` action `type` to finalize the setup of the key share holder's new phone. Once all set, the old TSS Node with the `Changed` status will be deleted.
    KeyShareHolderType:
      type: string
      enum:
        - Cobo
        - Mobile
        - API
      example: API
      description: |
        The key share holder's TSS Node type. Possible values include:

        - `Cobo`: The TSS Node is generated and held by Cobo.

        - `Mobile`: The TSS Node is generated and held by a [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using [Cobo Guard](https://manuals.cobo.com/en/guard/introduction).

        - `API`: The TSS Node is generated and held by a [server co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group) using the [TSS Node software package](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment).
    MPCVault:
      type: object
      description: The data for vault information.
      properties:
        vault_id:
          type: string
          example: YPdbyVaVGqXXjkUsohHw
          description: The vault ID.
        project_id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: The project ID.
        name:
          type: string
          example: Vault name
          description: The vault name.
        type:
          $ref: '#/components/schemas/MPCVaultType'
        root_pubkeys:
          type: array
          items:
            $ref: '#/components/schemas/RootPubkey'
        created_timestamp:
          type: integer
          format: int64
          description: 'The vault''s creation time in Unix timestamp format, measured in milliseconds.'
          example: 1718619403933
    MPCVaultType:
      type: string
      enum:
        - Org-Controlled
        - User-Controlled
      example: Org-Controlled
      description: |
        The vault type. Possible values include:
        - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).

        - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets).
    MPCProject:
      type: object
      description: The data for project information.
      properties:
        project_id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: The project ID.
        org_id:
          type: string
          example: f3b4a616-9c43-462e-8cb4-343e304fee64
          description: 'The [organization](https://manuals.cobo.com/en/portal/organization/introduction) ID.'
        name:
          type: string
          example: Project name
          description: The project name.
        participants:
          type: integer
          example: 3
          description: The number of key share holders in the project.
        threshold:
          type: integer
          example: 2
          description: The number of key share holders required to sign an operation in the project.
        created_timestamp:
          type: integer
          format: int64
          example: 1718619403933
          description: 'The project''s creation time in Unix timestamp format, measured in milliseconds.'
    RootPubkey:
      type: object
      description: The data for MPC Root Extended Public Key information.
      properties:
        root_pubkey:
          type: string
          description: 'The vault''s [root extended public key](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#root-extended-public-keys).'
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        curve:
          $ref: '#/components/schemas/CurveType'
    TSSGroups:
      type: object
      description: The data for the TSS key share group.
      properties:
        tss_key_share_group_id:
          type: string
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
        curve:
          $ref: '#/components/schemas/CurveType'
        root_pubkey:
          type: string
          description: 'The vault''s [root extended public key](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#root-extended-public-keys).'
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
    TSSRequest:
      type: object
      description: The information about the TSS request.
      properties:
        tss_request_id:
          type: string
          description: The TSS request ID.
          example: '20240711114129000132315000003970'
        source_key_share_holder_group:
          $ref: '#/components/schemas/SourceGroup'
        target_key_share_holder_group_id:
          type: string
          description: The target key share holder group ID.
          example: fd9519ae-507b-4605-b108-04d4e5ffcdd3
        type:
          $ref: '#/components/schemas/TSSRequestType'
        status:
          $ref: '#/components/schemas/TSSRequestStatus'
        description:
          type: string
          description: The description of the TSS request.
          example: This is a request to create key shares using the Recovery Group for a key share holder in the Main Group if their key share has been lost (e.g. by losing their phone).
        created_timestamp:
          description: 'The TSS request''s creation time in Unix timestamp format, measured in milliseconds.'
          type: integer
          format: int64
          example: 1701396866000
    TSSRequestStatus:
      type: string
      enum:
        - PendingKeyHolderConfirmation
        - KeyHolderConfirmationFailed
        - KeyGenerating
        - MPCProcessing
        - KeyGeneratingFailed
        - Success
      example: Success
      description: |
        The TSS request status. Possible values include:
        - `PendingKeyHolderConfirmation`: The action done to the TSS request is currently pending enough key share holders to approve.

        - `KeyHolderConfirmationFailed`: Key share holders failed to approve the the action to be done to the TSS request.

        - `KeyGenerating`: The key share is currently being generated for the action to be done to the TSS request.

        - `MPCProcessing`: The TSS request approval is waiting to be started. 
          - For [MPC Wallets (User-Controlled Wallets)](https://manuals.cobo.com/en/portal/mpc-wallets/ucw/introduction), you need to use the Client App and call the UCW SDK to start the TSS request approval process.
          - For [MPC Wallets (Organization-Controlled Wallets)](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/introduction):
            - If you are using the [server co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group), this status indicates that the TSS Node will soon request the callback server to start the [risk controls](https://manuals.cobo.com/en/portal/risk-controls/introduction) check. No further action is required from you at this stage.
            - If you are using the [mobile co-signer](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#create-a-main-group), key share holders need to use their [Cobo Guard](https://manuals.cobo.com/en/guard/introduction) to approve the TSS request and participate in the signing process.

        - `KeyGeneratingFailed`: The key share generation process has failed for the action to be done to the TSS request.

        - `Success`: The action done to the TSS request has been completed successfully. If you see this status while running [Cancel TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/cancel-tss-request), this mean the specified TSS request has been successfully canceled.
    TSSRequestType:
      type: string
      enum:
        - KeyGen
        - KeyGenFromKeyGroup
        - Recovery
      example: Recovery
      description: |
        The TSS request type. Possible values include:
        - `KeyGen`: This is a key generation request to create a [root extended public key](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/tss-node-deployment#tss-node-on-cobo-portal-and-mpc-root-extended-public-key) and key shares for your [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created the Main Group with [Create key share holder group](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-key-share-holder-group). You only need to do this once per [organization](https://manuals.cobo.com/en/portal/organization/introduction).

        - `KeyGenFromKeyGroup`: This is a request to use the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to create key shares for your [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) or [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) after you've created these key share holder groups with [Create key share holder group](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-key-share-holder-group).

        - `Recovery`: This is a request to create key shares using the [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) for a key share holder in the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) if their key share has been lost (e.g. by losing their phone).
    UpdateGroupAction:
      type: string
      enum:
        - UpgradeToMainGroup
      example: UpgradeToMainGroup
      description: |
        The available actions of key share holder group update. Possible values include:
        - `UpgradeToMainGroup`: This upgrades an active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups) to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). The original Main Group will be permanently deleted.
    SourceGroup:
      type: object
      description: |
        The source key share holder group.

        **Note:** `source_key_share_holder_group` is used only when `type` is set to either `KeyGenfromKeyGroup` or `Recovery`. This is to specify the key share holder group to be used as the source key share holder group to create key shares for the `target_key_share_holder_group`.
      required:
        - key_share_holder_group_id
      properties:
        key_share_holder_group_id:
          type: string
          description: The source key share holder group ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        tss_node_ids:
          type: array
          items:
            type: string
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          description: |
            The TSS Node IDs participating in creating a new key share holder group when `type` is set to either `KeyGenFromKeyGroup` or `Recovery`. 

            **Note:** In any [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) such as the 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), for `tss_node_ids`, you only need to fill in 1 Cobo TSS Node ID and enough non-Cobo TSS Node IDs to satisfy the number of approvers specified in `threshold`. To obtain the Cobo TSS Node ID, run [List all Cobo key share holders](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-cobo-key-share-holders).
    FeeType:
      type: string
      enum:
        - Fixed
        - EVM_EIP_1559
        - EVM_Legacy
        - UTXO
        - SOL
        - FIL
      example: EVM_EIP_1559
      default: EVM_EIP_1559
      description: |
        The fee model. Possible values include:
        - `Fixed`: The fixed fee model. 
        - `EVM_EIP_1559`: The EIP-1559 fee model.
        - `EVM_Legacy`: The legacy fee model.
        - `UTXO`: The fee model used in UTXO-based blockchains, such as Bitcoin.
        - `SOL`: The fee model used in Solana.
        - `FIL`: The fee model used in Filecoin.


        Each fee model requires a different set of properties. Switch between the above tabs for details.

        To learn more about the fee models, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).
    FeeAmount:
      type: object
      description: The transaction fee.
      properties:
        fee_amount:
          type: string
          description: The transaction fee that you need to pay for the transaction.
          example: '0.1'
    MaxFeeAmount:
      type: object
      properties:
        max_fee_amount:
          type: string
          description: The maximum fee that you are willing to pay for the transaction. Provide the value without applying precision. The transaction will fail if the transaction fee exceeds the maximum fee.
          example: '0.1'
    FeeGasLimit:
      type: object
      properties:
        gas_limit:
          type: string
          description: The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
          example: '21000'
    EvmEip1559FeeBasePrice:
      type: object
      properties:
        max_fee_per_gas:
          type: string
          description: 'The maximum gas fee per gas unit used on the chain, in wei.'
          example: '9000000000000'
        max_priority_fee_per_gas:
          type: string
          description: 'The maximum priority fee per gas unit used, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.'
          example: '1000000000000'
    EvmLegacyFeeBasePrice:
      type: object
      properties:
        gas_price:
          type: string
          description: 'The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions per gas unit used.'
          example: '100000000'
    UtxoFeeBasePrice:
      type: object
      properties:
        fee_rate:
          type: string
          description: The fee rate in sat/vByte. The fee rate represents the satoshis you are willing to pay for each byte of data that your transaction will consume on the blockchain.
          example: '50'
    EvmEip1559FeeRate:
      type: object
      description: The transaction fee rate based on the EIP-1559 fee model.
      title: EIP-1559 Fee Rate
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token used to pay the transaction fee.
          example: ETH
        slow:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        recommended:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        fast:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
    EvmLegacyFeeRate:
      type: object
      description: The transaction fee rate based on the legacy fee model.
      title: Legacy Fee Rate
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token used to pay the transaction fee.
          example: ETH
        slow:
          required:
            - gas_price
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        recommended:
          required:
            - gas_price
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        fast:
          required:
            - gas_price
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
    UtxoFeeRate:
      type: object
      description: The transaction fee rate for UTXO-based chains.
      title: UTXO Fee Rate
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token used to pay the transaction fee.
          example: BTC
        slow:
          required:
            - fee_rate
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
        recommended:
          required:
            - fee_rate
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
        fast:
          required:
            - fee_rate
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
    FixedFeeRate:
      type: object
      description: The transaction fee that you need to pay based on the fixed fee model for some blockchains. The fee can vary between different chains.
      title: Fixed
      required:
        - fee_type
        - token_id
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: TRON
        - $ref: '#/components/schemas/FeeAmount'
    FeeRate:
      oneOf:
        - $ref: '#/components/schemas/FixedFeeRate'
        - $ref: '#/components/schemas/EvmEip1559FeeRate'
        - $ref: '#/components/schemas/EvmLegacyFeeRate'
        - $ref: '#/components/schemas/UtxoFeeRate'
      discriminator:
        propertyName: fee_type
        mapping:
          Fixed: '#/components/schemas/FixedFeeRate:'
          EVM_EIP_1559: '#/components/schemas/EvmEip1559FeeRate:'
          EVM_Legacy: '#/components/schemas/EvmLegacyFeeRate:'
          UTXO: '#/components/schemas/UtxoFeeRate:'
    FeeReserved:
      type: object
      properties:
        reserved_fee:
          type: string
          description: 'The estimated fee required for submitting the transaction data to L1 (Layer 1), measured in wei.'
          example: '1000000000000'
    SOLBase:
      type: object
      properties:
        base_fee:
          type: string
          description: 'A fixed fee charged per signature. The default is 5,000 lamports per signature.'
          example: '0.000005'
        rent_amount:
          type: string
          description: The rent fee charged by the network to store non–rent-exempt accounts on-chain. It is deducted periodically until the account maintains the minimum balance required for rent exemption.
          example: '0.00001 '
    SOLComputeUnit:
      type: object
      properties:
        compute_unit_price:
          type: string
          description: 'The price paid per compute unit. This value determines the priority fee for the transaction, allowing you to increase inclusion probability in congested conditions.'
          example: '0.0001'
        compute_unit_limit:
          type: string
          description: The maximum number of compute units your transaction is allowed to consume. It sets an upper bound on computational resource usage to prevent overload.
          example: '200000'
    FILBase:
      type: object
      properties:
        gas_base:
          type: string
          description: 'The minimum fee required for a transaction to be included in a block. The base fee is dynamically adjusted based on network congestion to maintain target block utilization. It is burned rather than paid to miners, reducing the total Filecoin supply over time.'
          example: '0.0002'
    FILPrice:
      type: object
      properties:
        gas_premium:
          type: string
          description: An optional tip you can include to prioritize your transaction. The gas premium incentivizes miners to include your transaction sooner than those offering only the base fee.
          example: '0.0001'
        gas_fee_cap:
          type: string
          description: The maximum gas price you are willing to pay per unit of gas.
          example: '0.00035'
        gas_limit:
          type: string
          description: The maximum amount of gas your transaction is allowed to consume.
          example: '500'
    EstimatedFixedFee:
      type: object
      description: The estimated transaction fee based on the fixed fee model.
      title: Fixed
      required:
        - fee_type
        - token_id
        - fee_amount
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: TRON
            is_loop:
              type: boolean
              description: |
                Whether the transaction was executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
                - `true`: The transaction was executed as a Cobo Loop transfer.
                - `false`: The transaction was not executed as a Cobo Loop transfer.
              example: false
        - $ref: '#/components/schemas/FeeAmount'
    EstimatedEvmEip1559Fee:
      type: object
      description: The estimated transaction fee based on the EIP-1559 fee model.
      title: EVM_EIP_1559
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token used to pay the transaction fee.
          example: ETH
        slow:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
            - $ref: '#/components/schemas/FeeReserved'
        recommended:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
            - $ref: '#/components/schemas/FeeReserved'
        fast:
          required:
            - max_fee_per_gas
            - max_priority_fee_per_gas
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
            - $ref: '#/components/schemas/FeeReserved'
    EstimatedEvmLegacyFee:
      type: object
      description: The estimated transaction fee based on the legacy fee model.
      title: EVM_Legacy
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token used to pay the transaction fee.
          example: ETH
        slow:
          required:
            - gas_price
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
            - $ref: '#/components/schemas/FeeReserved'
        recommended:
          required:
            - gas_price
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
            - $ref: '#/components/schemas/FeeReserved'
        fast:
          required:
            - gas_price
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeGasLimit'
            - $ref: '#/components/schemas/FeeReserved'
    EstimatedUtxoFee:
      type: object
      description: The estimated transaction fee for UTXO-based chains.
      title: UTXO
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token used to pay the transaction fee.
          example: BTC
        slow:
          required:
            - fee_rate
            - fee_amount
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        recommended:
          required:
            - fee_rate
            - fee_amount
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        fast:
          required:
            - fee_rate
            - fee_amount
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
    EstimatedSOLFee:
      type: object
      description: The estimated transaction fee based on the sol fee model.
      title: SOL
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token used to pay the transaction fee.
          example: ETH
        slow:
          required:
            - compute_unit_price
            - compute_unit_limit
            - base_fee
          allOf:
            - $ref: '#/components/schemas/SOLComputeUnit'
            - $ref: '#/components/schemas/SOLBase'
        recommended:
          required:
            - compute_unit_price
            - compute_unit_limit
            - base_fee
          allOf:
            - $ref: '#/components/schemas/SOLComputeUnit'
            - $ref: '#/components/schemas/SOLBase'
        fast:
          required:
            - compute_unit_price
            - compute_unit_limit
            - base_fee
          allOf:
            - $ref: '#/components/schemas/SOLComputeUnit'
            - $ref: '#/components/schemas/SOLBase'
    EstimatedFILFee:
      type: object
      description: The estimated transaction fee based on the fil fee model.
      title: FIL
      required:
        - fee_type
        - token_id
        - recommended
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        token_id:
          type: string
          description: The token used to pay the transaction fee.
          example: ETH
        slow:
          required:
            - gas_premium
            - gas_fee_cap
            - gas_base
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/FILPrice'
            - $ref: '#/components/schemas/FILBase'
        recommended:
          required:
            - gas_premium
            - gas_fee_cap
            - gas_base
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/FILPrice'
            - $ref: '#/components/schemas/FILBase'
        fast:
          required:
            - gas_premium
            - gas_fee_cap
            - gas_base
            - gas_limit
          allOf:
            - $ref: '#/components/schemas/FILPrice'
            - $ref: '#/components/schemas/FILBase'
    EstimatedFee:
      oneOf:
        - $ref: '#/components/schemas/EstimatedFixedFee'
        - $ref: '#/components/schemas/EstimatedEvmEip1559Fee'
        - $ref: '#/components/schemas/EstimatedEvmLegacyFee'
        - $ref: '#/components/schemas/EstimatedUtxoFee'
        - $ref: '#/components/schemas/EstimatedSOLFee'
        - $ref: '#/components/schemas/EstimatedFILFee'
      discriminator:
        propertyName: fee_type
        mapping:
          Fixed: '#/components/schemas/EstimatedFixedFee'
          EVM_EIP_1559: '#/components/schemas/EstimatedEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/EstimatedEvmLegacyFee'
          UTXO: '#/components/schemas/EstimatedUtxoFee'
          SOL: '#/components/schemas/EstimatedSOLFee'
          FIL: '#/components/schemas/EstimatedFILFee'
    TransactionRequestFixedFee:
      type: object
      description: |
        The preset properties to limit transaction fee.

        In the fixed fee model, the transaction fee is a fixed amount within a certain amount of period regardless of the transaction size or network congestion, which can vary between different chains. For more information about the fixed fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the maximum fee amount to limit the transaction fee. The transaction will fail if the transaction fee exceeds the specified maximum fee amount.

        Switch between the tabs to display the properties for different transaction fee models.
      title: Fixed
      required:
        - fee_type
        - token_id
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: TRON
        - $ref: '#/components/schemas/MaxFeeAmount'
    TransactionRequestEvmEip1559Fee:
      type: object
      description: |
        The preset properties to limit transaction fee.

        In the EIP-1559 fee model, the transaction fee is calculated by multiplying the gas price and the gas units used by the transaction. This can be expressed as: Transaction fee = gas price * gas units used. For more information about the EIP-1559 fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the maximum gas fee per gas unit, maximum priority fee per gas unit, and the gas limit to limit the gas price, priority fee per gas unit, gas units used in the transaction. 

        Switch between the tabs to display the properties for different transaction fee models.
      title: EVM_EIP_1559
      required:
        - fee_type
        - token_id
        - max_fee_per_gas
        - max_priority_fee_per_gas
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: ETH
            gas_limit:
              type: string
              description: The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
              example: '21000'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
    TransactionRequestEvmLegacyFee:
      type: object
      description: |
        The preset properties to limit transaction fee.

        In the legacy fee model, the transaction fee is calculated by multiplying the gas price by the gas units used by the transaction. This can be expressed as: Transaction fee =  (gas price * gas units used). For more information about the legacy fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the gas limit to limit the gas units used in the transaction.

        Switch between the tabs to display the properties for different transaction fee models.
      required:
        - fee_type
        - token_id
        - gas_price
      title: EVM_Legacy
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: ETH
            gas_limit:
              type: string
              description: The gas limit. It represents the maximum number of gas units that you are willing to pay for the execution of a transaction or Ethereum Virtual Machine (EVM) operation. The gas unit cost of each operation varies.
              example: '21000'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
    TransactionRequestUtxoFee:
      type: object
      description: |
        The preset properties to limit transaction fee.

        In the UTXO fee model, the transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size. For more information about the UTXO fee model, see [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the maximum fee amount to limit the transaction fee. The transaction will fail if the transaction fee exceeds the specified maximum fee amount.

        Switch between the tabs to display the properties for different transaction fee models.
      required:
        - fee_type
        - token_id
      title: UTXO
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: BTC
            max_fee_amount:
              type: string
              description: The maximum fee that you are willing to pay for the transaction. Provide the value without applying precision. The transaction will fail if the transaction fee exceeds the maximum fee.
              example: '0.1'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
    TransactionRequestSOLFee:
      type: object
      description: |
        The preset properties to limit transaction fee.

        In the Solana fee model, the transaction fee is calculated by adding the base fee to the product of the compute unit limit and the compute unit price. This can be expressed as: Transaction fee = base fee + (CU limit * CU price). For more information about the Solana fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        You can specify CU price and CU limit to adjust the priority and resource allocation of your transaction.

        Switch between the tabs to display the properties for different transaction fee models.
      title: SOL
      required:
        - fee_type
        - token_id
        - compute_unit_price
        - compute_unit_limit
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: ETH
        - $ref: '#/components/schemas/SOLComputeUnit'
    TransactionRequestFILFee:
      type: object
      description: |
        The preset properties to limit transaction fee.

        In the Filecoin fee model, the transaction fee is calculated using the minimum of your specified gas fee cap and the sum of the base fee and gas premium, then multiplied by the gas limit. This can be expressed as: Transaction fee = min(gas fee cap, base fee + gas premium) * gas limit. For more information about the Filecoin fee model, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        You can specify the gas fee cap, gas premium, and gas limit to control fee behavior and prioritization.

        Switch between the tabs to display the properties for different transaction fee models.
      title: FIL
      required:
        - fee_type
        - token_id
        - gas_fee_cap
        - gas_premium
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: ETH
        - $ref: '#/components/schemas/FILPrice'
    TransactionRequestFee:
      oneOf:
        - $ref: '#/components/schemas/TransactionRequestFixedFee'
        - $ref: '#/components/schemas/TransactionRequestEvmEip1559Fee'
        - $ref: '#/components/schemas/TransactionRequestEvmLegacyFee'
        - $ref: '#/components/schemas/TransactionRequestUtxoFee'
        - $ref: '#/components/schemas/TransactionRequestSOLFee'
        - $ref: '#/components/schemas/TransactionRequestFILFee'
      discriminator:
        propertyName: fee_type
        mapping:
          Fixed: '#/components/schemas/TransactionRequestFixedFee'
          EVM_EIP_1559: '#/components/schemas/TransactionRequestEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionRequestEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionRequestUtxoFee'
          SOL: '#/components/schemas/TransactionRequestSOLFee'
          FIL: '#/components/schemas/TransactionRequestFILFee'
    Transaction:
      type: object
      description: The information about a transaction.
      required:
        - transaction_id
        - wallet_id
        - transaction_type
        - status
        - initiator_type
        - source
        - destination
        - created_timestamp
        - updated_timestamp
      properties:
        transaction_id:
          type: string
          description: The transaction ID.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        cobo_id:
          type: string
          description: 'The Cobo ID, which can be used to track a transaction.'
          example: '20231213122855000000000000000000'
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: 760a1955-e212-4dfb-a8d0-e66312a1a051
        wallet_id:
          type: string
          description: 'For deposit transactions, this property represents the wallet ID of the transaction destination. For transactions of other types, this property represents the wallet ID of the transaction source.'
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        type:
          $ref: '#/components/schemas/TransactionType'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        sub_status:
          $ref: '#/components/schemas/TransactionSubStatus'
        failed_reason:
          type: string
          description: (This property is applicable to approval failures and signature failures only) The reason why the transaction failed.
          example: Rejected by signer Cobo TSS
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        source:
          oneOf:
            - $ref: '#/components/schemas/TransactionCustodialAssetWalletSource'
            - $ref: '#/components/schemas/TransactionCustodialWeb3WalletSource'
            - $ref: '#/components/schemas/TransactionMPCWalletSource'
            - $ref: '#/components/schemas/TransactionSmartContractSafeWalletSource'
            - $ref: '#/components/schemas/TransactionExchangeWalletSource'
            - $ref: '#/components/schemas/TransactionDepositFromAddressSource'
            - $ref: '#/components/schemas/TransactionDepositFromWalletSource'
            - $ref: '#/components/schemas/TransactionDepositFromLoopSource'
          discriminator:
            propertyName: source_type
            mapping:
              Asset: '#/components/schemas/TransactionCustodialAssetWalletSource'
              Web3: '#/components/schemas/TransactionCustodialWeb3WalletSource'
              Org-Controlled: '#/components/schemas/TransactionMPCWalletSource'
              User-Controlled: '#/components/schemas/TransactionMPCWalletSource'
              'Safe{Wallet}': '#/components/schemas/TransactionSmartContractSafeWalletSource'
              Main: '#/components/schemas/TransactionExchangeWalletSource'
              Sub: '#/components/schemas/TransactionExchangeWalletSource'
              DepositFromAddress: '#/components/schemas/TransactionDepositFromAddressSource'
              DepositFromWallet: '#/components/schemas/TransactionDepositFromWalletSource'
              DepositFromLoop: '#/components/schemas/TransactionDepositFromLoopSource'
        destination:
          oneOf:
            - $ref: '#/components/schemas/TransactionTransferToAddressDestination'
            - $ref: '#/components/schemas/TransactionTransferToWalletDestination'
            - $ref: '#/components/schemas/TransactionEvmContractDestination'
            - $ref: '#/components/schemas/TransactionSolContractDestination'
            - $ref: '#/components/schemas/TransactionCosmosContractDestination'
            - $ref: '#/components/schemas/TransactionMessageSignEIP191Destination'
            - $ref: '#/components/schemas/TransactionMessageSignEIP712Destination'
            - $ref: '#/components/schemas/TransactionRawMessageSignDestination'
            - $ref: '#/components/schemas/TransactionDepositToAddressDestination'
            - $ref: '#/components/schemas/TransactionDepositToWalletDestination'
            - $ref: '#/components/schemas/TransactionBIP137Destination'
            - $ref: '#/components/schemas/TransactionBIP322Destination'
            - $ref: '#/components/schemas/TransactionCosmosAdr36Destination'
          discriminator:
            propertyName: destination_type
            mapping:
              Address: '#/components/schemas/TransactionTransferToAddressDestination'
              CustodialWallet: '#/components/schemas/TransactionTransferToWalletDestination'
              ExchangeWallet: '#/components/schemas/TransactionTransferToWalletDestination'
              EVM_Contract: '#/components/schemas/TransactionEvmContractDestination'
              SOL_Contract: '#/components/schemas/TransactionSolContractDestination'
              COSMOS_Contract: '#/components/schemas/TransactionCosmosContractDestination'
              EVM_EIP_191_Signature: '#/components/schemas/TransactionMessageSignEIP191Destination'
              EVM_EIP_712_Signature: '#/components/schemas/TransactionMessageSignEIP712Destination'
              BTC_BIP_137_Signature: '#/components/schemas/TransactionBIP137Destination'
              BTC_BIP_322_Signature: '#/components/schemas/TransactionBIP322Destination'
              COSMOS_ADR_36_Signature: '#/components/schemas/TransactionCosmosAdr36Destination'
              Raw_Message_Signature: '#/components/schemas/TransactionRawMessageSignDestination'
              DepositToAddress: '#/components/schemas/TransactionDepositToAddressDestination'
              DepositToWallet: '#/components/schemas/TransactionDepositToWalletDestination'
        result:
          $ref: '#/components/schemas/TransactionResult'
        fee:
          $ref: '#/components/schemas/TransactionFee'
        initiator:
          type: string
          description: The transaction initiator.
          example: 'API Prod Key #1'
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        confirmed_num:
          type: integer
          format: int32
          description: The number of confirmations this transaction has received.
          example: 12
        confirming_threshold:
          type: integer
          format: int32
          description: The minimum number of confirmations required to deem a transaction secure. The common threshold is 6 for a Bitcoin transaction.
          example: 15
        transaction_hash:
          type: string
          description: The transaction hash.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        block_info:
          $ref: '#/components/schemas/TransactionBlockInfo'
        raw_tx_info:
          $ref: '#/components/schemas/TransactionRawTxInfo'
        replacement:
          type: object
          properties:
            replaced_by_type:
              $ref: '#/components/schemas/ReplaceType'
            replaced_by_transaction_id:
              type: string
              description: The ID of the transaction that this transaction was replaced by.
              format: uuid
              example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_by_transaction_hash:
              type: string
              description: The hash of the transaction that this transaction was replaced by.
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            replaced_type:
              $ref: '#/components/schemas/ReplaceType'
            replaced_transaction_id:
              type: string
              description: The ID of the transaction that this transaction replaced.
              format: uuid
              example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
            replaced_transaction_hash:
              type: string
              description: The hash of the transaction that this transaction replaced.
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        category:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCategory'
          description: A custom transaction category for you to identify your transfers more easily.
        description:
          type: string
          description: The description for your transaction.
          example: withdrawal to exchange trading account
        is_loop:
          type: boolean
          description: |
            Whether the transaction was executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
            - `true`: The transaction was executed as a Cobo Loop transfer.
            - `false`: The transaction was not executed as a Cobo Loop transfer.
          example: false
        cobo_category:
          type: array
          items:
            type: string
            example: AutoFueling
          description: |
            The transaction category defined by Cobo. Possible values include: 
            - `AutoSweep`: An auto-sweep transaction.
            - `AutoFueling`: A transaction where Fee Station pays transaction fees to an address within your wallet.
            - `AutoFuelingRefund`: A refund for an auto-fueling transaction.
            - `SafeTxMessage`: A message signing transaction to authorize a Smart Contract Wallet (Safe\{Wallet\}) transaction.
            - `BillPayment`: A transaction to pay Cobo bills through Fee Station.
            - `BillRefund`: A refund for a previously made bill payment.
            - `CommissionFeeCharge`: A transaction to charge commission fees via Fee Station.
            - `CommissionFeeRefund`: A refund of previously charged commission fees.
        extra:
          type: array
          items:
            type: string
            example: |
              {"extra_type":"BabylonBusinessInfo","btc_address_info":{"address":"tb1p8k9f36798z5wkfd3mlq00cjm82c7sp5hudlqaxkdvfw4xaywvw4qzzv2xz","chain_id":"SIGNET_BTC","memo":"","path":"44/1/5/0/4","encoding":"ENCODING_P2TR","pubkey":"xpub6FkyaGRDyh4hayxmbY4YX7q9fuuxt14dNoYv5TphsKLnChVXSaTxY7DPwdeN8Yys5FLhfuajG8pshdXWk9cTzBFUy5rVA4Lx9kwmFUqhZcC","x_only_pubkey":"","root_pubkey":"xpub661MyMwAqRbcGFdLxNuuQvnPTLFs1xHpFQz5iumoDnw4NPofkE8SSrtwUmoy3E52HtcxCH9wXCfhztuuiuusvB3kAb4nt9rT4bkXxujubKm","taproot_script_tree_hash":"","taproot_internal_address":""}}
          description: |
            A list of JSON-encoded strings containing structured, business-specific extra information for the transaction. Each item corresponds to a specific data type, indicated by the `extra_type` field in the JSON object (for example, "BabylonBusinessInfo", "BtcAddressInfo").
        fueling_info:
          $ref: '#/components/schemas/TransactionFuelingInfo'
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the transaction was created, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
        updated_timestamp:
          type: integer
          format: int64
          description: 'The time when the transaction was updated, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    TransactionDetail:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            timeline:
              type: array
              items:
                $ref: '#/components/schemas/TransactionTimeline'
    TransactionApprover:
      type: object
      description: The approver data for transaction.
      properties:
        name:
          type: string
          description: The approver name of the transaction.
          example: 'Approver #1'
        status:
          type: string
          description: The approval status.
          enum:
            - Pending
            - Approved
            - Rejected
          example: Pending
    TransactionTokenAmount:
      type: object
      description: The data for transaction asset information.
      required:
        - asset_id
        - amount
      properties:
        token_id:
          type: string
          description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        asset_id:
          type: string
          description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
          example: USDT
        amount:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
          format: float
          example: '1.5'
    TransactionCategory:
      type: string
      example: Payment
    TransactionDetails:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            initiator:
              type: string
              description: Transaction initiator
              example: 'API Prod Key #1'
            approvers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionApprover'
            signers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionSigner'
            nonce:
              type: integer
              description: Transaction nonce
              example: 9
            replaced_by:
              type: string
              description: Replace by transaction hash
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            fueled_by:
              type: string
              description: Fueled by address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            confirmed_num:
              type: integer
              description: Transaction confirmed number
              example: 12
            confirming_threshold:
              type: integer
              format: int32
              description: 'Number of confirmations required for a transaction, such as 15 for ETH chain.'
              example: 15
            token_approval:
              $ref: '#/components/schemas/TransactionTokeApproval'
            message:
              type: string
              description: Transaction raw message
              example: this to certify that am owner this wallet address
            algorithm:
              type: string
              description: Transaction message signing algorithm
            timeline:
              type: array
              items:
                $ref: '#/components/schemas/TransactionTimeline'
    TransactionInitiatorType:
      type: string
      enum:
        - API
        - Web
        - App
        - External
      example: API
      description: |
        The transaction initiator type. Possible values include:
          - `API`: An API initiator, who initiates the transaction by using the WaaS API.
          - `Web`: An web initiator, who initiates the transaction from Cobo Portal.
          - `App`: An App initiator, who initiates the transaction from Cobo Portal Apps.
          - `External`: An external initiator, who initiates the transaction outside Cobo.
    TransactionSigner:
      type: object
      description: The signer data for transaction.
      properties:
        signer:
          type: string
          description: The signer name of the transaction.
          example: Cobo TSS
        status:
          type: string
          description: The signing status.
          enum:
            - Pending
            - Signed
            - Timeout
            - Rejected
          example: Signed
        failed_reason:
          type: string
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
    TransactionStatus:
      type: string
      enum:
        - Submitted
        - PendingScreening
        - PendingAuthorization
        - PendingSignature
        - Broadcasting
        - Confirming
        - Completed
        - Failed
        - Rejected
        - Pending
      example: Submitted
      description: |
        The transaction status. For more details including sub-statuses, please refer to [Transaction statuses and sub-statuses](https://www.cobo.com/developers/v2/guides/transactions/status).
    TransactionSubStatus:
      type: string
      enum:
        - RejectedKYT
        - PendingDoubleCheck
        - PendingSpenderCheck
        - PendingRiskControlCheck
        - PendingApproverCheck
        - RejectedCoboCheck
        - RejectedByCobo
        - RejectedWhiteList
        - RejectedDoubleCheck
        - RejectedSpenderAuth
        - RejectedRiskControlCheck
        - RejectedApproverAuth
        - RejectedbyMobileCosigner
        - Built
        - PendingWaitSigner
        - PendingApprovalStart
        - PendingSignerApproval
        - PendingSignerProcessing
        - RejectedBySigner
        - FailedBySigner
        - FailedSignerTimeout
        - FailedBroadcasting
        - FailedOnChain
        - Reverting
        - Queue
        - InsufficientBalance
        - InsufficientBalanceFundLocked
        - PendingSystemProcessing
        - SystemProcessingOngoing
        - PendingBlockConfirmations
        - ReOrged
        - ReplacedByNewTransaction
        - CanceledBySpender
        - CanceledByAPI
        - OnchainRejection
        - RejectedTravelRule
        - RejectedTravelRuleDueToCompliance
        - PendingTravelRuleInfo
        - PendingTravelRuleCheck
        - RejectedTravelRuleDueToUnsupportedToken
        - SignatureVerificationSuccess
        - SignatureVerificationFailed
        - PendingCoboCheck
        - RejectedTransactionPolicy
        - RejectedByScreeningApp
        - PendingScreeningAppCheck
        - PendingCoboKYTCheck
        - RejectedByCoboKYT
        - PendingCoboTravelRuleCheck
      example: PendingDoubleCheck
      description: |
        The transaction sub-status. For more details, please refer to [Transaction statuses and sub-statuses](https://www.cobo.com/developers/v2/guides/transactions/status).
    TransactionTimeline:
      type: object
      description: 'The information about transaction timeline, which lists all statuses that the transaction passes through with timestamps indicating when each status is completed.'
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        finished:
          type: boolean
          description: |
            Whether the transaction status is completed:
              - `true`: The transaction status is completed.
              - `false`: The transaction is currently in the status.
          example: true
        finished_timestamp:
          type: integer
          format: int64
          description: 'The time when the transaction status is completed in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    TransactionTokeApproval:
      allOf:
        - $ref: '#/components/schemas/TokenInfo'
        - type: object
          description: The data for transaction token approval information.
          properties:
            amount:
              type: number
              description: |
                Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
              format: float
              example: 1.5
            spender:
              type: string
              description: Spender address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    TransactionType:
      type: string
      enum:
        - Deposit
        - Withdrawal
        - ContractCall
        - MessageSign
        - ExternalSafeTx
        - Stake
        - Unstake
      example: Deposit
      description: |
        The transaction type. Possible values include: 
          - `Deposit`: A deposit transaction.
          - `Withdrawal`: A withdrawal transaction.
          - `ContractCall`: A transaction that interacts with a smart contract.
          - `MessageSign`: A transaction that signs a message. 
          - `ExternalSafeTx`: A transaction to a Smart Contract Wallet (Safe{Wallet}) that requires one or multiple signatures to be executed.
          - `Stake`: A transaction that creates a staking request.
          - `Unstake`: A transaction that creates a unstaking request.
    MpcSigningGroup:
      type: object
      description: The information about the Signing Group of an MPC Wallet.
      required:
        - used_key_share_holder_group_id
      properties:
        used_key_share_holder_group_id:
          type: string
          description: The ID of the Signing Group.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        used_tss_node_ids:
          type: array
          items:
            type: string
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
          description: The ID of the TSS Nodes that are required to participate in the signature.
    TransactionSourceType:
      type: string
      enum:
        - Asset
        - Web3
        - Org-Controlled
        - User-Controlled
        - 'Safe{Wallet}'
        - Main
        - Sub
        - DepositFromAddress
        - DepositFromWallet
        - DepositFromLoop
      example: DepositFromAddress
      description: |
        The transaction source. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
    TransactionCustodialAssetWalletSource:
      type: object
      description: |
        Information about the transaction source type `Asset`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: Asset
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    TransactionCustodialWeb3WalletSource:
      type: object
      description: |
        Information about the transaction source type `Web3`. Refer to [Transaction sources and destinations](/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: Web3
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        included_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        excluded_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
    TransactionMPCWalletSource:
      type: object
      description: |
        Information about the transaction source type `Org-Controlled` and `User-Controlled`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: Org-Controlled/User-Controlled
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        included_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        excluded_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        signer_key_share_holder_group_id:
          type: string
          description: The ID of the key share holder group that is selected to sign the transaction.
          example: b33130a9-6e18-44a9-9e48-8b3b41921f0e
    TransactionSmartContractSafeWalletSource:
      type: object
      description: |
        Information about the transaction source type `Safe{Wallet}`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: 'Safe{Wallet}'
      required:
        - source_type
        - wallet_id
        - address
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: '0x1234567890123456789012345678901234567890'
        delegate:
          $ref: '#/components/schemas/CoboSafeDelegate'
    TransactionExchangeWalletSource:
      type: object
      description: |
        Information about the transaction source types `Main` and `Sub`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: Main/Sub
      required:
        - source_type
        - exchange_id
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        trading_account_type:
          type: string
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
    TransactionDepositFromAddressSource:
      type: object
      description: |
        Information about the transaction source type `DepositFromAddress`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: DepositFromAddress
      required:
        - source_type
        - addresses
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        addresses:
          type: array
          items:
            type: string
            example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
          description: A list of addresses.
    TransactionDepositFromWalletSource:
      type: object
      description: |
        Information about the transaction source type `DepositFromWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: DepositFromWallet
      required:
        - source_type
        - wallet_id
        - wallet_type
        - wallet_subtype
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        trading_account_type:
          type: string
          description: The exchange trading account or a sub-wallet ID.
          example: Asset
    TransactionDepositFromLoopSource:
      type: object
      description: |
        Information about the transaction source type `DepositFromLoop`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: DepositFromLoop
      required:
        - source_type
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
    TransactionFeeStationWalletSource:
      type: object
      description: The information about the transaction source.
      title: Fee Station
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/TransactionSourceType'
        wallet_id:
          type: string
          description: The Wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    TransactionDestinationType:
      type: string
      enum:
        - Address
        - CustodialWallet
        - ExchangeWallet
        - EVM_Contract
        - SOL_Contract
        - COSMOS_Contract
        - EVM_EIP_191_Signature
        - EVM_EIP_712_Signature
        - BTC_BIP_137_Signature
        - BTC_BIP_322_Signature
        - COSMOS_ADR_36_Signature
        - Raw_Message_Signature
        - DepositToAddress
        - DepositToWallet
      example: Address
      description: |
        The transaction destination type. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
    TransactionDepositToAddressDestination:
      type: object
      description: |
        Information about the transaction destination type `DepositToAddress`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      title: DepositToAddress
      required:
        - destination_type
        - wallet_id
        - wallet_type
        - address
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        address:
          type: string
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
          example: '82840924'
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: '1.5'
        tx_info:
          type: object
          properties:
            vout_n:
              type: integer
              description: The output index of the UTXO.
              example: 0
    TransactionDepositToWalletDestination:
      type: object
      description: |
        Information about the transaction destination type `DepositToWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      title: DepositToWallet
      required:
        - destination_type
        - wallet_id
        - wallet_type
        - wallet_subtype
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        trading_account_type:
          type: string
          description: The trading account type.
          example: Asset
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: '1.5'
    TransactionEvmContractMethod:
      type: object
      properties:
        name:
          type: string
          description: The method name.
          example: transfer
        sig:
          type: string
          description: 'The signature of the method, which includes the method name and parameter types.'
          example: 'transfer(address,uint256)'
        type:
          type: string
          description: The method type.
          example: Function
        payable:
          type: boolean
          description: |
            Whether the method is payable, which means it can receive tokens along with the transaction.
            - `true`: The method is payable.
            - `false`: The method is not payable.
          example: true
        selector:
          type: string
          description: 'The method selector, a four-byte identifier derived from the method''s signature, used to invoke the method in a transaction.'
          example: '0xa9059cbb'
      description: The information about a method in a smart contract.
    TransactionEvmCalldataInfo:
      type: object
      properties:
        chain_id:
          type: string
          description: The ID of the chain on which the smart contract is issued.
          example: ETH
        address:
          type: string
          description: The address of the smart contract.
          example: '0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84'
        name:
          type: string
          description: The name of the smart contract.
          example: AppProxyUpgradeable
        impl_address:
          type: string
          description: The address of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.
          example: '0x17144556fd3424edc8fc8a4c940b2d04936d17eb'
        impl_name:
          type: string
          description: The name of the implementation smart contract. This property is applicable only when the specified smart contract is a proxy contract.
          example: Lido
        proxy:
          type: boolean
          description: |
            Whether the specified smart contract address is a proxy contract.
            - `true`: The specified smart contract address is a proxy contract.
            - `false`: The specified smart contract address is not a proxy contract.
          example: true
        method:
          $ref: '#/components/schemas/TransactionEvmContractMethod'
        params:
          type: string
          description: |
            The parameters of the contract method are represented as a JSON array of arrays. Each element in the outer array is itself an array containing three elements that provide detailed information about a specific parameter:
            - Parameter name: The unique identifier of the parameter, such as `kind`, `swaps`, and `to`.
            - Parameter type: The Solidity data type of the parameter, such as `uint8`, `tuple[]`, `address[]`, and `int256[]`.
            - Parameter value: The actual value of the parameter. If the parameter type is a basic type such as `uint256` or `address`, this value is a single element. If the parameter type is a complex type such as `tuple[]` or `address[]`, the value is a nested array, with each inner array containing parameter names, types, and values.
          example: '[["exactInput", "tuple", [["dstReceiver", "address", "0xbbff75515f6e924441c3d80af4714edf19911111"], ["wrappedToken", "address", "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"], ["router", "uint256", "452312848583266388373324160887510303453432363010492966520592108215996663949"], ["amount", "uint256", "10000000000000000"], ["minReturnAmount", "uint256", "369987456553029"], ["fee", "uint256", "30000000000000"], ["path", "address[]", [["[0]", "address", "0x0000000000000000000000000000000000000000"], ["[1]", "address", "0x1ae21d57afc033a556ef63daa216046321b3d391"]]], ["pool", "address[]", [["[0]", "address", "0x725522665fa5e1fa2912fed453dc0044deda5cfd"]]], ["signature", "bytes", "0x"], ["channel", "string", "android"]]], ["deadline", "uint256", "1729582030"]]'
    TransactionEvmContractDestination:
      title: EVM_Contract
      type: object
      description: |
        Information about the transaction destination type `EVM_Contract`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      required:
        - destination_type
        - address
        - calldata
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        address:
          type: string
          description: The destination address.
          example: '0x0406db8351aa6839169bb363f63c2c808fee8f99'
        value:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
        calldata:
          type: string
          description: |
            The data used to invoke a specific function or method within the specified contract at the destination address, with a maximum length of 65,000 characters.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        calldata_info:
          $ref: '#/components/schemas/TransactionEvmCalldataInfo'
    TransactionSolContractDestination:
      title: SOL_Contract
      type: object
      description: |
        The information about the transaction destination type `SOL_Contract`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      required:
        - destination_type
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSolContractInstruction'
    TransactionCosmosMessage:
      title: Cosmos Message
      type: object
      description: The information about the Cosmos message.
      required:
        - type_url
        - message
      properties:
        type_url:
          type: string
          description: |
            The type URL of the Cosmos message.
          example: /babylon.btcstaking.v1.MsgCreateBTCDelegation
        message:
          type: string
          description: |
            The Base64-encoded Cosmos message.
          example: eyJ0eXBlIjoiYmFiY29zZS5idGNzdGFnaW5nLnYxLk1zZ0NyZWF0ZUJUQ0RlbGVnYXRpb24iLCJtZXNzYWdlIjp7ImNvbW1hbmRfaWQiOiJjb21tYW5kX2lkIiwibWVzc2FnZV92YWx1ZSI6Im1lc3NhZ2VfdmFsdWUiLCJtZXNzYWdlX3R5cGUiOiJtZXNzYWdlX3R5cGUifX0=
    TransactionCosmosContractDestination:
      title: Cosmos Contract
      type: object
      description: |
        Information about the transaction destination type `COSMOS_Contract`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      required:
        - destination_type
        - cosmos_messages
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        cosmos_messages:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCosmosMessage'
        value:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
    TransactionSolContractAccount:
      title: SOL Instruction Account
      type: object
      description: sol contract instruction account
      properties:
        pubkey:
          type: string
          description: |
            account address. If the account is signer, pubkey needs to match the from_address parameter.
          example: E4MhQWiqCLER3fFZNf8LyQFpLWW3BRxtsR5eps3c3vNS
        is_signer:
          type: boolean
          description: |
            boolean value indicating whether the account can sign transactions.
          example: true
        is_writable:
          type: boolean
          description: |
            boolean value indicating whether the account can be modified.
          example: true
    TransactionSolContractInstruction:
      title: SOL Instruction
      type: object
      description: sol contract instruction
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSolContractAccount'
        data:
          type: string
          description: |
            data used for calling Solana contract..
          example: 'Canary TX 4, slot: 219858117'
        program_id:
          type: string
          description: |
            contract address. when calling a Solana contract, the to_address parameter needs to match the program_id parameter. If multiple contracts are being called, then the to_address parameter should match the program_id parameter of the first instruction.
          example: MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr
    TransactionMessageSignEIP191Destination:
      title: EVM_EIP_191_Signature
      description: |
        Information about the transaction destination type `EVM_EIP_191_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      type: object
      required:
        - destination_type
        - message
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message:
          type: string
          description: 'The raw data of the message to be signed, encoded in Base64 format.'
          example: YWFhYQ==
    TransactionMessageSignEIP712Destination:
      title: EVM_EIP_712_Signature
      description: |
        Information about the transaction destination type `EVM_EIP_712_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      type: object
      required:
        - destination_type
        - structured_data
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        raw_structured_data:
          type: string
          description: 'The raw structured data to be signed, formatted as a JSON string.'
        structured_data:
          type: object
          additionalProperties: true
          description: 'The structured data to be signed, formatted as a JSON object according to the EIP-712 standard.'
          example: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
        safe_tx_extra_data:
          $ref: '#/components/schemas/SafeTxExtraData'
    TransactionRawMessageSignDestination:
      title: Raw_Message_Signature
      description: |
        The information about the destination `Raw_Message_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      type: object
      required:
        - destination_type
        - message
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        msg_hash:
          type: string
          description: 'Message hash to be signed, in hexadecimal format.'
    TransactionTransferToAddressDestination:
      type: object
      description: |
        Information about the transaction destination type `Address`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      title: Address
      required:
        - destination_type
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        account_output:
          type: object
          properties:
            address:
              type: string
              description: The destination address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo:
              type: string
              description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
              example: '82840924'
            amount:
              type: string
              description: |
                The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
              example: '1.5'
        utxo_outputs:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: The destination address.
                example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              amount:
                type: string
                description: |
                  The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
                example: '1.5'
        change_address:
          type: string
          description: The address used to receive the remaining funds or change from the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        force_internal:
          type: boolean
          description: |
            Whether the transaction request must be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must be executed as a Cobo Loop transfer.
              - `false`: The transaction request may not be executed as a Cobo Loop transfer.

            If both `force_internal` and `force_external` are set to `false`, the system uses Cobo Loop by default if possible; otherwise, it proceeds with an on-chain transfer.
          example: false
        force_external:
          type: boolean
          description: |
            Whether the transaction request must not be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must not be executed as a Cobo Loop transfer.
              - `false`: The transaction request can be executed as a Cobo Loop transfer.

            If both `force_internal` and `force_external` are set to `false`, the system uses Cobo Loop by default if possible; otherwise, it proceeds with an on-chain transfer.
          example: false
    TransactionTransferToWalletDestination:
      type: object
      description: |
        Information about the transaction destination type `CustodialWallet` or `ExchangeWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      title: Wallet
      required:
        - destination_type
        - wallet_id
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        trading_account_type:
          type: string
          description: The trading account type. This field is only applicable when `destination_type` is `ExchangeWallet`.
          example: Asset
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: '1.5'
    TransactionBIP322Destination:
      title: BTC_BIP_322_Signature
      description: |
        The information about the destination `BTC_BIP_322_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      type: object
      required:
        - destination_type
        - message_bip322
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message_bip322:
          type: string
          description: 'Message to be signed, in hexadecimal format.'
    TransactionBIP137Destination:
      title: BTC_BIP_137_Signature
      description: |
        The information about the destination `BTC_BIP_137_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      type: object
      required:
        - destination_type
        - message_bip137
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message_bip137:
          type: string
          description: 'Message to be signed, in hexadecimal format.'
    TransactionCosmosAdr36Destination:
      title: COSMOS_ADR_36_Signature
      description: |
        The information about the destination `COSMOS_ADR_36_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction destinations.
      type: object
      required:
        - destination_type
        - message_cosmos_adr36
      properties:
        destination_type:
          $ref: '#/components/schemas/TransactionDestinationType'
        message_cosmos_adr36:
          type: string
          description: 'Message to be signed, in hexadecimal format.'
    TransactionResultType:
      type: string
      enum:
        - Signature
      example: Signature
      description: |
        The transaction result type. Possible values include:
          - `Signature`: An EVM EIP-191 or EVM EIP-712 signature.
    TransactionSignatureResult:
      title: Signature
      description: The result of a message signing transaction.
      type: object
      required:
        - signature
      properties:
        result_type:
          $ref: '#/components/schemas/TransactionResultType'
        signature:
          type: string
          description: The raw data of the signature.
          example: '0x6a8d82c2b080c18e7c1d187a95b3d9b0b9b20454d5e1d784b8a4625d16772d3f'
    TransactionResult:
      oneOf:
        - $ref: '#/components/schemas/TransactionSignatureResult'
      discriminator:
        propertyName: result_type
        mapping:
          Signature: '#/components/schemas/TransactionSignatureResult'
    TransactionBlockInfo:
      type: object
      description: The information about the transaction block.
      properties:
        block_number:
          type: integer
          format: int64
          description: The block number.
          example: 123
        block_timestamp:
          type: integer
          format: int64
          description: 'The time when the block was created, in Unix timestamp format, measured in milliseconds.'
          example: 1717740319
        block_hash:
          type: string
          description: The block hash.
          example: '0xc9ee947f8bb6027c161888bf0d004bec05e7c2beec7e6b187dc512174e438735'
    TransactionRawTxInfo:
      type: object
      description: The raw transaction information.
      properties:
        used_nonce:
          type: integer
          description: The transaction nonce.
          example: 9
        selected_utxos:
          type: array
          description: The selected UTXOs to be consumed in the transaction.
          items:
            $ref: '#/components/schemas/TransactionSelectedUtxo'
        raw_tx:
          type: string
          description: The raw transaction data.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        unsigned_raw_tx:
          type: string
          description: The unsigned raw transaction data.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        utxo_change:
          $ref: '#/components/schemas/TransactionUtxoChange'
    TransactionUtxoChange:
      type: object
      description: The UTXO change output information.
      properties:
        address:
          type: string
          description: The receiving address of the UTXO change output.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        value:
          type: string
          description: The amount of the UTXO change output.
          example: '0.5'
    TransactionSelectedUtxo:
      type: object
      description: The selected UTXO information.
      properties:
        tx_hash:
          type: string
          description: The transaction hash of the UTXO.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        vout_n:
          type: integer
          description: The output index of the UTXO.
          example: 0
        address:
          type: string
          description: The address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        value:
          type: string
          description: The value of the UTXO.
          example: '0.5'
        redeem_script:
          type: string
          description: The redeem script used in P2SH and P2WSH transactions.
          example: '0x1cc56cbbac4622082221a8768d1d0901'
        revealed_script:
          type: string
          description: The revealed script used for Taproot script-path spend transaction.
          example: '0x1cc56cbbac4622082221a8768d1d0901'
    TransactionUtxo:
      type: object
      description: The UTXO information.
      properties:
        tx_hash:
          type: string
          description: The transaction hash of the UTXO.
          example: 7014d7d9b91862d7131f7543d84da3bec60e20be93c23ad01167c48b778fdemo
        vout_n:
          type: integer
          description: The output index of the UTXO.
          example: 0
    TransactionFixedFee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the fixed fee model. 

        Switch between the tabs to display the properties for different transaction fee models.
      required:
        - fee_type
      title: Fixed
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: TRON
            fee_used:
              type: string
              description: The actually charged transaction fee.
              example: '0.1'
            estimated_fee_used:
              type: string
              description: The estimated transaction fee.
              example: '0.1'
        - $ref: '#/components/schemas/MaxFeeAmount'
    TransactionEvmEip1559Fee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the EIP-1559 fee model. 

        The transaction fee is calculated by multiplying the gas price by the used gas units. This can be expressed as: Transaction fee = gas price * used gas units.

        Switch between the tabs to display the properties for different transaction fee models.
      title: EVM_EIP_1559
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: ETH
            effective_gas_price:
              type: string
              description: 'The gas price (gas fee per gas unit) on the chain, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.'
              example: '100000000'
            fee_used:
              type: string
              description: The actually charged transaction fee.
              example: '0.1'
            estimated_fee_used:
              type: string
              description: The estimated transaction fee.
              example: '0.1'
            gas_used:
              type: string
              description: The number of gas units used in the transaction.
              example: '100000000'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        - $ref: '#/components/schemas/FeeGasLimit'
    TransactionEvmLegacyFee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the legacy fee model. 

        The transaction fee is calculated by multiplying the gas price by the used gas. This can be expressed as: Transaction fee = gas price * used gas units.

        Switch between the tabs to display the properties for different transaction fee models.
      title: EVM_Legacy
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: ETH
            fee_used:
              type: string
              description: The actually charged transaction fee.
              example: '0.1'
            estimated_fee_used:
              type: string
              description: The estimated transaction fee.
              example: '0.1'
            gas_used:
              type: string
              description: The gas units used in the transaction.
              example: '100000000'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        - $ref: '#/components/schemas/FeeGasLimit'
    TransactionUtxoFee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the UTXO fee model, such as Bitcoin.

        The transaction fee is calculated by multiplying the fee rate by the transaction size. This can be expressed as: Transaction fee = fee rate * transaction size.

        Switch between the tabs to display the properties for different transaction fee models.
      title: UTXO
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: BTC
            fee_used:
              type: string
              description: The actually charged transaction fee.
              example: '0.1'
            estimated_fee_used:
              type: string
              description: The estimated transaction fee.
              example: '0.1'
            max_fee_amount:
              type: string
              description: The maximum fee that you are willing to pay for the transaction. The transaction will fail if the transaction fee exceeds the maximum fee.
              example: '0.1'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
    TransactionSOLFee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the Solana fee model.

        In this model, the fee is calculated as: fee = base fee + (compute unit price * compute unit limit) + rent (if applicable). For more details, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        Switch between the tabs to display the properties for different transaction fee models.
      title: SOL
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: SOL
            fee_used:
              type: string
              description: The actually charged transaction fee.
              example: '0.1'
            estimated_fee_used:
              type: string
              description: The estimated transaction fee.
              example: '0.1'
        - $ref: '#/components/schemas/SOLBase'
        - $ref: '#/components/schemas/SOLComputeUnit'
    TransactionFILFee:
      type: object
      description: |
        The transaction fee actually charged by the chain that uses the Filecoin fee model.

        In this model, the fee is calculated as: fee = base fee * gas used + gas premium * gas limit. For more details, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).

        Switch between the tabs to display the properties for different transaction fee models.
      title: FIL
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            token_id:
              type: string
              description: The token used to pay the transaction fee.
              example: FIL
            fee_used:
              type: string
              description: The actually charged transaction fee.
              example: '0.1'
            estimated_fee_used:
              type: string
              description: The estimated transaction fee.
              example: '0.1'
        - $ref: '#/components/schemas/FILBase'
        - $ref: '#/components/schemas/FILPrice'
    TransactionFee:
      oneOf:
        - $ref: '#/components/schemas/TransactionEvmEip1559Fee'
        - $ref: '#/components/schemas/TransactionEvmLegacyFee'
        - $ref: '#/components/schemas/TransactionUtxoFee'
        - $ref: '#/components/schemas/TransactionFixedFee'
        - $ref: '#/components/schemas/TransactionSOLFee'
        - $ref: '#/components/schemas/TransactionFILFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/TransactionEvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/TransactionEvmLegacyFee'
          UTXO: '#/components/schemas/TransactionUtxoFee'
          Fixed: '#/components/schemas/TransactionFixedFee'
          SOL: '#/components/schemas/TransactionSOLFee'
          FIL: '#/components/schemas/TransactionFILFee'
    TransactionRbf:
      type: object
      description: The information about the request to drop or to speed up transactions.
      required:
        - request_id
        - fee
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        source:
          oneOf:
            - $ref: '#/components/schemas/MpcTransferSource'
            - $ref: '#/components/schemas/CustodialWeb3TransferSource'
          discriminator:
            propertyName: source_type
            mapping:
              Web3: '#/components/schemas/CustodialWeb3TransferSource'
              Org-Controlled: '#/components/schemas/MpcTransferSource'
              User-Controlled: '#/components/schemas/MpcTransferSource'
        category_names:
          type: array
          description: The custom category for you to identify your transactions.
          items:
            type: string
            example: Trading
        description:
          type: string
          description: The description of the RBF transaction.
          example: Speedup transaction
        auto_fuel:
          $ref: '#/components/schemas/AutoFuelType'
    TransactionResend:
      type: object
      description: The information about the request to resend transactions.
      required:
        - request_id
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    ReplaceType:
      type: string
      enum:
        - Drop
        - Resend
        - SpeedUp
      example: Resend
      description: |
        The `replaced_by_type` property indicates the replacement type of the transaction that this transaction was replaced by, and the `replaced_type` property indicates the replacement type of the transaction that this transaction replaced.
        Possible values include: 
          - `Drop`: To drop a transaction.
          - `Resend`: To resend a transaction.
          - `SpeedUp`: To speed up a transaction.
    AutoFuelType:
      type: string
      enum:
        - PassiveAutoFuel
        - ProActiveAutoFuel
        - UsePortalPreference
      example: PassiveAutoFuel
      description: |
        The mode of transaction fee payment using Fee Station. Currently, Fee Station supports EVM-compatible and TRON transactions initiated from MPC Wallets (Organization-Controlled) and Custodial Wallets (Web3 Wallets). For more details, refer to [Fee Station](https://manuals.cobo.com/en/portal/fee-station/introduction).
        - `ProActiveAutoFuel`: Always use Fee Station to pay transaction fees.
        - `PassiveAutoFuel`: Use Fee Station only when the source address balance is insufficient to cover the transaction fees.
        - `UsePortalPreference`: Use payment preferences set on Cobo Portal.

        Please note that the TRON chain does not support `PassiveAutoFuel` due to its fee delegation mechanism.
    TransactionApprovalDetail:
      type: object
      description: The approval detail data for transaction.
      properties:
        transaction_id:
          type: string
          description: The transaction ID.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        cobo_id:
          type: string
          description: 'The Cobo ID, which can be used to track a transaction.'
          example: '20231213122855000000000000000000'
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: web_send_by_user_327_1610444045047
        spender:
          $ref: '#/components/schemas/TransactionRoleApprovalDetail'
        approver:
          $ref: '#/components/schemas/TransactionRoleApprovalDetail'
        address_owner:
          $ref: '#/components/schemas/TransactionRoleApprovalDetail'
    TransactionApprovalResult:
      type: string
      enum:
        - Approved
        - Rejected
        - Pending
      example: Approved
      description: |
        The transaction approval result. Possible values include: 
          - `Approved`: The transaction is approved.
          - `Rejected`: The transaction is rejected. 
          - `Pending`: The transaction is pending approval.
    TransactionRoleApprovalDetail:
      type: object
      description: The role approval data for transaction.
      properties:
        result:
          $ref: '#/components/schemas/TransactionApprovalResult'
        review_threshold:
          type: integer
          description: The threshold for passing the review of this role.
          example: 1
        initiator:
          type: string
          description: The initiator of the transaction.
          example: tom@gmail.com
        complete_time:
          type: string
          description: Time to complete the review.
        user_details:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUserApprovalDetail'
    TransactionUserApprovalDetail:
      type: object
      description: The user approval data for transaction.
      properties:
        name:
          type: string
          description: The name of the user who audited this message.
          example: tom
        email:
          type: string
          description: The email of the user who audited this message.
          example: tom@gmail.com
        pubkey:
          type: string
          description: The Cobo Guard public key of the user who audited this message.
          example: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
        result:
          $ref: '#/components/schemas/TransactionApprovalResult'
        signature:
          type: string
          description: The signature of the audited message.
        language:
          type: string
          description: The language of the audited message.
          example: en
        message_version:
          type: string
          description: The version of the audited message.
          example: 1.0.1
        message:
          type: string
          description: The audited message.
        extra_message:
          type: string
          description: The extra audited message.
    TransactionFuelingInfo:
      type: object
      description: Details of the auto-fueling transaction that provides gas for the current transaction.
      properties:
        request_id:
          type: string
          description: The request ID of the transaction.
          example: gas_760a1955-e212-4dfb-a8d0-e66312a1a051
        transaction_id:
          type: string
          description: The transaction ID.
          format: uuid
          example: b0530b27-104f-4338-87de-de01500326ea
    TransactionCoboCategory:
      type: string
      enum:
        - AutoFueling
        - AutoFuelingRefund
        - AutoSweep
        - BillPayment
        - BillRefund
        - CommissionFeeCharge
        - CommissionFeeRefund
        - SafeTxMessage
        - StakingBabylonBtcDelegation
        - StakingBabylonBtcSignBabylon
        - StakingBabylonClaim
        - StakingBabylonSlashing
        - StakingBabylonStake
        - StakingBabylonUnstake
        - StakingBabylonWithdraw
        - StakingBithiveClaim
        - StakingBithiveStake
        - StakingBithiveUnstake
        - StakingBithiveWithdraw
        - StakingCoreStake
        - StakingCoreWithdraw
        - StakingEthClaim
        - StakingEthStake
        - StakingEthUnstake
        - StakingSkyfarmClaim
        - StakingSkyfarmStake
        - StakingSkyfarmUnstake
        - ScreenAppRefund
        - ScreenAppIsolate
        - ComplianceRefund
        - ComplianceIsolate
      example: AutoSweep
      description: |
        The transaction category defined by Cobo. Possible values include: 
          - `AutoSweep`: An auto-sweep transaction.
          - `AutoFueling`: A transaction where Fee Station pays transaction fees to an address within your MPC Wallets.
          - `AutoFuelingRefund`: A refund for an auto-fueling transaction.
          - `SafeTxMessage`: A message signing transaction initiated by an MPC wallet to authorize a Smart Contract Wallet (Safe\{Wallet\}) transaction.
          - `BillPayment`: A transaction to pay Cobo bills through Fee Station.
          - `BillRefund`: A refund for a previously made bill payment.
          - `CommissionFeeCharge`: A transaction to charge commission fees via Fee Station.
          - `CommissionFeeRefund`: A refund of previously charged commission fees.
          - `StakingBabylonBtcDelegation`: A transaction for delegating BTC in Babylon staking.
          - `StakingBabylonBtcSignBabylon`: A transaction for signing Babylon operations with BTC.
          - `StakingBabylonClaim`: A transaction for claiming rewards from Babylon staking.
          - `StakingBabylonSlashing`: A transaction related to slashing penalties in Babylon staking.
          - `StakingBabylonStake`: A transaction for staking assets in the Babylon platform.
          - `StakingBabylonUnstake`: A transaction for unstaking assets from the Babylon platform.
          - `StakingBabylonWithdraw`: A transaction for withdrawing assets from Babylon staking.
          - `StakingBithiveClaim`: A transaction for claiming rewards from BitHive staking.
          - `StakingBithiveStake`: A transaction for staking assets in the BitHive platform.
          - `StakingBithiveUnstake`: A transaction for unstaking assets from the BitHive platform.
          - `StakingBithiveWithdraw`: A transaction for withdrawing assets from BitHive staking.
          - `StakingCoreStake`: A transaction for staking assets in the Core staking platform.
          - `StakingCoreWithdraw`: A transaction for withdrawing assets from Core staking.
          - `StakingEthClaim`: A transaction for claiming rewards from ETH staking.
          - `StakingEthStake`: A transaction for staking ETH assets.
          - `StakingEthUnstake`: A transaction for unstaking ETH assets.
          - `StakingSkyfarmClaim`: A transaction for claiming rewards from Skyfarm staking.
          - `StakingSkyfarmStake`: A transaction for staking assets in the Skyfarm platform.
          - `StakingSkyfarmUnstake`: A transaction for unstaking assets from the Skyfarm platform.
          - `ScreenAppRefund`: A refund transaction initiated through the Screening App.
          - `ScreenAppIsolate`: An isolation transaction initiated through the Screening App.
          - `ComplianceRefund`: A refund transaction initiated by Cobo KYT.
          - `ComplianceIsolate`: An isolation transaction initiated by Cobo KYT.
    SafeTxExtraData:
      type: object
      description: 'The information used to construct and sign Safe{Wallet} transactions using the EIP-712 standard.'
      required:
        - to
        - value
        - data
        - domain_hash
        - message_hash
        - safe_address
        - safe_tx_hash
        - safe_nonce
        - operation
      properties:
        to:
          type: string
          description: The recipient address of the transaction.
          example: '0x1234567890abcdef1234567890abcdef12345678'
        value:
          type: string
          description: 'The human-readable transaction value, for example, `1 ETH`.'
          example: 1 ETH
        data:
          type: string
          description: The transaction call data.
          example: 0xabcdef...
        domain_hash:
          type: string
          description: The EIP-712 domain separator hash.
          example: 0xabcdef123456...
        message_hash:
          type: string
          description: The hash of the structured message to be signed.
          example: 0xabcdef123456...
        safe_address:
          type: string
          description: The address of the Safe contract.
          example: '0xabcdefabcdefabcdefabcdefabcdefabcdef'
        safe_tx_hash:
          type: string
          description: The hash of the transaction.
          example: 0x123456abcdef...
        safe_nonce:
          type: integer
          description: The nonce of the transaction.
          example: 42
        operation:
          type: string
          description: The operation type for the transaction.
          example: Call
        gas_token_addr:
          type: string
          description: The address of the token used to pay gas.
          example: 0xabcdefabcdef...
        safe_tx_gas:
          type: integer
          description: The gas limit used for the transaction.
          example: 21000
        base_gas:
          type: integer
          description: The base gas for the transaction.
          example: 5000
        gas_price:
          type: string
          description: The gas price used in the transaction.
          example: '100'
        refund_receiver:
          type: string
          description: The address used to receive the gas refund.
          example: 0xabcdefabcdef...
        to_contract_name:
          type: string
          description: The name of the recipient contract (if available).
          example: UniswapV2Router
        decoded_data:
          $ref: '#/components/schemas/SafeTxDecodedData'
        signature:
          type: string
          description: The signature of the transaction (if signed by Cobo Signer).
          example: 0xabcdef123456...
        wei:
          type: string
          nullable: true
          description: The transaction amount in Wei.
          example: '1000000000000000000'
    SafeTxDecodedData:
      type: object
      description: The information about the decoded data of the transaction.
      properties:
        method:
          type: string
          description: The name of the method decoded from the transaction data.
          example: transfer
        parameters:
          type: array
          description: The list of parameters decoded from the transaction data.
          items:
            $ref: '#/components/schemas/SafeTxDecodedDataParameters'
    SafeTxDecodedDataParameters:
      type: object
      description: The information about the decoded parameters of the transaction.
      properties:
        name:
          type: string
          description: The name of the parameter.
          example: recipient
        type:
          type: string
          description: The data type of the parameter.
          example: address
        value:
          type: string
          description: The value of the parameter.
          example: '0x1234567890abcdef1234567890abcdef12345678'
        value_decoded:
          type: array
          description: The decoded value of the parameter (if applicable).
          items:
            $ref: '#/components/schemas/SafeTxSubTransaction'
    SafeTxSubTransaction:
      type: object
      description: The information about the sub-transaction.
      properties:
        operation:
          type: string
          description: The type of operation in the sub-transaction.
          example: Call
        to:
          type: string
          description: The destination address of the sub-transaction.
          example: '0xabcdefabcdefabcdefabcdefabcdefabcdef'
        value:
          type: string
          description: 'The human-readable transaction value, for example, `1 ETH`.'
          example: 1 ETH
        wei:
          type: string
          description: The transaction amount in Wei
          example: '1000000000000000000'
        data:
          type: string
          description: Encoded transaction data
          example: 0xabcdef...
        data_decoded:
          $ref: '#/components/schemas/SafeTxDecodedData'
        to_contract_name:
          type: string
          nullable: true
          description: The name of the recipient contract (if available).
          example: UniswapV2Router
    TransactionExtra:
      oneOf:
        - $ref: '#/components/schemas/TransactionBabylonBusinessInfo'
        - $ref: '#/components/schemas/TransactionBabylonTxParameters'
        - $ref: '#/components/schemas/TransactionCoreStakeInfo'
      discriminator:
        propertyName: extra_type
        mapping:
          BabylonBusinessInfo: '#/components/schemas/TransactionBabylonBusinessInfo'
          BabylonTxParameters: '#/components/schemas/TransactionBabylonTxParameters'
          CoreStakeInfo: '#/components/schemas/TransactionCoreStakeInfo'
    TransactionExtraType:
      type: string
      enum:
        - BabylonBusinessInfo
        - BabylonTxParameters
        - CoreStakeInfo
      example: BabylonBusinessInfo
      description: |
        The transaction extra information type. Possible values include:
          - `BabylonBusinessInfo`: The extra information related to Babylon business logic.
          - `BabylonTxParameters`: The extra information for Babylon transaction parameters.
          - `CoreStakeInfo`: The extra information related to core staking operations.
    TransactionBabylonBusinessInfo:
      type: object
      description: The extra information related to Babylon business logic.
      title: BabylonBusinessInfo
      required:
        - extra_type
      properties:
        extra_type:
          $ref: '#/components/schemas/TransactionExtraType'
        babylon_address_info:
          $ref: '#/components/schemas/AddressInfo'
        btc_address_info:
          $ref: '#/components/schemas/AddressInfo'
    TransactionBabylonTxParameters:
      type: object
      description: The extra information for Babylon transaction parameters.
      title: BabylonTxParameters
      required:
        - extra_type
      properties:
        extra_type:
          $ref: '#/components/schemas/TransactionExtraType'
        stake_amount:
          type: string
          example: '100.00'
          description: The original staking amount.
        finality_provider_public_key:
          description: The public key of the finality provider.
          type: string
          pattern: '^[0-9a-fA-F]{64}$'
          example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
        stake_block_time:
          description: The number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
          type: integer
          format: int64
          example: 2000
        param_version:
          description: The version of Babylon global parameters.
          type: integer
          format: int64
          example: 2
        withdraw_from_type:
          $ref: '#/components/schemas/ActivityType'
          description: The type of origin activity associated with the current activity when the type is withdraw.
          example: Stake
        slash_from_type:
          $ref: '#/components/schemas/ActivityType'
          description: The type of origin activity associated with the current activity when the type is slash.
          example: Stake
    TransactionCoreStakeInfo:
      type: object
      description: The extra information related to core staking operations.
      title: CoreStakeInfo
      required:
        - extra_type
      properties:
        extra_type:
          $ref: '#/components/schemas/TransactionExtraType'
        stake_amount:
          type: string
          example: '100.00'
          description: The original staking amount.
        timelock:
          type: integer
          description: The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
        change_address:
          type: string
          description: 'The change address on the Bitcoin chain. If not provided, the source wallet''s address will be used as the change address.'
        validator_address:
          type: string
          description: The validator's EVM address.
        reward_address:
          type: string
          description: The EVM address used to receive staking rewards.
    ApprovalDetail:
      type: object
      description: Details of the transaction approval.
      properties:
        transaction_id:
          type: string
          description: Transaction ID.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        cobo_id:
          type: string
          description: Cobo ID used to track a transaction.
          example: '20231213122855000000000000000000'
        request_id:
          type: string
          description: Request ID used to track a transaction request.
          example: web_send_by_user_327_1610444045047
        address_owner:
          $ref: '#/components/schemas/RoleDetail'
        spender:
          $ref: '#/components/schemas/RoleDetail'
        approver:
          $ref: '#/components/schemas/RoleDetail'
    RoleDetail:
      type: object
      description: Details of the role in a transaction approval.
      properties:
        result:
          $ref: '#/components/schemas/ApprovalTransactionResult'
        threshold:
          type: integer
          description: Minimum number of approvals required for this role.
          example: 2
        user_details:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalUserDetail'
    ApprovalResult:
      type: integer
      enum:
        - 1
        - 2
        - 3
      x-enum-varnames:
        - PENDING
        - APPROVED
        - REJECTED
      example: 1
      description: |
        Approval result for this user in the transaction approval. Possible values include: 
          - `1`: Pending approval.
          - `2`: Approved.
          - `3`: Rejected.
    ApprovalShowInfo:
      type: object
      description: |
        Additional contextual information for the transaction approval, mainly used for display purposes.
      properties:
        org_name:
          type: string
          description: Name of the organization that the transaction belongs to.
          example: Cobo
        wallet_name:
          type: string
          description: Name of the wallet that initiated the transaction.
          example: Cobo Wallet
        environment:
          type: string
          description: |
            The environment where the transaction belongs.
            Possible values:
              - `Prod`: Production environment.
              - `Dev`: Development environment.
          example: Prod
        from_address_label:
          type: string
          description: Label of the source address that initiated the transaction.
          example: Main Address
        to_address_label:
          type: string
          description: Label of the destination address that receives the transaction.
          example: Exchange Address
    ApprovalTemplate:
      type: object
      description: Approval template details.
      properties:
        business_key:
          type: string
          description: Business key used to identify the type of approval template.
          example: transaction_withdrawal
        template_text:
          type: string
          description: Text content defined in the approval template used to generate approval messages shown to users
          example: '{{user_name}} requests to withdraw {{amount}} {{currency}} from the account.'
        template_version:
          type: string
          description: Version of the approval template.
          example: 1.0.0
    ApprovalTransactionResult:
      type: integer
      enum:
        - -1
        - 0
        - 1
      x-enum-varnames:
        - REJECTED
        - PENDING
        - APPROVED
      example: 1
      description: |
        Result of transaction approval. Possible values include: 
          - `-1`: Rejected.
          - `0`: Pending approval.
          - `1`: Approved.
    ApprovalUserDetail:
      type: object
      description: |
        Details about a user involved in a transaction approval workflow.
      properties:
        user_email:
          type: string
          description: Email of the user.
          example: example@gmail.com
        pubkey:
          type: string
          description: Public key of the user.
          example: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
        signature:
          type: string
          description: Signature produced by the user for this approval.
          example: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
        statement_uuid:
          type: string
          description: UUID of the statement associated with this approval.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        result:
          $ref: '#/components/schemas/ApprovalResult'
        created_time:
          type: integer
          description: Timestamp when the approval was created.
          example: 1610444045
        template_version:
          type: string
          description: Version of the template used for the transaction approval.
          example: 1.0.0
        header_title:
          type: string
          description: Display title used in the transaction approval.
          example: Transaction Approval
        is_for_sign:
          type: boolean
          description: |
            Indicates whether this approval requires signing:
            - `true`: The user must sign the transaction.
            - `false`: The user only needs to approve or reject without signing.
          example: true
        show_info:
          $ref: '#/components/schemas/ApprovalShowInfo'
    CustodialTransferSource:
      type: object
      description: |
        The information about the transaction source types `Asset`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: Asset
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    CustodialWeb3TransferSource:
      type: object
      description: |
        The information about the transaction source types `Web3`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        - For UTXO-based chains: both `address` and `included_utxos` are optional. If both `address` and `included_utxos` are provided, the UTXOs must belong to the specified address. If neither `address` nor `included_utxos` is provided, the system will select UTXOs from the wallet associated with `wallet_id`.
        - For account-based chains: You need to provide `address` otherwise the token transfer will fail. However, when estimating fees for a transfer, `address` is not required.

        For detailed rules on `address` and `included_utxos` in both regular and RBF transactions, see [Address and included_utxos usage](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations#address-and-included-utxos-usage).

        Switch between the tabs to display the properties for different transaction sources.
      title: Web3
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: |
            Indicates the wallet address to be used as the source of funds.
            - For UTXO-based chains: both `address` and `included_utxos` are optional. If both `address` and `included_utxos` are provided, the UTXOs must belong to the specified address. If neither `address` nor `included_utxos` is provided, the system will select UTXOs from the wallet associated with `wallet_id`.
            - For account-based chains: You need to provide `address` otherwise the token transfer will fail. However, when estimating fees for a transfer, `address` is not required.

            For detailed rules on `address` and `included_utxos` in both regular and RBF transactions, see [Address and included_utxos usage](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations#address-and-included-utxos-usage).
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        included_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        excluded_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
    MpcTransferSource:
      type: object
      description: |
        The information about the transaction source types `Org-Controlled` and `User-Controlled`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        - For UTXO-based chains: both `address` and `included_utxos` are optional. If both `address` and `included_utxos` are provided, the UTXOs must belong to the specified address. If neither `address` nor `included_utxos` is provided, the system will select UTXOs from the wallet associated with `wallet_id`.
        - For account-based chains: You need to provide `address` otherwise the token transfer will fail. However, when estimating fees for a transfer, `address` is not required.

        For detailed rules on `address` and `included_utxos` in both regular and RBF transactions, see [Address and included_utxos usage](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations#address-and-included-utxos-usage).

        Switch between the tabs to display the properties for different transaction sources.
      title: Org-Controlled/User-Controlled
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: |
            Indicates the wallet address to be used as the source of funds.
            - For UTXO-based chains: both `address` and `included_utxos` are optional. If both `address` and `included_utxos` are provided, the UTXOs must belong to the specified address. If neither `address` nor `included_utxos` is provided, the system will select UTXOs from the wallet associated with `wallet_id`.
            - For account-based chains: You need to provide `address` otherwise the token transfer will fail. However, when estimating fees for a transfer, `address` is not required.

            For detailed rules on `address` and `included_utxos` in both regular and RBF transactions, see [Address and included_utxos usage](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations#address-and-included-utxos-usage).
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        included_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        excluded_utxos:
          type: array
          items:
            $ref: '#/components/schemas/TransactionUtxo'
        mpc_used_key_share_holder_group:
          $ref: '#/components/schemas/MpcSigningGroup'
    SafeTransferSource:
      type: object
      description: |
        The information about the transaction source type `Safe{Wallet}`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      title: 'Safe{Wallet}'
      required:
        - source_type
        - wallet_id
        - address
        - delegate
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        delegate:
          $ref: '#/components/schemas/CoboSafeDelegate'
    CoboSafeDelegateType:
      type: string
      enum:
        - Org-Controlled
        - User-Controlled
      example: Org-Controlled
      default: Org-Controlled
      description: |
        The wallet subtype of the Delegate. Possible values include:
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
    CoboSafeDelegate:
      oneOf:
        - $ref: '#/components/schemas/MPCDelegate'
      discriminator:
        propertyName: delegate_type
        mapping:
          Org-Controlled: '#/components/schemas/MPCDelegate'
          User-Controlled: '#/components/schemas/MPCDelegate'
    MPCDelegate:
      title: MPC Wallet Delegate
      description: 'The information about the MPC Wallet as the Delegate. You can call the [List Delegates](https://www.cobo.com/developers/v2/api-references/wallets--smart-contract-wallets/list-delegates) operation to retrieve the applicable Delegates.'
      type: object
      required:
        - delegate_type
        - wallet_id
        - address
      properties:
        delegate_type:
          $ref: '#/components/schemas/CoboSafeDelegateType'
        wallet_id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: 'The wallet ID of the Delegate. This is required when initiating a transfer or contract call from Smart Contract Wallets (Safe{Wallet}).'
        address:
          type: string
          example: '0x1234567890123456789012345678901234567890'
          description: 'The wallet address of the Delegate. This is required when initiating a transfer or contract call from Smart Contract Wallets (Safe{Wallet}).'
    ExchangeTransferSource:
      type: object
      description: |
        The information about the transaction source types `Main` and `Sub`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Assets in an Exchange Wallet (Sub Account) can only be transferred to another Exchange Wallet.

        Switch between the tabs to display the properties for different transaction sources.
      title: Main/Sub
      required:
        - source_type
        - wallet_id
        - trading_account_type
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        trading_account_type:
          type: string
          description: The trading account type.
          example: Asset
    TransferSource:
      oneOf:
        - $ref: '#/components/schemas/CustodialTransferSource'
        - $ref: '#/components/schemas/CustodialWeb3TransferSource'
        - $ref: '#/components/schemas/MpcTransferSource'
        - $ref: '#/components/schemas/SafeTransferSource'
        - $ref: '#/components/schemas/ExchangeTransferSource'
      discriminator:
        propertyName: source_type
        mapping:
          Asset: '#/components/schemas/CustodialTransferSource'
          Web3: '#/components/schemas/CustodialWeb3TransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
          'Safe{Wallet}': '#/components/schemas/SafeTransferSource'
          Main: '#/components/schemas/ExchangeTransferSource'
          Sub: '#/components/schemas/ExchangeTransferSource'
    AddressTransferDestination:
      type: object
      description: |
        The information about the transaction destination type `Address`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        **You need to specify either the `account_output` property or the `utxo_outputs` property.**

        You can transfer tokens to multiple addresses only if you use MPC Wallets as the transaction source. To do this, you should use the `utxo_outputs` property to specify the destination addresses.

        Switch between the tabs to display the properties for different transaction destinations.
      title: Address
      required:
        - destination_type
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        account_output:
          type: object
          required:
            - address
            - amount
          properties:
            address:
              type: string
              description: The destination address.
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            memo:
              type: string
              description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
              example: '82840924'
            amount:
              type: string
              description: |
                The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
              example: '1.5'
        utxo_outputs:
          type: array
          items:
            type: object
            required:
              - address
              - amount
            properties:
              address:
                type: string
                description: The destination address.
                example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
              amount:
                type: string
                description: |
                  The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
                example: '1.5'
        change_address:
          type: string
          description: The address used to receive the remaining funds or change from the transaction.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sDEMO
        change_output_type:
          type: string
          enum:
            - Last
            - First
          example: First
          description: |
            The position of the change output in the transaction's outputs. Possible values are:
            - `Last`: The change output is placed at the end of the transaction's outputs.  
            - `First`: The change output is placed at the beginning of the transaction's outputs.
        force_internal:
          type: boolean
          description: |
            Whether the transaction request must be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must be executed as a Cobo Loop transfer.
              - `false`: The transaction request may not be executed as a Cobo Loop transfer.
              
            Please do not set both `force_internal` and `force_external` as `true`. If both are set to `false`, the system uses Cobo Loop by default if possible; otherwise, it proceeds with an on-chain transfer.
          example: false
        force_external:
          type: boolean
          description: |
            Whether the transaction request must not be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.
              - `true`: The transaction request must not be executed as a Cobo Loop transfer.
              - `false`: The transaction request can be executed as a Cobo Loop transfer.

            Please do not set both `force_internal` and `force_external` as `true`. If both are set to `false`, the system uses Cobo Loop by default if possible; otherwise, it proceeds with an on-chain transfer.
          example: false
    CustodialTransferDestination:
      type: object
      description: |
        The information about the transaction destination type `CustodialWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        A Custodial Wallet (Asset Wallet) can only receive transfers from another Custodial Wallet (Asset Wallet) by using [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop).

        Switch between the tabs to display the properties for different transaction destinations.
      title: CustodialWallet
      required:
        - destination_type
        - wallet_id
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: '1.5'
    ExchangeTransferDestination:
      type: object
      description: |
        The information about the transaction destination type `ExchangeWallet`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        An Exchange Wallet (Sub Account) can only receive asset transfers from another Exchange Wallet.

        Switch between the tabs to display the properties for different transaction destinations.
      title: ExchangeWallet
      required:
        - destination_type
        - wallet_id
        - trading_account_type
        - amount
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        trading_account_type:
          type: string
          description: The trading account type.
          example: Asset
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: '1.5'
    TransferDestinationType:
      type: string
      enum:
        - Address
        - CustodialWallet
        - ExchangeWallet
      example: Address
      description: |
        The transaction destination type. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Each destination type requires a different set of properties. Switch between the above tabs for details.
    TransferDestination:
      oneOf:
        - $ref: '#/components/schemas/AddressTransferDestination'
        - $ref: '#/components/schemas/CustodialTransferDestination'
        - $ref: '#/components/schemas/ExchangeTransferDestination'
      discriminator:
        propertyName: destination_type
        mapping:
          Address: '#/components/schemas/AddressTransferDestination'
          CustodialWallet: '#/components/schemas/CustodialTransferDestination'
          ExchangeWallet: '#/components/schemas/ExchangeTransferDestination'
    TransferParams:
      type: object
      description: The information about a token transfer.
      required:
        - request_id
        - request_type
        - source
        - token_id
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          type: string
          description: 'The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens). For transfers from Exchange Wallets, this property value represents the asset ID.'
          example: ETH_USDT
        destination:
          $ref: '#/components/schemas/TransferDestination'
        category_names:
          type: array
          description: The custom category for you to identify your transactions.
          items:
            type: string
            example: Trading
        description:
          type: string
          description: The description of the transfer.
          example: Transfer from wallet
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        transaction_process_type:
          $ref: '#/components/schemas/TransactionProcessType'
        auto_fuel:
          $ref: '#/components/schemas/AutoFuelType'
    EstimateFeeRequestType:
      type: string
      enum:
        - Transfer
        - ContractCall
      example: Transfer
      description: |
        The request type. Possible values include:
          - `Transfer`: A request to transfer tokens.
          - `ContractCall`: A request to interact with a smart contract.
    EstimateFeeParams:
      oneOf:
        - $ref: '#/components/schemas/EstimateTransferFeeParams'
        - $ref: '#/components/schemas/EstimateContractCallFeeParams'
      discriminator:
        propertyName: request_type
        mapping:
          Transfer: '#/components/schemas/EstimateTransferFeeParams:'
          ContractCall: '#/components/schemas/EstimateContractCallFeeParams:'
    EstimateTransferFeeParams:
      type: object
      description: The information about a token transfer.
      title: Transfer
      required:
        - request_type
        - source
        - token_id
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization. It is recommended to use the same request ID as the transaction for which you want to estimate the transaction fee.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          type: string
          description: 'The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        destination:
          $ref: '#/components/schemas/TransferDestination'
        fee_type:
          $ref: '#/components/schemas/FeeType'
        replaced_transaction_id:
          type: string
          description: The ID of the transaction that this transaction replaced.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
    EstimateContractCallFeeParams:
      type: object
      description: The information about a transaction that interacts with a smart contract
      title: ContractCall
      required:
        - request_type
        - chain_id
        - source
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization. It is recommended to use the same request ID as the transaction for which you want to estimate the transaction fee.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          $ref: '#/components/schemas/EstimateFeeRequestType'
        chain_id:
          type: string
          description: 'The chain ID of the chain on which the smart contract is issued. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/ContractCallDestination'
        fee_type:
          $ref: '#/components/schemas/FeeType'
        replaced_transaction_id:
          type: string
          description: The ID of the transaction that this transaction replaced.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
    BaseContractCallSource:
      type: object
      description: |
        The information about the transaction source type. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      required:
        - source_type
        - wallet_id
        - address
      properties:
        source_type:
          $ref: '#/components/schemas/ContractCallSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    MpcContractCallSource:
      title: Org-Controlled/User-Controlled
      allOf:
        - $ref: '#/components/schemas/BaseContractCallSource'
        - type: object
          properties:
            mpc_used_key_share_holder_group:
              $ref: '#/components/schemas/MpcSigningGroup'
    CustodialWeb3ContractCallSource:
      title: Web3
      allOf:
        - $ref: '#/components/schemas/BaseContractCallSource'
    SafeContractCallSource:
      title: 'Safe{Wallet}'
      description: |
        The information about the transaction source type `Safe{Wallet}`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Switch between the tabs to display the properties for different transaction sources.
      allOf:
        - $ref: '#/components/schemas/BaseContractCallSource'
        - type: object
          required:
            - delegate
          properties:
            delegate:
              $ref: '#/components/schemas/CoboSafeDelegate'
    ContractCallSourceType:
      type: string
      enum:
        - Web3
        - Org-Controlled
        - User-Controlled
        - 'Safe{Wallet}'
      example: Org-Controlled
      description: |
        The type of the source. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Each source type requires a different set of properties. Switch between the above tabs for details.
    ContractCallSource:
      oneOf:
        - $ref: '#/components/schemas/MpcContractCallSource'
        - $ref: '#/components/schemas/SafeContractCallSource'
        - $ref: '#/components/schemas/CustodialWeb3ContractCallSource'
      discriminator:
        propertyName: source_type
        mapping:
          Org-Controlled: '#/components/schemas/MpcContractCallSource'
          User-Controlled: '#/components/schemas/MpcContractCallSource'
          'Safe{Wallet}': '#/components/schemas/SafeContractCallSource'
          Web3: '#/components/schemas/CustodialWeb3ContractCallSource'
    ContractCallDestinationType:
      type: string
      enum:
        - EVM_Contract
        - SOL_Contract
      example: EVM_Contract
      description: |
        The type of the contract format. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
    EvmContractCallDestination:
      title: EVM_Contract
      type: object
      description: 'The information about the transaction destination. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      required:
        - destination_type
        - address
        - calldata
      properties:
        destination_type:
          $ref: '#/components/schemas/ContractCallDestinationType'
        address:
          type: string
          description: The destination address.
          example: '0x0406db8351aa6839169bb363f63c2c808fee8f99'
        value:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
        calldata:
          type: string
          description: |
            The data used to invoke a specific function or method within the specified contract at the destination address, with a maximum length of 65,000 characters.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
    CosmosContractCallMessage:
      title: Cosmos Message
      type: object
      description: The information about the Cosmos message.
      required:
        - type_url
        - message
      properties:
        type_url:
          type: string
          description: |
            The type URL of the Cosmos message.
          example: /babylon.btcstaking.v1.MsgCreateBTCDelegation
        message:
          type: string
          description: |
            The Base64-encoded Cosmos message.
          example: eyJ0eXBlIjoiYmFiY29zZS5idGNzdGFnaW5nLnYxLk1zZ0NyZWF0ZUJUQ0RlbGVnYXRpb24iLCJtZXNzYWdlIjp7ImNvbW1hbmRfaWQiOiJjb21tYW5kX2lkIiwibWVzc2FnZV92YWx1ZSI6Im1lc3NhZ2VfdmFsdWUiLCJtZXNzYWdlX3R5cGUiOiJtZXNzYWdlX3R5cGUifX0=
    CosmosContractCallDestination:
      title: Cosmos Contract
      type: object
      description: 'The information about the transaction destination. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      required:
        - destination_type
        - cosmos_messages
      properties:
        destination_type:
          $ref: '#/components/schemas/ContractCallDestinationType'
        cosmos_messages:
          type: array
          items:
            $ref: '#/components/schemas/CosmosContractCallMessage'
        value:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
    SolContractCallDestination:
      title: SOL_Contract
      type: object
      description: 'The information about the transaction destination. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      required:
        - destination_type
        - instructions
      properties:
        destination_type:
          $ref: '#/components/schemas/ContractCallDestinationType'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/SolContractCallInstruction'
    SolContractCallAccount:
      title: SOL Instruction Account
      type: object
      description: The information about the account involved in a Solana instruction.
      required:
        - pubkey
        - is_signer
        - is_writable
      properties:
        pubkey:
          type: string
          description: |
            The public key of the account. If the account is a signer of this transaction, this property must be the same as the value of the `source.address` property.
          example: E4MhQWiqCLER3fFZNf8LyQFpLWW3BRxtsR5eps3c3vNS
        is_signer:
          type: boolean
          description: |
            Whether the account is the signer of this transaction:
            - `true`: The account is a signer.
            - `false`: The account is not a signer.
          example: true
        is_writable:
          type: boolean
          description: |
            Whether the account can be modified by the instruction:
            - `true`: The account can be modified by the instruction.
            - `false`: The account cannot be modified by the instruction.
          example: true
    SolContractCallInstruction:
      title: SOL Instruction
      type: object
      description: The information about the Solana instruction.
      required:
        - accounts
        - data
        - program_id
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/SolContractCallAccount'
        data:
          type: string
          description: |
            The Base64-encoded instruction data used for interacting with a Solana program.
          example: 37u9WtQpcm6ULa3WRQHmj49EPs4if7o9f1jSRVZpm2dvihR9C8jY4NqEwXUbLwx15HBSNcP1
        program_id:
          type: string
          description: |
            The address of the Solana program (smart contract). 
          example: MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr
    ContractCallDestination:
      oneOf:
        - $ref: '#/components/schemas/EvmContractCallDestination'
        - $ref: '#/components/schemas/SolContractCallDestination'
      discriminator:
        propertyName: destination_type
        mapping:
          EVM_Contract: '#/components/schemas/EvmContractCallDestination'
          SOL_Contract: '#/components/schemas/SolContractCallDestination'
    ContractCallParams:
      type: object
      description: The information about a transaction that interacts with a smart contract
      title: Contract call
      required:
        - request_id
        - request_type
        - chain_id
        - source
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        source:
          $ref: '#/components/schemas/ContractCallSource'
        destination:
          $ref: '#/components/schemas/ContractCallDestination'
        description:
          type: string
          description: The description of the contract call transaction.
          example: Transaction to call a smart contract initiated from a wallet
        category_names:
          type: array
          description: The custom category for you to identify your transactions.
          items:
            type: string
            example: Trading
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        transaction_process_type:
          $ref: '#/components/schemas/TransactionProcessType'
        auto_fuel:
          $ref: '#/components/schemas/AutoFuelType'
    TransactionProcessType:
      type: string
      enum:
        - AutoProcess
        - BuildOnly
      example: AutoProcess
      description: |
        Transaction processing type. Possible values are:
        - `AutoProcess` (default): After the transaction is constructed, it will be automatically signed and broadcast.  
        - `BuildOnly`: Set to this value if you want to build the transaction first without automatically signing and broadcasting it. You can manually call the [Sign and broadcast transaction](https://www.cobo.com/developers/v2/api-references/transactions/sign-and-broadcast-transaction) operation to complete the signing and broadcasting process.
    MpcMessageSignSource:
      title: Org-Controlled/User-Controlled
      type: object
      required:
        - source_type
        - wallet_id
        - address
      properties:
        source_type:
          $ref: '#/components/schemas/MessageSignSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        mpc_used_key_share_holder_group:
          $ref: '#/components/schemas/MpcSigningGroup'
    CustodialWeb3MessageSignSource:
      title: Web3
      type: object
      required:
        - source_type
        - wallet_id
        - address
      properties:
        source_type:
          $ref: '#/components/schemas/MessageSignSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    MessageSignSourceType:
      type: string
      enum:
        - Web3
        - Org-Controlled
        - User-Controlled
      example: Org-Controlled
      description: |
        The wallet subtype of the transaction source. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.
    MessageSignSource:
      oneOf:
        - $ref: '#/components/schemas/MpcMessageSignSource'
        - $ref: '#/components/schemas/CustodialWeb3MessageSignSource'
      discriminator:
        propertyName: source_type
        mapping:
          Org-Controlled: '#/components/schemas/MpcMessageSignSource'
          User-Controlled: '#/components/schemas/MpcMessageSignSource'
          Web3: '#/components/schemas/CustodialWeb3MessageSignSource'
    EvmEIP191MessageSignDestination:
      title: EVM_EIP_191_Signature
      description: 'The information about the destination `EVM_EIP_191_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      type: object
      required:
        - destination_type
        - message
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message:
          type: string
          description: 'The raw data of the message to be signed, encoded in Base64 format.'
          example: YWFhYQ==
    BTCEIP191MessageSignDestination:
      title: BTC_EIP_191_Signature
      description: 'The information about the destination `BTC_EIP_191_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      type: object
      required:
        - destination_type
        - message
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message:
          type: string
          description: 'The raw data of the message to be signed, encoded in Base64 format.'
          example: YWFhYQ==
    EvmEIP712MessageSignDestination:
      title: EVM_EIP_712_Signature
      description: 'The information about the destination `EVM_EIP_712_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      type: object
      required:
        - destination_type
        - structured_data
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        structured_data:
          type: object
          additionalProperties: true
          description: 'The structured data to be signed, formatted as a JSON object according to the EIP-712 standard.'
          example: |
            {"types": {"EIP712Domain": [{"name": "name", "type": "string"}, {"name": "version", "type": "string"}, {"name": "chainId", "type": "uint256"}, {"name": "verifyingContract", "type": "address"}], "Person": [{"name": "name", "type": "string"}, {"name": "wallet", "type": "address"}], "Mail": [{"name": "from", "type": "Person"}, {"name": "to", "type": "Person"}, {"name": "contents", "type": "string"}]}, "primaryType": "Mail", "domain": {"name": "Ether Mail", "version": "1", "chainId": 1, "verifyingContract": "0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC"}, "message": {"from": {"name": "Cow", "wallet": "0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826"}, "to": {"name": "Bob", "wallet": "0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB"}, "contents": "Hello, Bob!"}}
    RawMessageSignDestination:
      title: Raw_Message_Signature
      description: 'The information about the destination `Raw_Message_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      type: object
      required:
        - destination_type
        - msg_hash
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        msg_hash:
          type: string
          description: 'Message hash to be signed, in hexadecimal format.'
    BTCBIP322MessageSignDestination:
      title: BTC_BIP_322_Signature
      description: 'The information about the destination `BTC_BIP_322_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      type: object
      required:
        - destination_type
        - message_bip322
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message_bip322:
          type: string
          description: 'Message to be signed, in hexadecimal format.'
    BTCBIP137MessageSignDestination:
      title: BTC_BIP_137_Signature
      description: 'The information about the destination `BTC_BIP_137_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      type: object
      required:
        - destination_type
        - message_bip137
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message_bip137:
          type: string
          description: 'Message to be signed, in hexadecimal format.'
    CosmosAdr36MessageSignDestination:
      title: COSMOS_ADR_36_Signature
      description: 'The information about the destination `COSMOS_ADR_36_Signature`. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.'
      type: object
      required:
        - destination_type
        - message_cosmos_adr36
      properties:
        destination_type:
          $ref: '#/components/schemas/MessageSignDestinationType'
        message_cosmos_adr36:
          type: string
          description: 'Message to be signed, in hexadecimal format.'
    MessageSignDestinationType:
      type: string
      enum:
        - EVM_EIP_191_Signature
        - EVM_EIP_712_Signature
        - BTC_EIP_191_Signature
        - BTC_BIP_137_Signature
        - BTC_BIP_322_Signature
        - COSMOS_ADR_36_Signature
        - Raw_Message_Signature
      example: EVM_EIP_191_Signature
      description: |
        The type of the signature format. Refer to [Transaction sources and destinations](https://www.cobo.com/developers/v2/guides/transactions/sources-and-destinations) for a detailed introduction about the supported sources and destinations for each transaction type.

        Each signature format type requires a different set of properties. Switch between the above tabs for details.
    MessageSignDestination:
      oneOf:
        - $ref: '#/components/schemas/EvmEIP191MessageSignDestination'
        - $ref: '#/components/schemas/EvmEIP712MessageSignDestination'
        - $ref: '#/components/schemas/RawMessageSignDestination'
        - $ref: '#/components/schemas/BTCEIP191MessageSignDestination'
        - $ref: '#/components/schemas/BTCBIP137MessageSignDestination'
        - $ref: '#/components/schemas/BTCBIP322MessageSignDestination'
        - $ref: '#/components/schemas/CosmosAdr36MessageSignDestination'
      discriminator:
        propertyName: destination_type
        mapping:
          EVM_EIP_191_Signature: '#/components/schemas/EvmEIP191MessageSignDestination'
          EVM_EIP_712_Signature: '#/components/schemas/EvmEIP712MessageSignDestination'
          BTC_EIP_191_Signature: '#/components/schemas/BTCEIP191MessageSignDestination'
          BTC_BIP_137_Signature: '#/components/schemas/BTCBIP137MessageSignDestination'
          BTC_BIP_322_Signature: '#/components/schemas/BTCBIP322MessageSignDestination'
          COSMOS_ADR_36_Signature: '#/components/schemas/CosmosAdr36MessageSignDestination'
          Raw_Message_Signature: '#/components/schemas/RawMessageSignDestination'
    MessageSignParams:
      type: object
      description: The information about a transaction that signs a message. You can provide the message either as raw data or as structured data.
      required:
        - request_id
        - request_type
        - chain_id
        - source
        - destination
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        source:
          $ref: '#/components/schemas/MessageSignSource'
        destination:
          $ref: '#/components/schemas/MessageSignDestination'
        description:
          type: string
          description: The description of the message signing transaction.
          example: Transaction to sign a message initiated from a wallet
        category_names:
          type: array
          description: The custom category for you to identify your transactions.
          items:
            type: string
            example: Trading
    WebhookEvent:
      type: object
      description: The webhook event payload.
      required:
        - id
        - url
        - created_timestamp
        - type
        - data
      properties:
        event_id:
          description: The event ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        url:
          description: The webhook endpoint URL.
          maxLength: 500
          type: string
          format: url
          example: 'https://example.com/webhook'
        created_timestamp:
          description: |
            The time when the event was triggered, in Unix timestamp format (milliseconds).
            - The value remains unchanged across retries.
            - The default webhook timeout is 2 seconds.
          type: integer
          format: int64
          example: 1701396866000
        type:
          $ref: '#/components/schemas/WebhookEventType'
        data:
          $ref: '#/components/schemas/WebhookEventData'
        status:
          $ref: '#/components/schemas/WebhookEventStatus'
        next_retry_timestamp:
          description: |
            The timestamp indicating the next scheduled retry to deliver this event, in Unix timestamp format, measured in milliseconds. This field is only present if the event status is `Retrying`.
          type: integer
          format: int64
          example: 1701396866000
        retries_left:
          description: The number of retries left. This field is only present if the event status is `Retrying`.
          type: integer
          example: 3
    WebhookEventDataType:
      type: object
      description: The data type of the event.
      required:
        - data_type
      properties:
        data_type:
          type: string
          enum:
            - Transaction
            - TSSRequest
            - Addresses
            - WalletInfo
            - MPCVault
            - Chains
            - Tokens
            - TokenListing
            - PaymentOrder
            - PaymentRefund
            - PaymentSettlement
            - PaymentTransaction
            - PaymentAddressUpdate
            - BalanceUpdateInfo
            - SuspendedToken
          description: |-

            The data type of the event.
            - `Transaction`: The transaction event data.
            - `TSSRequest`: The TSS request event data.
            - `Addresses`: The addresses event data.
            - `WalletInfo`: The wallet information event data.
            - `MPCVault`: The MPC vault event data.
            - `Chains`: The enabled chain event data.
            - `Tokens`: The enabled token event data.
            - `TokenListing`: The token listing event data.
                  
            - `PaymentOrder`: The payment order event data.
            - `PaymentRefund`: The payment refund event data.
            - `PaymentSettlement`: The payment settlement event data.
            - `PaymentTransaction`: The payment transaction event data.
            - `PaymentAddressUpdate`: The top-up address update event data.
            - `BalanceUpdateInfo`: The balance update event data.
            - `SuspendedToken`: The token suspension event data.
          example: Transaction
    WebhookEventData:
      oneOf:
        - $ref: '#/components/schemas/TransactionWebhookEventData'
        - $ref: '#/components/schemas/TSSRequestWebhookEventData'
        - $ref: '#/components/schemas/AddressesEventData'
        - $ref: '#/components/schemas/WalletInfoEventData'
        - $ref: '#/components/schemas/MPCVaultEventData'
        - $ref: '#/components/schemas/ChainsEventData'
        - $ref: '#/components/schemas/TokensEventData'
        - $ref: '#/components/schemas/TokenListingEventData'
        - $ref: '#/components/schemas/BalanceUpdateInfoEventData'
        - $ref: '#/components/schemas/SuspendedTokenEventData'
        - $ref: '#/components/schemas/PaymentOrderEventData'
        - $ref: '#/components/schemas/PaymentRefundEventData'
        - $ref: '#/components/schemas/PaymentSettlementEvent'
        - $ref: '#/components/schemas/PaymentTransactionEventData'
        - $ref: '#/components/schemas/PaymentAddressUpdateEventData'
      discriminator:
        propertyName: data_type
        mapping:
          Transaction: '#/components/schemas/TransactionWebhookEventData'
          TSSRequest: '#/components/schemas/TSSRequestWebhookEventData'
          Addresses: '#/components/schemas/AddressesEventData'
          WalletInfo: '#/components/schemas/WalletInfoEventData'
          MPCVault: '#/components/schemas/MPCVaultEventData'
          Chains: '#/components/schemas/ChainsEventData'
          Tokens: '#/components/schemas/TokensEventData'
          TokenListing: '#/components/schemas/TokenListingEventData'
          BalanceUpdateInfo: '#/components/schemas/BalanceUpdateInfoEventData'
          SuspendedToken: '#/components/schemas/SuspendedTokenEventData'
          PaymentOrder: '#/components/schemas/PaymentOrderEventData'
          PaymentRefund: '#/components/schemas/PaymentRefundEventData'
          PaymentSettlement: '#/components/schemas/PaymentSettlementEvent'
          PaymentTransaction: '#/components/schemas/PaymentTransactionEventData'
          PaymentAddressUpdate: '#/components/schemas/PaymentAddressUpdateEventData'
    TransactionWebhookEventData:
      title: Transaction
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/Transaction'
    TSSRequestWebhookEventData:
      title: TSSRequest
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/TSSRequest'
    AddressesEventData:
      title: Addresses
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - type: object
          properties:
            addresses:
              type: array
              description: A list of addresses.
              items:
                allOf:
                  - type: object
                    required:
                      - wallet_id
                    properties:
                      wallet_id:
                        type: string
                        description: The wallet ID.
                        example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                  - $ref: '#/components/schemas/AddressInfo'
    WalletInfoEventData:
      title: WalletInfo
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - type: object
          properties:
            wallet:
              $ref: '#/components/schemas/WalletInfo'
    MPCVaultEventData:
      title: MPCVault
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/MPCVault'
    ChainsEventData:
      title: Chains
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - type: object
          required:
            - chains
          properties:
            chains:
              type: array
              items:
                $ref: '#/components/schemas/ChainInfo'
              description: The enabled chains.
            wallet_type:
              $ref: '#/components/schemas/WalletType'
            wallet_subtypes:
              type: array
              items:
                $ref: '#/components/schemas/WalletSubtype'
    TokensEventData:
      title: Tokens
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - type: object
          required:
            - tokens
          properties:
            tokens:
              type: array
              items:
                $ref: '#/components/schemas/TokenInfo'
              description: The enabled tokens.
            wallet_type:
              $ref: '#/components/schemas/WalletType'
            wallet_subtypes:
              type: array
              items:
                $ref: '#/components/schemas/WalletSubtype'
    SuspendedTokenEventData:
      title: SuspendedToken
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - type: object
          required:
            - token_ids
            - operation_type
          properties:
            token_ids:
              type: string
              description: 'A list of token IDs, separated by comma.'
            operation_type:
              $ref: '#/components/schemas/SuspendedTokenOperationType'
    SuspendedTokenOperationType:
      type: string
      enum:
        - Added
        - Removed
      example: Added
      description: |
        The operation type applied to the list of suspended tokens:
        - Added: The token was added to the suspension list.
        - Removed: The token was removed from the suspension list.
    TokenListing:
      type: object
      description: Detailed information about a token listing request.
      required:
        - request_id
        - chain_id
        - wallet_type
        - wallet_subtype
        - contract_address
        - status
        - created_at
        - updated_at
      properties:
        request_id:
          type: string
          description: The unique identifier of the token listing request.
          example: 123e4567e89b12d3a456426614174000
        chain_id:
          type: string
          description: The ID of the blockchain where the token is deployed.
          example: ETH
        contract_address:
          type: string
          description: The token's contract address on the specified blockchain.
          example: '0x6B175474E89094C44Da98b954EedeAC495271d0F'
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        token:
          $ref: '#/components/schemas/TokenInfo'
        status:
          $ref: '#/components/schemas/TokenListingRequestStatus'
        source:
          $ref: '#/components/schemas/TokenListingRequestSource'
        feedback:
          type: string
          description: The feedback provided by Cobo when a token listing request is rejected.
          example: Token has been added to the system
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the request was created in Unix timestamp format, measured in milliseconds.'
          example: 1625097600000
        updated_timestamp:
          type: integer
          format: int64
          description: 'The time when the request was last updated in Unix timestamp format, measured in milliseconds.'
          example: 1625184000000
    TokenListingEventData:
      title: Token Listing Event Data
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/TokenListing'
    BalanceUpdateInfoEventData:
      title: BalanceUpdateInfo
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/BalanceUpdateInfo'
    PaymentOrderEventData:
      title: Pay-In Order
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/Order'
    PaymentRefundEventData:
      title: Refund
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/Refund'
    PaymentSettlementEvent:
      title: Settlement
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/Settlement'
    PaymentTransactionEventData:
      title: Payment Transaction
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - $ref: '#/components/schemas/Transaction'
        - type: object
          required:
            - acquiring_type
          properties:
            acquiring_type:
              $ref: '#/components/schemas/AcquiringType'
            order_id:
              type: string
              description: The pay-in order ID.
              example: O20250304-M1001-1001
            psp_order_code:
              type: string
              description: A unique reference code assigned by the developer to identify this order in their system.
              example: P20240201001
            payer_id:
              type: string
              description: A unique identifier assigned by Cobo to track and identify individual payers.
              example: P20250619T0310056d7aa
            custom_payer_id:
              type: string
              description: A unique identifier assigned by the developer to track and identify individual payers in their system.
              example: user_abc_10001
    PaymentAddressUpdateEventData:
      title: Top-Up Address Update
      allOf:
        - $ref: '#/components/schemas/WebhookEventDataType'
        - type: object
          required:
            - custom_payer_id
            - payer_id
            - chain
            - previous_address
            - updated_address
          properties:
            custom_payer_id:
              type: string
              description: A unique identifier assigned by the developer to track and identify individual payers in their system.
              example: user_abc_10001
            payer_id:
              type: string
              description: A unique identifier assigned by Cobo to track and identify individual payers.
              example: P20250619T0310056d7aa
            chain:
              type: string
              description: The chain ID.
              example: ETH
            previous_address:
              type: string
              description: The previous top-up address that was assigned to the payer.
              example: 0xAbC123...DEF
            updated_address:
              type: string
              description: The new top-up address that has been assigned to the payer.
              example: 0x789xyz...456
    WebhookEventType:
      type: string
      enum:
        - wallets.transaction.created
        - wallets.transaction.updated
        - wallets.transaction.failed
        - wallets.transaction.succeeded
        - wallets.mpc.tss_request.created
        - wallets.mpc.tss_request.updated
        - wallets.mpc.tss_request.failed
        - wallets.mpc.tss_request.succeeded
        - wallets.addresses.created
        - wallets.created
        - wallets.token_listing.failed
        - wallets.token_listing.succeeded
        - mpc_vaults.created
        - fee_station.transaction.created
        - fee_station.transaction.updated
        - fee_station.transaction.failed
        - fee_station.transaction.succeeded
        - wallet.token.enabled
        - wallet.chain.enabled
        - wallet.mpc.balance.updated
        - wallet.web3.balance.updated
        - wallet.token.disabled
        - wallet.chain.disabled
        - token.suspended.deposit
        - token.suspended.withdraw
        - payment.transaction.created
        - payment.transaction.late
        - payment.transaction.completed
        - payment.transaction.held
        - payment.status.updated
        - payment.refund.status.updated
        - payment.settlement.status.updated
        - payment.address.updated
      example: wallets.transaction.created
      description: 'The event type. To learn the trigger condition of each event type, refer to [Webhook event types and event data](https://www.cobo.com/developers/v2/guides/webhooks-callbacks/webhook-event-type).'
    WebhookEventStatus:
      type: string
      enum:
        - Success
        - Retrying
        - Failed
      example: Success
      description: |-
        The event status. Possible values include:
        - `Success`: The event has been delivered, and the webhook endpoint has responded to the event.
        - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, Cobo will retry delivering the event.
        - `Failed`: The event cannot be delivered and Cobo will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.
    WebhookEventLog:
      type: object
      description: The webhook event log.
      required:
        - id
        - created_timestamp
        - status
        - request_headers
        - request_body
        - success
      properties:
        id:
          description: The event log ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        created_timestamp:
          description: |
            The time when the event was triggered, in Unix timestamp format (milliseconds).
            - The value remains unchanged across retries.
            - The default webhook timeout is 2 seconds.
          type: integer
          format: int64
          example: 1701396866000
        request_headers:
          type: object
          description: The request headers of the webhook event.
          example: '{"Content-Type": "application/json"}'
        request_body:
          $ref: '#/components/schemas/WebhookEvent'
        response_body:
          type: string
          description: The response body of the webhook event.
        response_status_code:
          type: integer
          description: The response status code of the webhook event.
          example: 200
        response_time:
          type: integer
          description: 'The response time of the webhook event, in milliseconds.'
          example: 100
        success:
          type: boolean
          description: Whether the webhook event has been successfully delivered.
          example: true
        failure_reason:
          type: string
          description: The reason why the webhook event fails to be delivered.
          example: Connect Timeout
    WebhookEndpoint:
      type: object
      description: The information about a webhook endpoint.
      required:
        - url
        - subscribed_events
        - created_timestamp
        - id
        - status
      properties:
        url:
          description: The webhook endpoint URL.
          maxLength: 500
          type: string
          format: url
          example: 'https://example.com/webhook'
        subscribed_events:
          description: The event types subscribed by a webhook endpoint.
          items:
            $ref: '#/components/schemas/WebhookEventType'
          type: array
        created_timestamp:
          description: 'The time when the endpoint was registered, in Unix timestamp format, measured in seconds.'
          type: integer
          format: int64
          example: 1701396866000
        endpoint_id:
          description: The webhook endpoint ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        status:
          $ref: '#/components/schemas/WebhookEndpointStatus'
        description:
          description: The description of the webhook endpoint.
          type: string
          example: My webhook endpoint
    WebhookEndpointStatus:
      type: string
      enum:
        - STATUS_ACTIVE
        - STATUS_INACTIVE
        - STATUS_PENDING_ACTIVE
        - STATUS_PENDING_INACTIVE
        - STATUS_PENDING_UPDATE
        - STATUS_REJECT_ACTIVE
      example: STATUS_ACTIVE
      description: |
        The webhook endpoint status. Possible values include:
        - `STATUS_ACTIVE`: The endpoint is currently in use.
        - `STATUS_INACTIVE`: The endpoint has been revoked and can no longer receive webhook events.
        - `STATUS_PENDING_ACTIVE`: The request to create the endpoint is awaiting approval. After the approval, the endpoint will be available for use.
        - `STATUS_PENDING_INACTIVE`: The request to revoke the endpoint is awaiting approval. After the approval,the endpoint will no longer receive webhook events.
        - `STATUS_PENDING_UPDATE`: The request to update the endpoint is awaiting approval. After the approval, the endpoint will be updated.
        - `STATUS_REJECT_ACTIVE`: The request to create the endpoint has been rejected.
    StakingSource:
      oneOf:
        - $ref: '#/components/schemas/MpcStakeSource'
      discriminator:
        propertyName: source_type
        mapping:
          Org-Controlled: '#/components/schemas/MpcStakeSource'
    MpcStakeSource:
      title: Stake from MPC Wallets
      allOf:
        - $ref: '#/components/schemas/BaseStakeSource'
    BaseStakeSource:
      type: object
      description: The information about the staking source.
      required:
        - source_type
        - wallet_id
        - address
      properties:
        source_type:
          $ref: '#/components/schemas/StakeSourceType'
        wallet_id:
          type: string
          description: The wallet ID.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    StakeSourceType:
      type: string
      enum:
        - Org-Controlled
      example: Org-Controlled
      description: |
        The staking source type. Possible values include:
          - `Org-Controlled`: An MPC Wallet (Organization-Controlled Wallet).
    BaseStakeExtra:
      type: object
      description: The base information about a staking protocol.
      required:
        - pool_type
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
    BabylonStakeExtra:
      title: Babylon
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The staking information specific to the Babylon protocol.
          required:
            - finality_provider_public_key
            - stake_block_time
          properties:
            finality_provider_public_key:
              description: The public key of the finality provider.
              type: string
              pattern: '^[0-9a-fA-F]{64}$'
              example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            stake_block_time:
              description: The number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
              type: integer
              format: int64
              example: 2000
            auto_broadcast:
              description: |
                Whether to automatically broadcast the transaction. The default value is `true`.

                - `true`: Automatically broadcast the transaction.
                - `false`: The transaction will not be submitted to the blockchain automatically. You can call [Broadcast signed transactions](https://www.cobo.com/developers/v2/api-references/transactions/broadcast-signed-transactions) to broadcast the transaction to the blockchain, or retrieve the signed raw transaction data `raw_tx` by calling [Get transaction information](https://www.cobo.com/developers/v2/api-references/transactions/get-transaction-information) and broadcast it yourself.
              type: boolean
              example: false
            babylon_address:
              $ref: '#/components/schemas/StakingSource'
              description: The Babylon address to register for the staking.
    BabylonStakeEstimatedFee:
      title: Babylon Staking Fee
      type: object
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
        fee_type:
          $ref: '#/components/schemas/FeeType'
        fee_amount:
          type: string
          description: The amount of the estimated fee.
          example: '0.02'
        token_id:
          type: string
          description: The token ID of the staking fee.
          example: BTC
    CoreStakeExtra:
      title: CORE
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The staking information specific to the CORE staking protocol.
          required:
            - timelock
            - validator_address
            - reward_address
          properties:
            timelock:
              description: The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
              type: integer
              example: 1704067200
            change_address:
              description: 'The change address on the Bitcoin chain. If not provided, the source wallet''s address will be used as the change address.'
              type: string
              example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            validator_address:
              description: The validator's EVM address.
              type: string
              example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
            reward_address:
              description: The EVM address to receive staking rewards.
              type: string
              example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    EthStakeEstimatedFee:
      title: Ethereum Staking Fee
      type: object
      properties:
        pool_type:
          $ref: '#/components/schemas/StakingPoolType'
        fee:
          $ref: '#/components/schemas/EstimatedFee'
        validator_pubkeys:
          type: array
          items:
            type: string
          description: A list of public keys associated with the Ethereum validators for this staking operation.
          example:
            - '0x1234567890987654321012345678909876543210'
        core_btc_staking_address:
          type: string
          description: The P2WSH address generated for this staking operation (only applicable if the estimated fee is for CORE staking).
          example: bc1qcqj9k34vrvgmmvt85ym2ua79k2d22vcfxmuratakfm78chdqksnq5agezk
    EthStakeExtra:
      title: Ethereum Beacon Chain
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The staking information specific to the Ethereum Beacon Chain.
          required:
            - provider_name
          properties:
            provider_name:
              description: The name of the provider.
              type: string
              example: Stakefish
    EthUnstakeExtra:
      title: Ethereum Beacon Chain
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: Additional information required for unstaking from the Ethereum Beacon Chain.
          required:
            - validator_pubkeys
          properties:
            validator_pubkeys:
              description: A list of public keys identifying the validators to unstake from the Ethereum Beacon Chain.
              type: array
              items:
                type: string
              example:
                - '0x1234567890987654321012345678909876543210'
                - '0x1234567890987654321012345678909876543210'
    BabylonStakingExtra:
      title: Babylon
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The information about the Babylon protocol.
          required:
            - pos_chain
          properties:
            pos_chain:
              description: The Proof-of-Stake (PoS) chain.
              type: string
              example: Babylon Chain
            unlock_timestamp:
              description: 'The estimated time when the bitcoins will be unlocked, in Unix timestamp format, measured in milliseconds.'
              type: integer
              format: int64
              example: 1640995200000
            unlock_block_height:
              description: The block height at which the bitcoins will be unlocked.
              type: integer
              format: int64
              example: 871234
            stake_address:
              description: The address receiving the staked bitcoins.
              type: string
              example: tb1pgmpawe2rkrzuuflu8yw564lerfalhw8td36dha49yz4l99xvm3psteh393
            unbond_address:
              description: The address receiving the unlocked bitcoins.
              type: string
              example: tb1pzcn4hmsfq32vyfnckvrtyjhdh0cf2hsm2nr6m8034x4lnrx3ry4q2nyzqv
    EthStakingExtra:
      title: Ethereum Beacon Chain
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The information about the Ethereum Beacon Chain.
          required:
            - pos_chain
          properties:
            pos_chain:
              description: The Proof-of-Stake (PoS) chain.
              type: string
              example: Ethereum
            beacon_validators:
              description: The list of validator information.
              type: array
              items:
                type: object
                properties:
                  pubkey:
                    description: The public key of the validator.
                    type: string
                    example: '0x123456789abcdef'
                  status:
                    $ref: '#/components/schemas/AmountStatus'
                  apy:
                    description: The annual percentage yield (APY) of the validator.
                    type: number
                    example: 0.02
                  staked_amount:
                    description: The staked amount.
                    type: string
                    example: '100.00'
                  rewards_received:
                    description: The rewards received.
                    type: string
                    example: '10.00'
                  updated_timestamp:
                    description: 'The time when the validator''s status was last updated, in Unix timestamp format and measured in milliseconds.'
                    type: integer
                    format: int64
                    example: 1640995200000
    CoreStakingExtra:
      title: CORE
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The information about staking in the CORE staking protocol.
          required:
            - pos_chain
            - staker_address
            - validator_address
            - reward_address
            - timelock
          properties:
            pos_chain:
              description: The Proof-of-Stake (PoS) chain.
              type: string
              example: Ethereum
            staker_address:
              description: The staker's Bitcoin address.
              type: string
              example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            validator_address:
              description: The validator's EVM address.
              type: string
              example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
            reward_address:
              description: The EVM address to receive staking rewards.
              type: string
              example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
            timelock:
              description: The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
              type: integer
              example: 1704067200
    EigenLayerLstStakeExtra:
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The stake extra of LST on Eigenlayer.
          required:
            - id
          properties:
            operator:
              description: The operator's address.
              type: string
              example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
    EigenLayerNativeStakeExtra:
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The stake extra of eigen layer native ETH.
          properties:
            fee_recipient:
              description: 'The fee recipient address, if not provided the staker address will be used.'
              type: number
              format: int32
              example: 30
    BabylonStakingActivityDetailExtra:
      title: Babylon
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The staking information specific to the Babylon protocol.
          properties:
            finality_provider_public_key:
              description: The public key of the finality provider.
              type: string
              pattern: '^[0-9a-fA-F]{64}$'
              example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            stake_block_time:
              description: The number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
              type: integer
              format: int64
              example: 2000
            auto_broadcast:
              description: |
                Whether to automatically broadcast the transaction.

                - `true`: Automatically broadcast the transaction.
                - `false`: The transaction will not be submitted to the blockchain automatically. You can call [Broadcast signed transactions](https://www.cobo.com/developers/v2/api-references/transactions/broadcast-signed-transactions) to broadcast the transaction to the blockchain, or retrieve the signed raw transaction data `raw_tx` by calling [Get transaction information](https://www.cobo.com/developers/v2/api-references/transactions/get-transaction-information) and broadcast it yourself.
              type: boolean
              example: false
    EthStakingActivityDetailExtra:
      title: Ethereum Beacon Chain
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The staking information specific to the Ethereum Beacon Chain.
          properties:
            provider_name:
              description: The name of the provider.
              type: string
              example: Stakefish
            validator_pubkeys:
              description: A list of public keys associated with the Ethereum validators for this unstaking operation.
              type: array
              items:
                type: string
              example:
                - '0x1234567890987654321012345678909876543210'
                - '0x1234567890987654321012345678909876543210'
    CoreStakingActivityDetailExtra:
      title: CoreBTC
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The staking information specific to the CORE staking protocol.
          properties:
            timelock:
              description: The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
              type: integer
              example: 1704067200
            change_address:
              description: 'The change address on the Bitcoin chain. If not provided, the source wallet''s address will be used as the change address.'
              type: string
              example: bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh
            validator_address:
              description: The validator's EVM address.
              type: string
              example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
            reward_address:
              description: The EVM address to receive staking rewards.
              type: string
              example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    Activity:
      type: object
      description: The staking activity.
      required:
        - stake_id
        - pool_id
        - amount
        - status
        - created_at
        - updated_at
        - token_id
      properties:
        id:
          description: The activity ID.
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        initiator:
          description: The initiator of the activity.
          type: string
          example: steve@example.com
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        type:
          $ref: '#/components/schemas/ActivityType'
        wallet_id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: The staker's wallet ID.
        address:
          type: string
          example: '0xAbCdE123456789aBcDeF123456789aBcDeF12345'
          description: The staker's wallet address.
        pool_id:
          $ref: '#/components/schemas/StakingPoolId'
        token_id:
          type: string
          example: BTC
          description: The token ID.
        staking_id:
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The ID of the corresponding staking position.
        request_ids:
          type: array
          items:
            type: string
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The request IDs of the corresponding transactions of the activity.
        amount:
          type: string
          example: '100.00'
          description: The staking amount.
        transaction_ids:
          type: array
          items:
            type: string
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The IDs of the corresponding transactions of the activity.
        timeline:
          type: array
          items:
            $ref: '#/components/schemas/ActivityTimeline'
          description: The timeline of the activity.
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        status:
          $ref: '#/components/schemas/ActivityStatus'
        extra:
          oneOf:
            - $ref: '#/components/schemas/BabylonStakingActivityDetailExtra'
            - $ref: '#/components/schemas/EthStakingActivityDetailExtra'
            - $ref: '#/components/schemas/CoreStakingActivityDetailExtra'
          discriminator:
            propertyName: pool_type
            mapping:
              Babylon: '#/components/schemas/BabylonStakingActivityDetailExtra'
              ETHBeacon: '#/components/schemas/EthStakingActivityDetailExtra'
              CoreBTC: '#/components/schemas/CoreStakingActivityDetailExtra'
        created_timestamp:
          description: The time when the activity was created.
          type: integer
          format: int64
          example: 1640995200000
        updated_timestamp:
          description: The time when the activity was last updated.
          type: integer
          format: int64
          example: 1640995200000
    ActivityAction:
      type: string
      enum:
        - Submitted
        - BTCConfirmation
        - BabylonConfirmation
        - DepositETH
        - ClaimRewards
        - ActivateValidator
        - UnstakeETH
        - ApproveUSDC
        - ConvertToUSDS
        - ApproveUSDS
        - DepositUSDS
        - WithdrawUSDS
        - ConvertToUSDC
      example: Submitted
      description: |
        The specific action taken within an activity. Possible values include:
        - `Submitted`: Submit the staking, unstaking, or withdrawal request.
        - `BTCConfirmation`: The Bitcoin chain confirms the request.
        - `BabylonConfirmation`: The Babylon protocol confirms the request.
        - `DepositETH`: Deposit ETH to the validator to start staking.
        - `ClaimRewards`: Claim the rewards from the validator.
        - `ActivateValidator`: Activate the validator to start staking.
        - `UnstakeETH`: Unstake ETH from the validator.
        - `ApproveUSDC`: Grant permission for the protocol to use your USDC.
        - `ConvertToUSDS`: Convert your USDC to USDS.
        - `ApproveUSDS`: Grant permission for the protocol to use your USDS.
        - `DepositUSDS`: Stake the USDS with the validator.
        - `WithdrawUSDS`: Withdraw the USDS from the protocol.
        - `ConvertToUSDC`: Convert USDS back to USDC.
    ActivityTimeline:
      description: The timeline of the staking activity.
      type: object
      required:
        - action
      properties:
        action:
          $ref: '#/components/schemas/ActivityAction'
        status:
          type: string
          example: success
          description: |
            The status of the action. Possible values include:
              - `Success`: The action is successfully completed.
              - `Processing`: The action is being processed.
              - `Failed`: The action has failed.
        timestamp:
          type: integer
          format: int64
          example: 1640995200000
          description: |
            The time when the action took place, in Unix timestamp format, measured in milliseconds. 
            - For the `Submitted` action, `timestamp` represents the time the staking, unstaking, or withdrawal request was created. 
            - For the `BTCConfirmation` action, `timestamp` represents the time when the request was confirmed on the Bitcoin chain, or when the confirmation failed.
            - For the `BabylonConfirmation` action, `timestamp` represents the time when the request was confirmed by the Babylon protocol, or when the confirmation failed.
        transaction_id:
          type: string
          description: The ID of the corresponding transaction.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
    ActivityInitiator:
      type: object
      properties:
        app_initiator:
          type: string
          example: steve@example.com
          description: 'The initiator of the staking activity. If you do not specify this property, the WaaS service will automatically designate the API key as the initiator.'
    CreateStakeActivity:
      type: object
      required:
        - amount
        - fee
        - wallet_id
        - address
        - pool_id
      properties:
        request_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
        source:
          $ref: '#/components/schemas/StakingSource'
        pool_id:
          $ref: '#/components/schemas/StakingPoolId'
        amount:
          type: string
          example: '100.00'
          description: The amount to stake.
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        extra:
          oneOf:
            - $ref: '#/components/schemas/BabylonStakeExtra'
            - $ref: '#/components/schemas/EthStakeExtra'
            - $ref: '#/components/schemas/CoreStakeExtra'
          discriminator:
            propertyName: pool_type
            mapping:
              Babylon: '#/components/schemas/BabylonStakeExtra'
              ETHBeacon: '#/components/schemas/EthStakeExtra'
              CoreBTC: '#/components/schemas/CoreStakeExtra'
    CreateWithdrawActivity:
      type: object
      required:
        - staking_id
        - fee
      properties:
        request_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
        staking_id:
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The ID of the corresponding staking position.
        amount:
          type: string
          example: '100.00'
          description: The amount to withdraw.
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
    CreateUnstakeActivity:
      type: object
      required:
        - staking_id
      properties:
        request_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
        staking_id:
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The ID of the corresponding staking position.
        amount:
          type: string
          example: '100.00'
          description: 'The amount to unstake. For the Babylon protocol, this property is ignored.'
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        extra:
          description: Additional protocol-specific information required for the unstaking operation. The required fields vary depending on the staking protocol.
          oneOf:
            - $ref: '#/components/schemas/EthUnstakeExtra'
          discriminator:
            propertyName: pool_type
            mapping:
              ETHBeacon: '#/components/schemas/EthUnstakeExtra'
    CreateClaimActivity:
      type: object
      required:
        - staking_id
      properties:
        request_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The request ID that is used to track a request. The request ID is provided by you and must be unique within your organization.
        staking_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: 'The ID of the staking position. You can retrieve a list of staking positions by calling [List staking positions](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions).'
        fee:
          $ref: '#/components/schemas/TransactionRequestFee'
    ActivityStatus:
      type: string
      enum:
        - Success
        - Processing
        - Failed
      example: Success
      description: |
        The status of the staking activity. Possible values include:
        - `Success`: The activity is successfully completed.
        - `Processing`: The activity is being processed.
        - `Failed`: The activity has failed.
    ActivityType:
      type: string
      enum:
        - Stake
        - Unstake
        - Withdraw
        - Claim
      example: Stake
      description: |
        The type of the staking activity. Possible values include:
        - `Stake`: Stake tokens.
        - `Unstake`: Unstake tokens. Unstaked tokens are still in the staking protocol.
        - `Withdraw`: Withdraw tokens from the staking protocol to your wallet.
        - `Claim`: Claim rewards from the staking protocol.
    AmountStatus:
      type: string
      enum:
        - StakeInProgress
        - Active
        - Rejected
        - LimitExceeded
        - Invalid
        - UnstakeInProgress
        - Withdrawable
        - WithdrawInProgress
        - Closed
      example: Active
      description: |
        The status of the staking amount. Possible values include:

        - `StakeInProgress`: The staking request is submitted and is waiting to be confirmed by the staking protocol.
        - `Active`: The amount has been staked.
        - `Rejected`: The staking request has been rejected because the signer refuses to sign the transaction.
        - `LimitExceeded`: The total staking cap of the staking protocol has been reached.
        - `Invalid`: The staking request is invalid. This is often due to the failure to broadcast the transaction.
        - `UnstakeInProgress`: The unstaking request is submitted and is waiting to be confirmed by the staking protocol.
        - `Withdrawable`: The tokens have been unstaked and are ready to be withdrawn.
        - `WithdrawInProgress`: The withdrawal request is submitted and is waiting to be confirmed on the chain network.
        - `Closed`: The staking position is closed.
    AmountDetails:
      type: array
      description: The details about the staking amount.
      items:
        type: object
        required:
          - status
          - amount
        properties:
          status:
            $ref: '#/components/schemas/AmountStatus'
          amount:
            type: string
            example: '100.00'
            description: The staking amount.
    BabylonValidator:
      allOf:
        - $ref: '#/components/schemas/BaseStakeExtra'
        - type: object
          description: The information about the Babylon validator.
          required:
            - name
          properties:
            icon_url:
              description: The URL of the validator's icon.
              type: string
              format: url
              example: 'https://example.com/icon.png'
            name:
              description: The validator's name.
              type: string
              example: Cobo
            priority:
              description: This property can be ignored.
              type: integer
              example: 0
            public_key:
              description: The public key of the validator.
              type: string
              example: eca1b104dce16c30705f4147a9c4a373ac88646c5d1bcda6a89c018940cb96a0
            commission_rate:
              description: The commission rate of the validator.
              type: number
              format: float
              example: 0.1
            supported_pos_chains:
              description: A list of supported Proof-of-Stake (PoS) chains.
              type: array
              items:
                type: string
                enum:
                  - Babylon
                  - Cosmos
                  - Ethereum
              example:
                - Babylon
                - Cosmos
                - Ethereum
    EigenlayerValidator:
      type: object
      description: The EigenLayer validator info.
      required:
        - name
        - address
        - icon_url
      properties:
        icon_url:
          description: The URL of the validator's icon.
          type: string
          format: url
          example: 'https://example.com/icon.png'
        name:
          description: The name of validator.
          type: string
          example: Cobo
        priority:
          description: The priority of validator.
          type: integer
          example: 0
        address:
          description: The address of validator.
          type: string
          example: 1Lru9ewXCbVLQAetCLDgFoo6465kpGKbGV
        commission_rate:
          description: The commission of validator.
          type: number
          format: float
          example: 0.1
    PoolDetails:
      allOf:
        - $ref: '#/components/schemas/PoolSummary'
        - type: object
          description: The detailed information about the staking protocol.
          required:
            - validators_info
          properties:
            pool_type:
              $ref: '#/components/schemas/StakingPoolType'
            min_amount:
              description: The minimum amount that can be staked in one staking request.
              type: string
              example: '0.01'
            max_amount:
              description: The maximum amount that can be staked in one staking request.
              type: string
              example: '100.00'
            min_stake_period:
              description: 'The minimum staking period, in days.'
              type: integer
              format: int32
              example: 30
            max_stake_period:
              description: 'The maximum staking period, in days.'
              type: integer
              format: int32
              example: 1000
            min_stake_blocks:
              description: The minimum block number. A block number indicates the number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
              type: integer
              format: int64
              example: 100
            max_stake_blocks:
              description: The maximum block number. A block number indicates the number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
              type: integer
              format: int64
              example: 1000
            validators_info:
              description: A list of available validators.
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/BabylonValidator'
                discriminator:
                  propertyName: pool_type
                  mapping:
                    Babylon: '#/components/schemas/BabylonValidator'
    PoolSummary:
      type: object
      description: The basic information of the staking pool.
      required:
        - id
        - chain_id
        - protocol
        - protocol_icon_url
        - token_id
        - est_apr
        - supported_wallet_types
        - supported_wallet_subtypes
      properties:
        id:
          description: The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token.
          type: string
          example: babylon_btc
        chain_id:
          description: The chain ID.
          type: string
          example: Bitcoin
        protocol:
          description: The name of the protocol.
          type: string
          example: Babylon
        protocol_icon_url:
          description: The URL of the protocol's icon.
          type: string
          format: url
          example: 'https://example.com/icon.png'
        supported_wallet_types:
          description: |
            The wallet type. Possible values include:

            - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

            - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

            - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

            - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
          type: array
          items:
            $ref: '#/components/schemas/WalletType'
          example:
            - MPC
        supported_wallet_subtypes:
          description: |
            The wallet subtype. Possible values include:
            - `Asset`: Custodial Wallets (Asset Wallets).
            - `Web3`: Custodial Wallets (Web3  Wallets).
            - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
            - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
            - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
            - `Main`: Exchange Wallets (Main Account).
            - `Sub`: Exchange Wallets (Sub Account).
          type: array
          items:
            $ref: '#/components/schemas/WalletSubtype'
          example:
            - Org-Controlled
        token_id:
          description: The token ID.
          type: string
          example: BTC
        est_apr:
          description: The estimated annual percentage rate (APR).
          type: number
          format: float
          example: 0.05
    Stakings:
      type: object
      description: The information about a staking position.
      required:
        - id
        - wallet_id
        - address
        - pool_id
        - token_id
        - amounts
        - validator_info
        - created_timestamp
        - updated_timestamp
      properties:
        id:
          description: The ID of the staking position.
          type: string
          example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
        wallet_id:
          description: The staker's wallet ID.
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
        address:
          description: The staker's wallet address.
          type: string
          example: '0xAbCdE123456789aBcDeF123456789aBcDeF12345'
        amounts:
          $ref: '#/components/schemas/AmountDetails'
        pool_id:
          $ref: '#/components/schemas/StakingPoolId'
        token_id:
          description: The token ID.
          type: string
          example: BTC
        rewards_info:
          description: The information about the staking rewards.
          type: object
          example: {}
        created_timestamp:
          description: The time when the staking position was created.
          type: integer
          format: int64
          example: 1640995200000
        updated_timestamp:
          description: The time when the staking position was last updated.
          type: integer
          format: int64
          example: 1640995200000
        validator_info:
          $ref: '#/components/schemas/BabylonValidator'
        extra:
          oneOf:
            - $ref: '#/components/schemas/BabylonStakingExtra'
            - $ref: '#/components/schemas/EthStakingExtra'
            - $ref: '#/components/schemas/CoreStakingExtra'
          discriminator:
            propertyName: pool_type
            mapping:
              Babylon: '#/components/schemas/BabylonStakingExtra'
              ETHBeacon: '#/components/schemas/EthStakingExtra'
              CoreBTC: '#/components/schemas/CoreStakingExtra'
    StakingPoolType:
      type: string
      enum:
        - Babylon
        - ETHBeacon
        - CoreBTC
        - SkyFarm
        - BitHive
        - BERABeacon
        - BeraChainBGT
      example: Babylon
      description: |
        The type of the staking pool. Possible values are:
        - `Babylon`: Babylon staking pool
        - `ETHBeacon`: Ethereum Beacon Chain staking pool
        - `CoreBTC`: Core BTC staking pool
        - `SkyFarm`: SKY farm staking pool
        - `BitHive`: BitHive staking pool
        - `BERABeacon`: BERA Beacon Chain staking pool
        - `BeraChainBGT`: Bera Chain BGT staking pool
    StakingPoolId:
      type: string
      enum:
        - babylon_btc_signet
        - babylon_btc
        - beacon_eth
        - beacon_eth_holesky
        - core_btc
        - core_xtn
        - sky_farm_eth_usdc
        - bithive_signet
        - bithive
        - beacon_bera
        - beacon_bera_testnet
        - berachain_bgt
        - berachain_bgt_testnet
      example: babylon_btc_signet
      description: 'The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token. Currently, `berachain_bgt` and `berachain_bgt_testnet` are not supported.'
    BaseEstimateStakingFee:
      type: object
      required:
        - activity_type
      properties:
        activity_type:
          $ref: '#/components/schemas/ActivityType'
    EstimateStakeFee:
      title: Staking fee
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - $ref: '#/components/schemas/CreateStakeActivity'
    EstimateUnstakeFee:
      title: Unstaking fee
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - $ref: '#/components/schemas/CreateUnstakeActivity'
    EstimateWithdrawFee:
      title: Withdrawal fee
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - $ref: '#/components/schemas/CreateWithdrawActivity'
    EstimateClaimFee:
      title: Claim fee
      allOf:
        - $ref: '#/components/schemas/BaseEstimateStakingFee'
        - type: object
          properties:
            staking_id:
              type: string
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
              description: 'The ID of the staking position. You can retrieve a list of staking positions by calling [List staking positions](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions).'
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
    BabylonRegistrationStatus:
      type: string
      enum:
        - Registered
        - Unregistered
        - Registering
      example: Registered
      description: |
        The status of Babylon airdrop or staking registration. Possible values are:
        - `Registered`: Registered for Babylon airdrop or staking.
        - `Unregistered`: Not registered for any Babylon airdrop or staking.
        - `Registering`: Requesting to register for Babylon airdrop or staking.
    BabylonRegistrationRequestStatus:
      type: string
      enum:
        - Processing
        - Completed
        - Failed
      example: Processing
      description: |
        The status of a Babylon airdrop or Babylon Phase-2 registration request. Possible values include:
        - `Processing`: The registration request is being processed.
        - `Completed`: The registration has been completed.
        - `Failed`: The registration failed.
    BabylonEligibleAirdrop:
      type: object
      description: The babylon airdrop eligibility.
      properties:
        btc_address:
          $ref: '#/components/schemas/StakingSource'
          description: The Bitcoin (BTC) address used for staking.
        babylon_address:
          $ref: '#/components/schemas/StakingSource'
          description: The Babylon address used to receive the airdrop. This property value is `null` if the BTC address is not registered for the Babylon airdrop.
        babylon_points:
          type: string
          example: '1000.50'
          description: The current Babylon points balance accumulated by the BTC address.
        airdrop_amount:
          type: string
          example: '500.25'
          description: The estimated airdrop amount based on the current Babylon points balance.
        status:
          $ref: '#/components/schemas/BabylonRegistrationStatus'
        pop:
          $ref: '#/components/schemas/BabylonAirdropPop'
    BabylonAirdropRegistration:
      type: object
      description: The details of a Babylon airdrop registration.
      properties:
        id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: 'The registration ID, a unique identifier for tracking the airdrop registration.'
        status:
          $ref: '#/components/schemas/BabylonRegistrationRequestStatus'
        btc_address:
          $ref: '#/components/schemas/StakingSource'
          description: The Bitcoin (BTC) address used for staking.
        babylon_address:
          $ref: '#/components/schemas/StakingSource'
          description: The Babylon address used for receiving the Babylon airdrop.
        airdrop_amount:
          type: string
          example: '500.25'
          description: The actual airdrop amount allocated for this BTC address.
        error_message:
          type: string
          example: User rejected
          description: The detailed error message if the registration failed.
        created_timestamp:
          type: integer
          format: int64
          example: 1677587333000
          description: 'The time when the registration was created, in Unix timestamp format, measured in milliseconds.'
        updated_timestamp:
          type: integer
          format: int64
          example: 1677587400000
          description: 'The time when the registration was updated, in Unix timestamp format, measured in milliseconds.'
    BabylonStakingRegistration:
      type: object
      description: The details of aBabylon Phase-2 registration.
      properties:
        id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: 'The registration ID, a unique identifier for tracking the staking registration.'
        staking_id:
          type: string
          example: 3f2840ce-44eb-450b-aa81-d3f84b772efb
          description: The ID of the Phase-1 BTC staking position.
        babylon_address:
          $ref: '#/components/schemas/StakingSource'
          description: The Babylon address used for receive the BABY rewards.
        btc_address:
          $ref: '#/components/schemas/StakingSource'
          description: The BTC address associated with the staking position.
        status:
          $ref: '#/components/schemas/BabylonRegistrationRequestStatus'
        staked_amount:
          type: string
          example: '500.25'
          description: The amount of BTC that is staked.
        error_message:
          type: string
          example: User rejected
          description: The error message if the Babylon Phase-2 registration request failed.
        created_timestamp:
          type: integer
          format: int64
          example: 1677587333000
          description: 'The time when the registration was created, in Unix timestamp format, measured in milliseconds.'
        updated_timestamp:
          type: integer
          format: int64
          example: 1677587400000
          description: 'The time when the registration was updated, in Unix timestamp format, measured in milliseconds.'
    BabylonAirdropPop:
      type: object
      required:
        - baby_address
        - btc_address
        - btc_public_key
        - btc_sign_baby
        - baby_sign_btc
        - baby_public_key
      description: Proof of Participation (PoP) details used for airdrop registration.
      properties:
        baby_address:
          type: string
          example: bbn1xjz8fs9vkmefdqaxan5kv2d09vmwzru7jhy424
          description: The Babylon (BABY) address used to receive BABY rewards.
        btc_address:
          type: string
          example: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
          description: The Bitcoin (BTC) address used for staking.
        btc_public_key:
          type: string
          example: 79f71003589158b2579345540b08bbc74974c49dd5e0782e31d0de674540d513
          description: 'The public key corresponding to the `btc_address`, represented in hex format.'
        btc_sign_baby:
          type: string
          example: AkcwRAIgcrI2IdD2JSFVIeQmtRA3wFjjiy+qEvqbX57rn6xvWWECIDis7vHSJeR8X91uMQReG0pPQFFLpeM0ga4BW+Tt2V54ASEDefcQA1iRWLJXk0VUCwi7x0l0xJ3V4HguMdDeZ0VA1RM=
          description: A BTC signature that signs the `baby_address`.
        baby_sign_btc:
          type: string
          example: FnYTm9ZbhJZY202R9YBkjGEJqeJ/n5McZBpGH38P2pt0YRcjwOh8XgoeVQTU9So7/RHVHHdKNB09DVmtQJ7xtw==
          description: A BABY signature that signs the `btc_address`.
        baby_public_key:
          type: string
          example: Asezdqkvh+kLbuD75DirSwi/QFbJjFe2SquiivMaPS65
          description: 'The public key corresponding to the `baby_address`, represented in base64 format.'
    AddressBook:
      type: object
      description: The information of an address book entry.
      required:
        - org_id
        - entry_id
        - address
        - label
      properties:
        org_id:
          type: string
          format: uuid
          description: The organization ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        entry_id:
          type: string
          format: uuid
          description: The entry ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address.
          example: '0x570f02f2b5fcf3ac56fb6703bd7039c0c9e33460'
        memo:
          type: string
          description: The memo.
          example: 9d4773eb
        wallet_name:
          type: string
          description: The wallet name.
          example: Example Wallet
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        label:
          type: string
          description: The address label.
          example: test
        chain_ids:
          type: array
          description: A list of chain IDs.
          items:
            type: string
            example: ETH
        email:
          type: string
          description: The email of the address owner.
          example: help@cobo.com
        encoding:
          $ref: '#/components/schemas/AddressEncoding'
    TravelRuleDepositExchangesOrVASP:
      type: object
      title: VASPs (Deposit)
      description: Required information when depositing from an exchange or other virtual asset service providers (VASP).
      required:
        - destination_wallet_type
        - vendor_code
        - vendor_vasp_id
        - entity_info
      properties:
        destination_wallet_type:
          $ref: '#/components/schemas/DestinationWalletType'
        vendor_code:
          type: string
          description: The vendor code of the VASP.
          example: NB
        vendor_vasp_id:
          type: string
          description: The unique identifier of the VASP.
          example: 'did:ethr:0x45fca8109a8d2ce93e37f79f0acbb16f4a91f4c5'
        vendor_vasp_name:
          type: string
          description: The vendor name. Use this field to specify the name of a vendor not listed.
          example: Vendor A
        entity_info:
          oneOf:
            - $ref: '#/components/schemas/TravelRuleDepositLegalEntity'
            - $ref: '#/components/schemas/TravelRuleDepositNaturalEntity'
          discriminator:
            propertyName: selected_entity_type
            mapping:
              LEGAL: '#/components/schemas/TravelRuleDepositLegalEntity'
              NATURAL: '#/components/schemas/TravelRuleDepositNaturalEntity'
    TravelRuleDepositLegalEntity:
      type: object
      title: Legal Entity (Deposit)
      description: The required information of a legal entity.
      required:
        - selected_entity_type
        - legal_name
      properties:
        selected_entity_type:
          type: string
          enum:
            - LEGAL
            - NATURAL
          description: |
            The entity type. Possible values include:
            - `LEGAL`: Legal entity.
            - `NATURAL`: Natural person.
          example: LEGAL
        legal_name:
          type: string
          description: The legal name of the entity.
          example: Company ABC Ltd.
        date_of_incorporation:
          type: string
          format: date
          description: |
            The date of incorporation of the entity. This field is required when either of the following conditions is met:
            - `is_threshold_reached` is `true` in the response of the [Retrieve transaction limitations](https://www.cobo.com/developers/v2/api-references/travelrule/retrieve-transaction-limitations) operation.
            - `selected_entity_type` is `LEGAL`.
          example: '2010-05-20'
        place_of_incorporation:
          type: string
          description: |
            The place of incorporation of the entity. This field is required when either of the following conditions is met:
            - `is_threshold_reached` is `true` in the response of the [Retrieve transaction limitations](https://www.cobo.com/developers/v2/api-references/travelrule/retrieve-transaction-limitations) operation.
            - `selected_entity_type` is `LEGAL`.
          example: 'City, Country'
    TravelRuleDepositNaturalEntity:
      type: object
      title: Natural Person (Deposit)
      description: The required information of a natural person.
      required:
        - selected_entity_type
        - first_name
        - last_name
      properties:
        selected_entity_type:
          type: string
          enum:
            - LEGAL
            - NATURAL
          description: |
            Specifies the type of entity associated with the transaction.
            - `LEGAL`: Legal entity.
            - `NATURAL`: Natural person.
          example: NATURAL
        first_name:
          type: string
          description: The first name of the natural person.
          example: John
        last_name:
          type: string
          description: The last name of the natural person.
          example: Doe
        date_of_birth:
          type: string
          format: date
          description: |
            The date of birth of the natural person. This field is required when either of the following conditions is met:
            - `is_threshold_reached` is `true` in the response of the [Retrieve transaction limitations](https://www.cobo.com/developers/v2/api-references/travelrule/retrieve-transaction-limitations) operation.
            - `selected_entity_type` is `NATURAL`.
          example: '1980-01-01'
        place_of_birth:
          type: string
          description: |
            The place of birth of the natural person. This field is required when either of the following conditions is met:
            - `is_threshold_reached` is `true` in the response of the [Retrieve transaction limitations](https://www.cobo.com/developers/v2/api-references/travelrule/retrieve-transaction-limitations) operation.
            - `selected_entity_type` is `NATURAL`.
          example: 'City, Country'
    TravelRuleDepositRequest:
      type: object
      required:
        - transaction_id
        - travel_rule_info
      properties:
        transaction_id:
          type: string
          description: The transaction ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        travel_rule_info:
          oneOf:
            - $ref: '#/components/schemas/TravelRuleDepositExchangesOrVASP'
            - $ref: '#/components/schemas/SelfCustodyWallet'
          discriminator:
            propertyName: destination_wallet_type
            mapping:
              EXCHANGES_OR_VASP: '#/components/schemas/TravelRuleDepositExchangesOrVASP'
              SELF_CUSTODY_WALLET: '#/components/schemas/SelfCustodyWallet'
    SelfCustodyWallet:
      type: object
      title: Self-Custody Wallet
      description: Required information when depositing from or withdrawing to a self-custody wallet.
      required:
        - destination_wallet_type
        - self_custody_wallet_challenge
        - self_custody_wallet_address
        - self_custody_wallet_sign
      properties:
        destination_wallet_type:
          $ref: '#/components/schemas/DestinationWalletType'
        self_custody_wallet_challenge:
          type: string
          description: The message obtained from the `Retrieve transaction limitations` operation. This message is used to verify wallet ownership through signing.
          example: challenge_token_abc123
        self_custody_wallet_address:
          type: string
          description: The address of the self-custody wallet.
          example: '0x1234567890abcdef1234567890abcdef12345678'
        self_custody_wallet_sign:
          type: string
          description: The signature created by signing the challenge message with the wallet's private key.
          example: '0xf0a0ca69dd3afc57235c72aba3ff1f1144ee5409aeec013a9b17cdb58d0185a66a525945bfbd66e87bf0503eb0b83bf90cb973a8cbb730d19dc032e00dfe393a1c'
    DestinationWalletType:
      type: string
      enum:
        - EXCHANGES_OR_VASP
        - SELF_CUSTODY_WALLET
      description: |
        The wallet type. Possible values include:
          - `EXCHANGES_OR_VASP`: Exchanges or other virtual asset service providers (VASP)
          - `SELF_CUSTODY_WALLET`: Self-custody wallets
      example: EXCHANGES_OR_VASP
    SelectedEntityType:
      type: string
      enum:
        - LEGAL
        - NATURAL
      description: |
        Specifies the entity type. This must be `LEGAL`.
          - `LEGAL`: Legal entity.
          - `NATURAL`: Natural person.
      example: LEGAL
    Vasp:
      type: object
      description: The information of a virtual asset service provider (VASP).
      required:
        - name
        - vendor_code
        - vendor_vasp_id
      properties:
        name:
          type: string
          format: name
          description: The VASP name.
          example: ManyAges
        vendor_code:
          type: string
          description: The vendor code of the VASP.
          example: NB
        vendor_vasp_id:
          type: string
          description: The VASP ID.
          example: 'did:ethr:0x34414c8d5c8ed6f242aa6558ecb500283bab10f4'
    TravelRuleWithdrawExchangesOrVASP:
      type: object
      title: VASPs (Withdrawal)
      description: Required information when withdrawing tokens to an exchange or other virtual asset service providers (VASP).
      required:
        - destination_wallet_type
        - vendor_code
        - vendor_vasp_id
        - entity_info
      properties:
        destination_wallet_type:
          $ref: '#/components/schemas/DestinationWalletType'
        vendor_code:
          type: string
          description: The vendor code of the exchange or virtual asset service provider (VASP).
          example: NB
        vendor_vasp_id:
          type: string
          description: The unique identifier of the VASP.
          example: 'did:ethr:0x45fca8109a8d2ce93e37f79f0acbb16f4a91f4c5'
        entity_info:
          oneOf:
            - $ref: '#/components/schemas/TravelRuleWithdrawLegalEntity'
            - $ref: '#/components/schemas/TravelRuleWithdrawNaturalEntity'
          discriminator:
            propertyName: selected_entity_type
            mapping:
              LEGAL: '#/components/schemas/TravelRuleWithdrawLegalEntity'
              NATURAL: '#/components/schemas/TravelRuleWithdrawNaturalEntity'
    TravelRuleWithdrawLegalEntity:
      type: object
      title: Legal Entity (Withdrawal)
      description: The required information of a legal entity.
      required:
        - selected_entity_type
        - legal_name
      properties:
        selected_entity_type:
          $ref: '#/components/schemas/SelectedEntityType'
        legal_name:
          type: string
          description: The legal name of the entity.
          example: Company ABC Ltd.
        date_of_incorporation:
          type: string
          format: date
          description: The date of incorporation of the entity.
          example: '2010-05-20'
        place_of_incorporation:
          type: string
          description: The place of incorporation of the entity.
          example: 'City, Country'
    TravelRuleWithdrawNaturalEntity:
      type: object
      title: Natural Person (Withdrawal)
      description: The required information of a natural person.
      required:
        - selected_entity_type
        - first_name
        - last_name
      properties:
        selected_entity_type:
          $ref: '#/components/schemas/SelectedEntityType'
        first_name:
          type: string
          description: The first name of the natural person.
          example: John
        last_name:
          type: string
          description: The last name of the natural person.
          example: Doe
        date_of_birth:
          type: string
          format: date
          description: The date of birth of the natural person.
          example: '1980-01-01'
        place_of_birth:
          type: string
          description: The place of birth of the natural person.
          example: 'City, Country'
    TravelRuleWithdrawRequest:
      type: object
      required:
        - transaction_id
        - travel_rule_info
      properties:
        transaction_id:
          type: string
          description: The transaction ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        travel_rule_info:
          oneOf:
            - $ref: '#/components/schemas/SelfCustodyWallet'
            - $ref: '#/components/schemas/TravelRuleWithdrawExchangesOrVASP'
          discriminator:
            propertyName: destination_wallet_type
            mapping:
              EXCHANGES_OR_VASP: '#/components/schemas/TravelRuleWithdrawExchangesOrVASP'
              SELF_CUSTODY_WALLET: '#/components/schemas/SelfCustodyWallet'
    ApiLogSummary:
      type: object
      description: The information about an API log.
      required:
        - api_request_uuid
        - api_method
        - api_endpoint
        - request_timestamp
        - status_code
      properties:
        log_id:
          type: string
          description: 'A unique identifier for the API log, used for tracking.'
          example: 924c461fae1047c3befabb50fe1633f9
        api_method:
          type: string
          description: The HTTP method used for the API request.
          example: GET
        api_endpoint:
          type: string
          description: The endpoint of the API request.
          example: /v2/wallets/asset
        request_timestamp:
          type: integer
          format: int64
          description: 'The time when the API request was created, in Unix timestamp format, measured in milliseconds.'
          example: 1640918000000
        status_code:
          type: integer
          description: The HTTP status code returned by the API request.
          example: 200
    ApiLogDetails:
      type: object
      description: The information about an API log.
      required:
        - log_id
        - api_method
        - api_endpoint
        - status_code
        - ip_address
        - request_timestamp
        - api_key
        - response_body
        - query_params
        - request_body
      properties:
        log_id:
          type: string
          description: 'A unique identifier for the API log, used for tracking.'
          example: 924c461fae1047c3befabb50fe1633f9
        api_method:
          type: string
          example: GET
          description: The HTTP method used for the API request.
        api_endpoint:
          type: string
          example: /v2/wallets/asset
          description: The endpoint of the API request.
        status_code:
          type: integer
          example: 200
          description: The HTTP status code returned by the API request.
        ip_address:
          type: string
          example: 127.0.0.1
          description: The client's IP address that made the API request.
        request_timestamp:
          type: integer
          format: int64
          description: 'The time when the API request was created, in Unix timestamp format, measured in milliseconds.'
          example: 1640918000000
        api_key:
          type: string
          example: 8926ce37029ed650eb7aee66999658cad2653dbc2dbc758c04fc4dc937b47f25
          description: 'The API key used to call the API. For more details, refer to [API key](https://www.cobo.com/developers/v2/guides/overview/cobo-auth#api-key).'
        response_body:
          type: string
          example: '{"success":true}'
          description: The response body of the API request.
        query_params:
          type: string
          example: '{"asset":"eth","amount":100}'
          description: The query parameters of the API request.
        request_body:
          type: string
          example: '{"asset":"eth","amount":100}'
          description: The request body of the API request.
    RoleScopes:
      type: object
      required:
        - role_name
        - scopes
      properties:
        role_name:
          type: string
          description: The user role associated with this API key.
          example: API_Spender
        scopes:
          $ref: '#/components/schemas/Scopes'
    Scopes:
      type: object
      description: The wallet scopes associated with this API key.
      properties:
        wallet_types:
          type: array
          description: |
            The list of wallet types that this API key can access. Possible values include:
              - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)
              - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)
              - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)
              - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
          items:
            $ref: '#/components/schemas/WalletType'
        wallet_subtypes:
          type: array
          description: |
            The list of wallet sub-types that this API key can access. Possible values include:
              - `Asset`: Custodial Wallets (Asset Wallets).
              - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
              - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
              - `Safe{Wallet}`: Smart Contract Wallets (Safe).
              - `Main`: Exchange Wallets (Main Account).
              - `Sub`: Exchange Wallets (Sub Account).
          items:
            $ref: '#/components/schemas/WalletSubtype'
        wallet_ids:
          type: array
          description: The list of wallet IDs that this API key can access.
          items:
            type: string
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        vault_ids:
          type: array
          description: (Applicable to MPC Wallets only) The list of vault IDs that this API key can access.
          items:
            type: string
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        project_ids:
          type: array
          description: (Applicable to MPC Wallets only) The list of project IDs that this API key can access.
          items:
            type: string
            example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    CallbackMessage:
      type: object
      description: The information about a callback message.
      required:
        - id
        - created_timestamp
        - updated_timestamp
        - request_id
        - transaction_id
        - url
        - data
        - status
      properties:
        id:
          type: string
          format: uuid
          description: The callback message ID.
          example: 00000000-0000-0000-0000-000000000000
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the callback message was created, in Unix timestamp format, measured in milliseconds.'
          example: 1640918000000
        updated_timestamp:
          type: integer
          format: int64
          description: 'The time when the callback message was updated, in Unix timestamp format, measured in milliseconds.'
          example: 1640918000000
        request_id:
          type: string
          example: '1734602498819'
          description: The request ID of the transaction.
        transaction_id:
          type: string
          description: The transaction ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_id:
          type: string
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        url:
          type: string
          description: The callback endpoint URL.
          example: 'https://example.com/withdraw_callback'
        data:
          $ref: '#/components/schemas/Transaction'
        status:
          type: string
          enum:
            - Denied
            - Approved
            - Failed
          description: |
            The callback message status. Possible values include `Denied`, `Approved`, and `Failed`.
          example: Approved
        result:
          type: string
          enum:
            - ok
            - deny
          description: |
            The callback message result. Possible values include `ok` and `deny`.
          example: ok
    SwapActivity:
      type: object
      properties:
        activity_id:
          type: string
          format: uuid
          description: The unique identifier of the swap activity.
          example: 123e4567-e89b-12d3-a456-426614174000
        swap_type:
          $ref: '#/components/schemas/SwapType'
        status:
          $ref: '#/components/schemas/SwapActivityStatus'
        request_id:
          type: string
          description: The request id of the swap activity.
          example: 123e4567-e89b-12d3-a456-426614174000
        wallet_id:
          type: string
          format: uuid
          description: The unique identifier of the wallet.
          example: 123e4567-e89b-12d3-a456-426614174001
        pay_token_id:
          type: string
          description: The token ID to pay.
          example: BTC
        receive_token_id:
          type: string
          description: The token ID to receive.
          example: ETH_WBTC
        pay_amount:
          type: string
          description: The amount of tokens to bridge.
          example: '100'
        receive_amount:
          type: string
          description: The amount of tokens to receive.
          example: '100'
        fee_token_id:
          type: string
          description: The fee token ID.
          example: BTC
        fee_amount:
          type: string
          description: The amount of fee.
          example: '0.3'
        initiator:
          type: string
          nullable: true
          description: The initiator of the swap activity.
          example: John Doe
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        description:
          type: string
          description: The description of the swap activity.
          example: This is a description of the swap activity.
        created_timestamp:
          type: integer
          description: 'The time when the swap activity was created, in Unix timestamp format, measured in milliseconds.'
          example: 1677587333000
        updated_timestamp:
          type: integer
          description: 'The time when the swap activity was last updated, in Unix timestamp format, measured in milliseconds.'
          example: 1677587393000
        network_fee:
          $ref: '#/components/schemas/TransactionRequestFee'
        destination_address:
          type: string
          description: the destination address of web3/mpc wallets.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    SwapActivityDetail:
      allOf:
        - $ref: '#/components/schemas/SwapActivity'
        - type: object
          properties:
            timeline:
              type: array
              items:
                $ref: '#/components/schemas/SwapActivityTimeline'
            approvers:
              type: array
              items:
                $ref: '#/components/schemas/SwapActivityApprovers'
            signers:
              type: array
              items:
                $ref: '#/components/schemas/SwapActivitySigners'
    SwapToken:
      type: object
      required:
        - token_id
        - chain_id
        - asset_id
      properties:
        token_id:
          type: string
          description: The token id.
          example: ETH_USDT
        chain_id:
          type: string
          description: The chain id.
          example: ETH
        asset_id:
          type: string
          description: The asset id.
          example: ETH
        token_address:
          type: string
          description: The token address.
          example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
        min_amount:
          type: string
          description: The minimum amount.
          example: '1000'
        max_amount:
          type: string
          description: The maximum amount.
          example: '100000'
    SwapQuote:
      type: object
      required:
        - quote_id
        - pay_token_id
        - pay_amount
        - receive_token_id
        - receive_amount
        - fee_token_id
        - fee_amount
        - quote_expired_timestamp
      properties:
        quote_id:
          type: string
          description: The unique id of quote.
          example: 2ec094034044ffa50f4294d48363fef31eb5755fc783ba3837a03c91b4904659
        pay_token_id:
          type: string
          description: The token ID to pay.
          example: BTC
        pay_amount:
          type: string
          description: The amount of tokens to pay.
          example: '100'
        receive_token_id:
          type: string
          description: The token ID to receive.
          example: ETH_WBTC
        receive_amount:
          type: string
          description: The amount of tokens to receive.
          example: '100'
        fee_token_id:
          type: string
          description: The token ID for the service fee.
          example: BTC
        fee_amount:
          type: string
          description: The amount of tokens for the service fee.
          example: '0.3'
        estimated_network_fee_amount:
          type: string
          description: The estimated amount of tokens for the network fee.
          example: '0.3'
        min_receive_amount:
          type: string
          description: The minimum amount of tokens to receive if the pay amount is specified.
          example: '0'
        max_pay_amount:
          type: string
          description: The maximum amount of tokens to pay if the receive amount is specified.
          example: '10000'
        quote_expired_timestamp:
          type: integer
          description: 'The time when the quote will expire, in Unix timestamp format, measured in milliseconds.'
          example: 1677587393000
    SwapType:
      type: string
      enum:
        - Bridge
        - Exchange
      example: Bridge
      description: |
        The type of the swap activity. Possible values include:
        - `Bridge`: The activity is a bridge activity.
        - `Exchange`: The activity is an exchange activity.
    SwapActivityStatus:
      type: string
      enum:
        - Success
        - Processing
        - Failed
      example: Success
      description: |
        The status of the swap activity. Possible values include:
        - `Success`: The activity is successfully completed.
        - `Processing`: The activity is being processed.
        - `Failed`: The activity has failed.
    SwapActivityTimeline:
      description: The timeline of the swap activity.
      type: object
      required:
        - action
        - status
      properties:
        action:
          type: string
          example: Submitted
          description: |
            The action of the swap activity. Possible values include:
              - `Submitted`: The swap request is submitted.
              - `Pending Authorization`: The swap request is pending authorization.
              - `Bridge {Token}`: The token is being bridged to the target chain.
              - `Swap {Token}`: The token is being swapped on the target chain.
              - `Cobo Confirmation`: The swap result is waiting for Cobo confirmation.
        status:
          type: string
          example: Success
          description: |
            The status of the action. Possible values include:
              - `Success`: The action is successfully completed.
              - `Processing`: The action is being processed.
              - `Failed`: The action has failed.
        timestamp:
          type: integer
          example: 1640995200000
          description: |
            The time when the action took place, in Unix timestamp format, measured in milliseconds. 
    SwapActivityApprovers:
      description: The approvers data for swap activity.
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          example: Wenyu.Xiao
          description: |
            The approver name of the swap activity.
        status:
          $ref: '#/components/schemas/SwapApproversStatus'
    SwapActivitySigners:
      type: object
      description: The signer data for swap activity.
      properties:
        signer:
          type: string
          description: The signer name.
          example: Cobo TSS
        status:
          $ref: '#/components/schemas/SwapSingingStatus'
        failed_reason:
          type: string
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
    SwapApproversStatus:
      type: string
      enum:
        - Pending
        - Approved
        - Rejected
      example: Pending
      description: |
        The status of the approval. Possible values include:
          - `Pending`: Waiting for approval from the approver.
          - `Approved`: The approver has agreed to the approval.
          - `Rejected`: The approver has rejected the approval.
    SwapSingingStatus:
      type: string
      enum:
        - Pending
        - Signed
        - Timeout
        - Rejected
      example: Pending
      description: |
        The transaction signing result. Possible values include: 
          - `Pending`: Waiting for signing from the signer.
          - `Approved`: The signer has signed to the signing request.
          - `Timeout`: The signing request has expired due to no response from the signer.
          - `Rejected`: The signer has rejected the signing request.
    GraphQLRequest:
      type: object
      description: The request body for a GraphQL query or mutation.
      properties:
        query:
          type: string
          description: The GraphQL query or mutation as a string.
          example: |
            query {
              wallets {
                edges {
                  node {
                    id
                    name
                  }
                }
              }
            }
        variables:
          type: object
          description: Variables to use in the GraphQL operation. Can include dynamic values required for the query or mutation.
          additionalProperties: true
        operationName:
          type: string
          description: The operation name in case of multiple operations in the same query or mutation.
          example: getWallets
      required:
        - query
    GraphQLResponse:
      type: object
      properties:
        data:
          type: object
          description: The response data for the GraphQL operation.
          additionalProperties: true
          example:
            wallets:
              pageInfo:
                startCursor: ''
                endCursor: 3NemrECAgDytGhxYaX5LTUxyJ
              edges:
                - node:
                    name: Test Wallet
        errors:
          type: array
          description: Any errors that occurred during the GraphQL operation.
          items:
            $ref: '#/components/schemas/GraphQLError'
          example:
            - message: Field 'wallets' not found on type 'Query'.
              locations:
                - line: 2
                  column: 5
              path:
                - wallets
    GraphQLError:
      type: object
      description: Details of an error in the GraphQL operation.
      properties:
        message:
          type: string
          description: The error message.
        locations:
          type: array
          description: The locations in the query where the error occurred.
          items:
            type: object
            properties:
              line:
                type: integer
                description: The line number in the query where the error occurred.
              column:
                type: integer
                description: The column number in the query where the error occurred.
        path:
          type: array
          description: The path in the response where the error occurred.
          items:
            type: string
      example:
        message: Field 'wallets' not found on type 'Query'.
        locations:
          - line: 2
            column: 5
        path:
          - wallets
    GuardPubkeyStatus:
      type: string
      enum:
        - New
        - ChangeNew
        - WaitSelfConfirm
        - WaitConfirm
        - WaitActive
        - Active
        - Freeze
        - Invalid
      example: New
      description: |
        The status of a Cobo Guard public key binding. Possible values include: 
          - `New`: The binding is created.
          - `ChangeNew`: A new binding is created 
          - `WaitSelfConfirm`: The binding is waiting for user confirmation on the old Cobo Guard.
          - `WaitConfirm`: The binding is waiting for admin confirmation.
          - `WaitActive`: The binding is waiting to become active.
          - `Active`: The binding has come into effect.
          - `Freeze`: The binding is frozen.
          - `Invalid`: The binding is invalid.
    ApprovalStatementStatus:
      type: string
      enum:
        - UnSend
        - WaitAudit
        - Approve
        - Reject
        - Invalid
        - Timeout
      example: New
      description: |
        The status of the approval statement. Possible values include: 
          - `UnSend`: The request has been created but not yet sent to the broker user.
          - `Wait`: The request is sent to broker user and is pending review by the broker user.
          - `Approve`: The user has approved the request.
          - `Reject`: The user has rejected the request.
          - `Invalid`: The request is invalid.
          - `Timeout`: The request has expired.
    AppWorkflow:
      type: object
      description: The information of an approval workflow
      required:
        - workflow_id
        - operation_id
        - current_policies
        - operation_name
      properties:
        workflow_id:
          type: string
          description: The unique ID distinguishing the approval workflow instance among organizations.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        operation_id:
          type: string
          description: The unique ID of the approval workflow.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        operation_name:
          type: string
          description: The name of the approval workflow.
          example: Make Batch Payout
        current_policies:
          type: array
          items:
            $ref: '#/components/schemas/AppWorkflowPolicy'
    ApprovalRequest:
      type: object
      description: The information of an approval request.
      required:
        - approval_id
        - request_id
        - fields
        - status
        - initiated_timestamp
      properties:
        approval_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The system-generated unique ID of the approval request.
        request_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: An identifier provided by you when requesting the approval.
        fields:
          type: array
          items:
            $ref: '#/components/schemas/AppWorkflowField'
        status:
          $ref: '#/components/schemas/ApprovalStatus'
        initiated_timestamp:
          type: integer
          format: int64
          description: 'The time when the approval was initiated, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    ApprovalRequestDetail:
      type: object
      description: The information of an approval request detail.
      required:
        - initiator
        - status
        - timestamp
      properties:
        approval_id:
          type: string
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The system-generated unique ID of the approval request.
        initiator:
          $ref: '#/components/schemas/ApprovalUser'
        approved_list:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalEntry'
        status:
          $ref: '#/components/schemas/ApprovalStatus'
        modified_timestamp:
          type: integer
          format: int64
          description: 'The time when the approval was modified, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    ApprovalEntry:
      type: object
      description: The information of an approval request.
      required:
        - email
        - status
        - created_timestamp
      properties:
        status:
          $ref: '#/components/schemas/ApprovalStatus'
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the approval was created, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
        approval_users:
          type: array
          items:
            $ref: '#/components/schemas/ApprovalUser'
    ApprovalStatus:
      type: string
      enum:
        - Pending
        - Completed
        - Failed
        - Revoked
      example: Pending
      description: |
        The approval status. Possible values include: 
          - `Pending`: The approval is pending.
          - `Completed`: The approval is completed. 
          - `Failed`: The approval is rejected.
          - `Revoked`: The approval is revoked. 
    ApprovalUser:
      type: object
      description: The information of the user.
      required:
        - email
        - status
        - created_timestamp
      properties:
        email:
          type: string
          description: The user email.
          example: john.smith@example.com
        name:
          type: string
          description: The user name.
          example: John Smith
        status:
          $ref: '#/components/schemas/ApprovalStatus'
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the approval was created, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    AppWorkflowField:
      type: object
      description: The information of a workflow field.
      required:
        - field
        - value_type
        - value
      properties:
        field:
          type: string
          description: The workflow field name.
          example: amount
        value_type:
          $ref: '#/components/schemas/PolicyFieldValueType'
        value:
          type: string
          description: The workflow field value.
          example: '11.23'
    AppWorkflowPolicy:
      type: object
      description: 'The current approval workflow policy, consisting of one or more conditions and an associated action. When the conditions are met, the action is triggered.'
      required:
        - action
      properties:
        action:
          $ref: '#/components/schemas/PolicyAction'
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/PolicyCondition'
    PolicyAction:
      type: object
      description: The action to be executed when the policy conditions are satisfied.
      required:
        - action_type
      properties:
        action_type:
          $ref: '#/components/schemas/PolicyActionType'
        content:
          type: object
          description: The definition of the quorum action. This property is applicable only when `action_type` is `Quorum`.
          required:
            - type
          properties:
            type:
              type: string
              enum:
                - FULL_APPROVAL
                - PART_APPROVAL
              example: PART_APPROVAL
              description: |
                The quorum type. Possible values include: 
                  - `FULL_APPROVAL`: Requires approval from all participants.
                  - `PART_APPROVAL`: Requires approval from a specified number of participants.
            roles:
              type: array
              items:
                type: string
                example: admin
              description: 'The roles included in the quorum. Possible values include `admin`, `spender`, `operator`, and `approver`.'
            user_ids:
              type: array
              items:
                type: string
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
              description: The ID of the users included in the quorum.
            threshold:
              type: integer
              format: int32
              description: The number of approvers required to meet the quorum.
              example: 15
    PolicyActionType:
      type: string
      enum:
        - Reject
        - Accept
        - Quorum
      example: Pending
      description: |
        The approval action type. Possible values include: 
          - `Reject`: The action rejects the request.
          - `Accept`: The action approves the request.
          - `Quorum`: The action requires approval from multiple participants.
    PolicyCondition:
      type: object
      description: A condition that defines under what circumstances the policy’s action should be triggered.
      required:
        - field
        - value_type
        - value
        - operator
      properties:
        field:
          type: string
          description: The field name.
          example: amount
        value_type:
          $ref: '#/components/schemas/PolicyFieldValueType'
        value:
          type: string
          description: The field value.
          example: '11.23'
        operator:
          $ref: '#/components/schemas/PolicyFieldOperator'
    PolicyFieldOperator:
      type: string
      enum:
        - '>'
        - '>='
        - <
        - <=
        - '='
      example: '='
      description: |
        The policy field operator. Possible values include: 
          - `>`: Greater than.
          - `>=`: Greater than or equal.
          - `<`: Less than.
          - `<=`: Less than or equal.
          - `=`: Equal.
    PolicyFieldValueType:
      type: string
      enum:
        - INT
        - Float2
      example: INT
      description: |
        The field value type. Possible values include: 
        - `INT`: The field value is an integer.
        - `Float2`: The field value is a float with two decimal places.
    RequestApproval:
      type: object
      description: The information about a approval request.
      required:
        - operation_id
        - request_id
        - initiator_email
        - fields
        - guard_template
      properties:
        operation_id:
          type: string
          description: The unique ID of the approval workflow.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_id:
          type: string
          description: An identifier provided by you to track this request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        initiator_email:
          type: string
          description: The email of the user who requested the approval.
          example: johnsmith@example.com
        fields:
          type: array
          items:
            $ref: '#/components/schemas/AppWorkflowField'
        guard_template:
          type: string
          description: 'The template of a Cobo Guard message. Please connect [help@cobo.com](mailto:help@cobo.com) to get the template content.'
    FeeStationTransactionType:
      type: string
      enum:
        - Deposit
        - Withdrawal
      example: Deposit
      description: |
        The transaction type. Possible values include: 
          - `Deposit`: A deposit transaction.
          - `Withdrawal`: A withdrawal transaction.
    FeeStationTransfer:
      type: object
      description: The information about a Fee Station top-up transaction.
      required:
        - token_id
      properties:
        token_id:
          type: string
          description: 'The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        destination:
          $ref: '#/components/schemas/FeeStationDestination'
    FeeStationDestination:
      type: object
      required:
        - amount
      properties:
        address:
          type: string
          description: The destination address.
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: 'The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.'
          example: '82840924'
        amount:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`.
          example: '1.5'
    BankAccount:
      type: object
      required:
        - bank_account_id
        - info
      properties:
        bank_account_id:
          type: string
          format: uuid
          description: The bank account ID.
          example: 123e4567-e89b-12d3-a456-426614174003
        info:
          type: object
          additionalProperties: true
          description: JSON-formatted bank account details.
          example:
            beneficiary_name: John Doe
            beneficiary_address: '123 Main St, Anytown, USA'
            account_number: '4111111111111111'
            bank_name: ABC Bank
            bank_country: USA
            bank_address: '456 Bank Ave, Cityville, USA'
            swift_or_bic: ABCDEFGH
        created_timestamp:
          type: integer
          description: 'The creation time of the bank account, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the bank account, represented as a UNIX timestamp in seconds.'
          example: 1744689600
    CreateSettlement:
      type: object
      required:
        - token_id
      properties:
        merchant_id:
          type: string
          description: The merchant ID. Specify this field when `settlement_type` is set to `Merchant`.
          example: M1001
        token_id:
          type: string
          description: |
            The ID of the cryptocurrency you want to settle. Specify this field when `payout_channel` is set to `Crypto`. Supported values: 
            - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
            - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
          example: ETH_USDT
        currency:
          type: string
          description: 'The fiat currency for settling the cryptocurrency. Currently, only `USD` is supported. Specify this field when `payout_channel` is set to `OffRamp`.'
          example: USD
        amount:
          type: string
          description: |
            The settlement amount. When settling merchant balance from orders (`acquiring_type` is `Order` and `settlement_type` is `Merchant`), do not specify this field as the settlement amount will be automatically calculated based on the order amounts.
            - If `payout_channel` is set to `Crypto`, this represents the settlement amount in the specified cryptocurrency.
            - If `payout_channel` is set to `OffRamp`, this represents the settlement amount in the specified fiat currency.
          example: '500.00'
        bank_account_id:
          type: string
          format: uuid
          description: |
            The ID of the bank account where the settled funds will be deposited. This field is only applicable when `payout_channel` is set to `OffRamp`.
            Call [List all bank accounts](/v2/api-references/payment/list-all-bank-accounts) to retrieve the IDs of registered bank accounts.
          example: 123e457-e89b-12d3-a456-426614174004
        crypto_address_id:
          type: string
          description: |
            The ID of the crypto address used for crypto withdrawal. Specify this field when `payout_channel` is set to `Crypto`.

            Call [List all crypto addresses](/v2/api-references/payments/list-all-crypto-addresses) to retrieve registered crypto addresses.
          example: addr_ethusdt_20250506T123456_ab12cd
        order_ids:
          type: array
          items:
            $ref: '#/components/schemas/OrderId'
    Merchant:
      type: object
      required:
        - merchant_id
        - name
        - wallet_id
      properties:
        merchant_id:
          type: string
          description: The merchant ID.
          example: '1'
        name:
          type: string
          description: The merchant name.
          example: Merchant-1
        wallet_id:
          type: string
          format: uuid
          description: The ID of the linked wallet.
          example: 123e4567-e89b-12d3-a456-426614174001
        developer_fee_rate:
          type: string
          description: 'The developer fee rate applied to this merchant. Expressed as a string in decimal format where "0.1" represents 10%. This fee is deducted from the payment amount and only applies to top-up transactions. If you are a merchant (directly serving the payer), you do not need to configure the developer fee rate.'
          example: '0.01'
        created_timestamp:
          type: integer
          description: 'The creation time of the merchant, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the merchant, represented as a UNIX timestamp in seconds.'
          example: 1744689600
    Order:
      type: object
      required:
        - order_id
        - token_id
        - chain_id
        - payable_amount
        - receive_address
        - currency
        - order_amount
        - fee_amount
        - exchange_rate
        - psp_order_code
        - status
        - received_token_amount
      properties:
        order_id:
          type: string
          description: The order ID.
          example: '5001'
        merchant_id:
          type: string
          description: The merchant ID.
          example: '1001'
        token_id:
          type: string
          description: |

            The ID of the cryptocurrency used for payment. Supported tokens: 
            - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
            - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
          example: ETH_USDT
        chain_id:
          type: string
          description: |

            The ID of the blockchain network where the payment transaction should be made. Supported chains: 
            - USDC: `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC`
            - USDT: `TRON`, `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC`
          example: ETH
        payable_amount:
          type: string
          description: The cryptocurrency amount to be paid for this order.
          example: '103.03'
        receive_address:
          type: string
          description: The recipient wallet address to be used for the payment transaction.
          example: '0x1234567890abcdef1234567890abcdef12345678'
        currency:
          type: string
          description: The fiat currency of the order.
          example: USD
        order_amount:
          type: string
          description: 'The base amount of the order in fiat currency, excluding the developer fee (specified in `fee_amount`).'
          example: '100.00'
        fee_amount:
          type: string
          description: The developer fee for the order in fiat currency. It is added to the base amount (`order_amount`) to determine the final charge.
          example: '2.00'
        exchange_rate:
          type: string
          description: 'The exchange rate between a currency pair. Expressed as the amount of fiat currency per one unit of cryptocurrency. For example, if the cryptocurrency is USDT and the fiat currency is USD, a rate of "0.99" means 1 USDT = 0.99 USD.'
          example: '0.99'
        expired_at:
          type: integer
          description: 'The expiration time of the pay-in order, represented as a UNIX timestamp in seconds.'
          example: 1711324800
        merchant_order_code:
          type: string
          description: A unique reference code assigned by the merchant to identify this order in their system.
          example: M20240201001
        psp_order_code:
          type: string
          description: A unique reference code assigned by the developer to identify this order in their system.
          example: P20240201001
        status:
          $ref: '#/components/schemas/OrderStatus'
        received_token_amount:
          type: string
          description: 'The total cryptocurrency amount received for this order. Updates until the expiration time. Precision matches the token standard (e.g., 6 decimals for USDT).'
          example: '103.0305'
        created_timestamp:
          type: integer
          description: 'The creation time of the order, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the order, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        transactions:
          type: array
          description: An array of transactions associated with this pay-in order. Each transaction represents a separate blockchain operation related to the pay-in process.
          items:
            $ref: '#/components/schemas/PaymentTransaction'
        settlement_status:
          $ref: '#/components/schemas/SettleStatus'
    OrderId:
      type: string
      description: |

        The order ID to be included in this settlement.

        - If provided: Settles merchant funds received from this specific order
        - If empty: Settles merchant funds received from all unsettled orders of the specified merchant

        **Usage conditions**
        - Only applicable when `settlement_type` is set to `Merchant`
        - Cannot be used together with `order_ids` or `amount` parameters

            
      example: O20250304-M1001-1001
    OrderStatus:
      type: string
      enum:
        - Pending
        - Processing
        - Completed
        - Expired
        - Underpaid
      example: Pending
      description: |
        The current status of the pay-in order:
        - `Pending`: The order has been created and is awaiting payment. No incoming transaction has been detected.
        - `Processing`: An incoming transaction has been detected at the recipient address.
        - `Completed`: The payment has been fully received and is now complete.
        - `Expired`: The order has reached its expiration time without receiving any payment, or the order has been cancelled by the [Update pay-in order](https://www.cobo.com/developers/v2/api-references/payment/update-pay-in-order) operation.
        - `Underpaid`: The order has reached its expiration time. A payment was received but the amount is less than the order's required amount.
    Refund:
      type: object
      required:
        - refund_id
        - token_id
        - chain_id
        - amount
        - to_address
        - status
      properties:
        request_id:
          type: string
          description: The request ID provided by you when creating the refund request.
          example: 123e4567-e89b-12d3-a456-426614174004
        refund_id:
          type: string
          description: The refund order ID.
          example: R20250304-M1001-1001
        order_id:
          type: string
          description: The ID of the pay-in order corresponding to this refund.
          example: O20250304-M1001-1001
        merchant_id:
          type: string
          description: The merchant ID.
          example: M1001
        token_id:
          type: string
          description: The ID of the cryptocurrency used for refund.
          example: ETH_USDT
        chain_id:
          type: string
          description: The ID of the blockchain network on which the refund transaction occurs.
          example: ETH
        amount:
          type: string
          description: The amount in cryptocurrency to be returned for this refund order.
          example: '0.0025'
        to_address:
          type: string
          description: The recipient's wallet address where the refund will be sent.
          example: '0x9876543210abcdef1234567890abcdef12345678'
        status:
          $ref: '#/components/schemas/RefundStatus'
        refund_type:
          $ref: '#/components/schemas/RefundType'
        created_timestamp:
          type: integer
          description: 'The creation time of the refund order, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the refund order, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        initiator:
          type: string
          description: |

            The initiator of this settlement request. Can return either an API key or the Payment Management App's ID. 
            - Format `api_key_<API_KEY>`: Indicates the settlement request was initiated via the Payment API using the API key.
            - Format `app_<APP_ID>`: Indicates the settlement request was initiated through the Payment Management App using the App ID.
          example: b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b85b81dcc15f920e9d
        transactions:
          type: array
          description: An array of transactions associated with this refund order. Each transaction represents a separate blockchain operation related to the refund process.
          items:
            $ref: '#/components/schemas/PaymentTransaction'
        charge_merchant_fee:
          type: boolean
          description: |
            Whether to charge developer fee to the merchant for the refund.

              - `true`: The fee amount (specified in `merchant_fee_amount`) will be deducted from the merchant's balance and added to the developer's balance

              - `false`: The merchant is not charged any developer fee.
          example: false
        merchant_fee_amount:
          type: string
          description: 'The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by `merchant_fee_token_id`. This is only applicable if `charge_merchant_fee` is set to `true`.'
          example: '0.0001'
        merchant_fee_token_id:
          type: string
          description: The ID of the cryptocurrency used for the developer fee. This is only applicable if `charge_merchant_fee` is set to true.
          example: ETH_USDT
    RefundStatus:
      type: string
      enum:
        - Pending
        - Processing
        - Completed
        - PartiallyCompleted
        - Failed
        - PendingConfirmation
      example: Pending
      description: |
        The current status of the refund order. For information about transaction status, see [Transaction statuses and sub-statuses](https://www.cobo.com/developers/v2/guides/transactions/status). 
        - `Pending`: The refund order has been created but the transaction has not been initiated.
        - `Processing`: The refund order is currently being processed, with at least one refund transaction in progress.
        - `Completed`: All refund transactions have been completed successfully.
        - `PartiallyCompleted`: Some refund transactions have been completed successfully, while others have failed.
        - `Failed`: All refund transactions have failed.
        - `PendingConfirmation`: The refund order has been completed but the address to send is pending confirmation.
    RefundType:
      type: string
      enum:
        - Merchant
        - Psp
      example: Merchant
      description: |
        Specifies the source of funds for the refund:
        - `Merchant`: The refund amount will be deducted from the merchant balance.
        - `Psp`: The refund amount will be deducted from the developer balance.
    SettleRequestStatus:
      type: string
      enum:
        - Pending
        - Processing
        - Completed
        - PartiallyCompleted
        - Failed
      example: Pending
      description: |
        The current status of a settlement request:
        - `Pending`: The settlement request has been created and is awaiting processing.
        - `Processing`: The settlement request is currently being processed, with at least one settlement in progress.
        - `Completed`: All requested settlements have been completed.
        - `PartiallyCompleted`: Some requested settlements have been completed successfully, while others have failed.
        - `Failed`: All requested settlements have failed.
    SettleStatus:
      type: string
      enum:
        - Pending
        - Processing
        - Completed
        - PartiallyCompleted
        - Failed
      example: Pending
      description: |
        The current status of a settlement.
        - `Pending`: The settlement has been created and is awaiting processing.
        - `Processing`: The settlement is being processed.
        - `Completed`: The funds have been successfully deposited into the bank account or the withdrawal crypto address.
        - `PartiallyCompleted`: Some settlement transactions have been completed successfully, while others have failed.
        - `Failed`: The settlement could not be completed due to an error.
    Settlement:
      type: object
      required:
        - settlement_request_id
        - request_id
        - status
        - settlements
      properties:
        settlement_request_id:
          type: string
          description: The settlement request ID generated by Cobo.
          example: S20250304-1001
        request_id:
          type: string
          description: The request ID provided by you when creating the settlement request.
          example: SETTLEMENT123
        status:
          $ref: '#/components/schemas/SettleRequestStatus'
        settlements:
          type: array
          items:
            $ref: '#/components/schemas/SettlementDetail'
        created_timestamp:
          type: integer
          description: 'The creation time of the settlement request, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the settlement request, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        initiator:
          type: string
          description: |

            The initiator of this settlement request. Can return either an API key or the Payment Management App's ID. 
            - Format `api_key_<API_KEY>`: Indicates the settlement request was initiated via the Payment API using the API key.
            - Format `app_<APP_ID>`: Indicates the settlement request was initiated through the Payment Management App using the App ID.
          example: api_key_b2ae1b5aaade686c968ef2bbd31cc75ba94e5a85fd9cb0b35b81dcc15f520e9d
        acquiring_type:
          $ref: '#/components/schemas/AcquiringType'
        payout_channel:
          $ref: '#/components/schemas/PayoutChannel'
        settlement_type:
          $ref: '#/components/schemas/SettlementType'
    SettlementDetail:
      type: object
      properties:
        currency:
          type: string
          description: The fiat currency for the settlement.
          example: USD
        token_id:
          type: string
          description: The ID of the cryptocurrency settled.
          example: ETH_USDT
        chain_id:
          type: string
          description: The ID of the blockchain network on which the settlement occurred.
          example: ETH
        merchant_id:
          type: string
          description: The ID of the merchant associated with this settlement.
          example: M1001
        amount:
          type: string
          description: |
            The settlement amount.
            - If `payout_channel` is set to `Crypto`, this represents the settlement amount in the specified cryptocurrency.
            - If `payout_channel` is set to `OffRamp`, this represents the settlement amount in the specified fiat currency.
          example: '500.00'
        settled_amount:
          type: string
          description: |
            The settled amount of this settlement detail.

            - If `payout_channel` is set to `Crypto`, this represents the actual settled amount in the specified cryptocurrency.

            - If `payout_channel` is set to `OffRamp`, this represents the actual settled amount in the specified fiat currency.
          example: '500.00'
        status:
          $ref: '#/components/schemas/SettleStatus'
        bank_account:
          $ref: '#/components/schemas/BankAccount'
        transactions:
          type: array
          description: An array of transactions associated with this settlement request. Each transaction represents a separate blockchain operation related to the settlement process.
          items:
            $ref: '#/components/schemas/PaymentTransaction'
        created_timestamp:
          type: integer
          description: 'The creation time of the settlement, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the settlement, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        crypto_address_id:
          type: string
          description: The ID of the crypto address used for crypto withdrawal.
          example: addr_ethusdt_20250429T134512_a8c31f
        payout_channel:
          $ref: '#/components/schemas/PayoutChannel'
        acquiring_type:
          $ref: '#/components/schemas/AcquiringType'
        settlement_request_id:
          type: string
          description: The settlement request ID generated by Cobo.
          example: S20250304-1001
        order_ids:
          type: array
          description: |
            A list of unique order IDs to be included in this settlement.

            - This field is only applicable when `settlement_type` is set to `Merchant`.
            - If provided, the settlement will only apply to the specified orders.
          items:
            $ref: '#/components/schemas/OrderId'
    SettlementInfo:
      type: object
      required:
        - token
        - available_amount
      properties:
        merchant_id:
          type: string
          example: '123'
          description: 'The merchant ID. For developer balance, this field will be empty.'
        token_id:
          type: string
          description: The ID of the cryptocurrency.
          example: ETH_USDT
        available_amount:
          type: string
          description: This field is no longer in use and can be ignored.
          example: '500.00'
        available_currency_balance:
          type: string
          description: This field is no longer in use and can be ignored.
          example: '500.00'
        pending_amount:
          type: string
          description: This field is no longer in use and can be ignored.
          example: '500.00'
        pending_currency_balance:
          type: string
          description: This field is no longer in use and can be ignored.
          example: '500.00'
        settled_amount:
          type: string
          description: 'The amount already settled, in the specified cryptocurrency.'
          example: '500.00'
        available_balance:
          type: string
          description: 'The balance available for settlement or refund, in the specified cryptocurrency.'
          example: '500.00'
        total_balance:
          type: string
          description: |

            The total unsettled balance in the specified cryptocurrency, including:
            - Available balance that can be settled immediately
            - Amounts below the sweep threshold that require forced sweep before settlement
          example: '500.00'
        acquiring_type:
          $ref: '#/components/schemas/AcquiringType'
        created_timestamp:
          type: integer
          description: 'The creation time of the settlement, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the settlement, represented as a UNIX timestamp in seconds.'
          example: 1744689600
    SettlementType:
      type: string
      enum:
        - Merchant
        - Psp
      example: Merchant
      description: |
        Specifies the source of funds for the settlement:
        - `Merchant`: The settlement amount will be deducted from the merchant balance.
        - `Psp`: The settlement amount will be deducted from the developer balance.
    PaymentTransaction:
      type: object
      required:
        - tx_id
        - from_address
        - to_address
        - amount
        - status
        - created_timestamp
        - updated_timestamp
      properties:
        tx_id:
          type: string
          description: The transaction ID.
          example: tx_123e4567-e89b-12d3-a456-426614174003
        tx_hash:
          type: string
          description: The transaction hash.
          example: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e'
        token_id:
          type: string
          description: The ID of the cryptocurrency.
          example: ETH_USDT
        from_address:
          type: string
          description: The source address of the transaction.
          example: '0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537'
        to_address:
          type: string
          description: The destination address of the transaction.
          example: '0x15B95A2D8af95D9F48148667B6b8B3CdF89e4F15'
        amount:
          type: string
          description: 'The amount of cryptocurrency transferred, as a decimal string.'
          example: '0.15'
        status:
          $ref: '#/components/schemas/TransactionStatus'
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the transaction was created, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
        updated_timestamp:
          type: integer
          format: int64
          description: 'The time when the transaction was updated, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    CryptoAddress:
      type: object
      required:
        - token_id
        - crypto_address_id
        - address
      properties:
        token_id:
          type: string
          description: 'The token identifier (e.g., ETH_USDT, TRON_USDT) that this address is associated with.'
          example: ETH_USDT
        crypto_address_id:
          type: string
          description: |
            A unique identifier for this crypto address, automatically generated by Cobo. Use this ID (not the raw blockchain address) when submitting a settlement request.
          example: addr_ethusdt_20250429T134512_a8c31f
        address:
          type: string
          description: |
            The blockchain address in its native format. This is the actual destination address where funds will be sent.
            Note: When submitting a settlement request, use the address ID rather than this raw address.
          example: '0xabc123456789def0000000000000000000000000'
        label:
          type: string
          description: A label to help identify the address's purpose.
          example: Main Withdrawal Address
        created_timestamp:
          type: integer
          description: 'The creation time of the crypto address, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the crypto address, represented as a UNIX timestamp in seconds.'
          example: 1744689600
    PayoutChannel:
      type: string
      enum:
        - Crypto
        - OffRamp
      example: Crypto
      description: |
        The channel through which settlement funds will be transferred. Available options:
        - `Crypto`: Direct withdrawal to a registered crypto address.
        - `OffRamp`: Settle to a registered bank account.
    AcquiringType:
      type: string
      enum:
        - Order
        - TopUp
      example: Order
      description: |
        The payment acquisition type.
        - `Order`: Payers pay by fixed-amount orders. Ideal for specific purchases and one-time transactions.
        - `TopUp`: Account recharge flow where payers deposit funds to their dedicated top-up addresses. Ideal for flexible or usage-based payment models.
    SupportedToken:
      type: object
      required:
        - token_id
        - name
        - symbol
        - decimal
        - token_address
        - chain_id
        - chain_symbol
      properties:
        token_id:
          type: string
          description: Unique identifier of the token
          example: ETH_USDT
        name:
          type: string
          description: Full name of the token
          example: Tether USD
        symbol:
          type: string
          description: Symbol representation of the token
          example: USDT
        decimal:
          type: integer
          description: Number of decimal places for the token
          example: 6
        token_address:
          type: string
          description: Contract address of the token (may be null for native coins)
          example: '0xdac17f958d2ee523a2206206994597c13d831ec7'
          nullable: true
        chain_id:
          type: string
          description: Identifier of the blockchain where the token exists
          example: ETH
        chain_symbol:
          type: string
          description: Symbol of the underlying blockchain
          example: ETH
          nullable: true
        chain_icon_url:
          type: string
          description: URL to the blockchain's icon image
          example: 'https://example.com/icons/eth.png'
          nullable: true
        token_icon_url:
          type: string
          description: URL to the token's icon image
          example: 'https://example.com/icons/usdt.png'
          nullable: true
    Account:
      type: object
      description: 'Details of a payment account used for top-up operations, including address and balance metadata.'
      required:
        - token_id
        - address
        - merchant_balance
        - psp_balance
      properties:
        token_id:
          type: string
          description: The ID of the cryptocurrency that this account is configured to handle.
          example: ETH_USDT
        address:
          type: string
          description: The top-up address corresponding to the account.
          example: '0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537'
        merchant_balance:
          type: string
          description: The amount of merchant funds under this account.
          example: '0.15'
        psp_balance:
          type: string
          description: The amount of developer funds under this account.
          example: '0.15'
        created_timestamp:
          type: integer
          format: int64
          description: 'The creation time of the account, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
        updated_timestamp:
          type: integer
          format: int64
          description: 'The last update time of the account, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    PayerAccount:
      type: object
      required:
        - merchant_id
        - payer_id
        - developer_fee_rate
      properties:
        merchant_id:
          type: string
          description: The merchant ID.
          example: M1001
        payer_id:
          type: string
          description: A unique identifier assigned by Cobo to track and identify individual payers.
          example: P20250619T0310056d7aa
        developer_fee_rate:
          type: string
          description: The developer fee rate applied to the top-up transactions made by the payer. Expressed as a decimal string where "0.1" represents 10%.
          example: '0.01'
        created_timestamp:
          type: integer
          description: 'The creation time of the payer, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the payer, represented as a UNIX timestamp in seconds.'
          example: 1744693200
        accounts:
          type: array
          description: An array of accounts associated with this payer.
          items:
            $ref: '#/components/schemas/Account'
    TopUpAddress:
      type: object
      required:
        - address
        - payer_id
        - custom_payer_id
        - merchant_id
        - token_id
        - min_amount
      properties:
        address:
          type: string
          description: The dedicated top-up address assigned to a specific payer under a merchant on a specified chain.
          example: 0x1234567890abcdef...
        payer_id:
          type: string
          description: A unique identifier assigned by Cobo to track and identify individual payers.
          example: P20250619T0310056d7aa
        custom_payer_id:
          type: string
          description: A unique identifier assigned by the developer to track and identify individual payers in their system.
          example: user_abc_10001
        merchant_id:
          type: string
          description: The merchant ID.
          example: M1001
        token_id:
          type: string
          description: 'The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.'
          example: ETH_USDT
        chain:
          type: string
          description: The chain ID.
          example: ETH
        developer_fee_rate:
          type: string
          description: The developer fee rate applied to top-up transactions made to this address. Expressed as a decimal string where "0.1" represents 10%.
          example: '0.01'
        min_amount:
          type: string
          description: The minimum top-up amount allowed for this address. Top-ups below this threshold will not be credited to merchant or developer funds.
          example: '0.1'
        created_timestamp:
          type: integer
          description: 'The creation time of the top-up address, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The last update time of the top-up address, represented as a UNIX timestamp in seconds.'
          example: 1744689600
    UpdateTopUpAddress:
      type: object
      description: The request body to update top-up address.
      required:
        - merchant_id
        - token_id
        - custom_payer_id
      properties:
        merchant_id:
          type: string
          description: The merchant ID.
          example: M1001
        token_id:
          type: string
          description: |
            The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
              - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
              - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
          example: ETH_USDT
        custom_payer_id:
          type: string
          description: A unique identifier assigned by the developer to track and identify individual payers in their system.
          example: payer_0001
    ForcedSweepRequest:
      type: object
      required:
        - request_id
        - wallet_id
        - token_id
        - amount
      properties:
        request_id:
          type: string
          description: The request ID that is used to track a forced sweep. The request ID is provided by you and must be unique.
          example: 123e4567-e89b-12d3-a456-426614174002
        wallet_id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The ID of the wallet in which the funds will be forcefully swept.
        token_id:
          type: string
          description: The ID of the token to be forcefully swept.
          example: ETH_USDT
        amount:
          type: string
          description: The amount of the token to be forcefully swept.
          example: '10.5'
    ForcedSweep:
      type: object
      required:
        - forced_sweep_id
        - request_id
        - status
      properties:
        forced_sweep_id:
          type: string
          description: The forced sweep ID generated by Cobo.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        request_id:
          type: string
          description: The request ID provided by you when creating the forced sweep.
          example: 123e4567-e89b-12d3-a456-426614174002
        wallet_id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          description: The ID of the wallet in which the funds have been forcefully swept.
        token_id:
          type: string
          description: The ID of the token that has been forcefully swept.
          example: ETH_USDT
        amount:
          type: string
          description: The amount of token that has been forcefully swept.
          example: '10.5'
        status:
          $ref: '#/components/schemas/ForcedSweepStatus'
        created_timestamp:
          type: integer
          description: 'The creation time of the forced sweep, represented as a UNIX timestamp in seconds.'
          example: 1744689600
        updated_timestamp:
          type: integer
          description: 'The update time of the forced sweep, represented as a UNIX timestamp in seconds.'
          example: 1744689600
    ForcedSweepStatus:
      type: string
      enum:
        - Pending
        - Processing
        - Completed
      example: Pending
      description: |
        The current status of the forced sweep:
        - `Pending`: The forced sweep has been created and is awaiting processing.
        - `Processing`: The forced sweep is currently being processed.
        - `Completed`: The requested forced sweep has been completed.
    PaymentWalletBalance:
      type: object
      required:
        - wallet_id
        - token_id
      properties:
        wallet_id:
          type: string
          format: uuid
          description: The unique identifier of the wallet.
          example: 123e4567-e89b-12d3-a456-426614174000
        token_id:
          type: string
          description: 'The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.'
          example: ETH_USDT
        swept_balance:
          type: string
          description: The total amount of the token on the sweep-to address of the payment wallet.
          example: '1.23'
        available_balance:
          type: string
          description: 'The balance available for settlement or refund, in the specified cryptocurrency.'
          example: '1.23'
        total_balance:
          type: string
          description: The total balance of the token for the payment wallet.
          example: '1.23'
        above_sweep_threshold_balance:
          type: string
          description: 'The total amount of funds that exceed the sweep threshold across all receiving addresses in the payment wallet. When the balance on a receiving address exceeds the sweep threshold, those funds become eligible for automatic sweeping and are included in this balance.'
          example: '1.23'
    MerchantBalance:
      type: object
      required:
        - merchant_id
        - token_id
        - acquiring_type
      properties:
        merchant_id:
          type: string
          description: The merchant ID.
          example: '1'
        token_id:
          type: string
          description: 'The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.'
          example: ETH_USDT
        acquiring_type:
          $ref: '#/components/schemas/AcquiringType'
        total_received_amount:
          type: string
          description: The total amount of the token that has been received by the merchant.
          example: '1.23'
        settled_amount:
          type: string
          description: The total amount of the token that has been settled from the merchant's balance.
          example: '1.23'
        refunded_amount:
          type: string
          description: The total amount of the token that has been refunded from the merchant's balance.
          example: '1.23'
        total_balance:
          type: string
          description: The total balance of the token for the merchant.
          example: '1.23'
        available_balance:
          type: string
          description: 'The balance available for settlement or refund, in the specified cryptocurrency.'
          example: '1.23'
    PspBalance:
      type: object
      required:
        - token_id
      properties:
        token_id:
          type: string
          description: 'The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.'
          example: ETH_USDT
        developer_fee_amount:
          type: string
          description: The total amount of the token that has been received as developer fee.
          example: '1.23'
        settled_amount:
          type: string
          description: The total amount of the token that has been settled from the developer's balance.
          example: '1.23'
        refunded_amount:
          type: string
          description: The total amount of the token that has been refunded from the developer's balance.
        total_balance:
          type: string
          description: The total balance of the token for the developer.
          example: '1.23'
        available_balance:
          type: string
          description: 'The balance available for settlement or refund, in the specified cryptocurrency.'
          example: '1.23'
    PayerBalanceByAddress:
      type: array
      description: The total amount received for a specific payer on a list of receiving addresses.
      items:
        $ref: '#/components/schemas/ReceivedAmountPerAddress'
    ReceivedAmountPerAddress:
      type: object
      description: The total amount of the token that has been received at a given address.
      required:
        - address
        - total_received_amount
      properties:
        address:
          type: string
          description: The receiving address.
          example: '0xF8e4bfc10A2821DF52D3322cB5170E5E9276b537'
        total_received_amount:
          type: string
          description: The total amount of the token that has been received at this address.
          example: '0.15'
    TSSKeyGenRequest:
      type: object
      properties:
        threshold:
          type: integer
          description: The number of key share holders required to approve each operation in TSS key share group.
          example: 2
        node_ids:
          type: array
          items:
            type: string
            description: The node IDs of the key share holder.
            example:
              - coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
              - coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w
        curve:
          $ref: '#/components/schemas/TSSCurve'
        task_id:
          type: string
          description: The task ID.
          example: '20231213122855000000000000000000'
        biz_task_id:
          type: string
          description: The business task ID. This field contains the TSS request ID.
          example: '20231213122855000000000000000000'
    TSSKeyReshareRequest:
      type: object
      properties:
        old_group_id:
          type: string
          description: The old TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
        root_pub_key:
          type: string
          description: The The old TSS key share group's root extended public key.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        curve:
          $ref: '#/components/schemas/TSSCurve'
        used_node_ids:
          type: array
          items:
            type: string
            description: The node IDs of used key share holder.
            example:
              - coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
              - coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w
        old_threshold:
          type: integer
          description: The number of key share holders required to approve each operation in the old TSS key share group.
          example: 2
        new_threshold:
          type: integer
          description: The number of key share holders required to approve each operation in the new TSS key share group.
          example: 2
        new_node_ids:
          type: array
          items:
            type: string
            description: The node IDs of new key share holder.
            example:
              - coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
              - coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w
        task_id:
          type: string
          description: The task ID.
          example: '20231213122855000000000000000000'
        biz_task_id:
          type: string
          description: The business task ID. This field contains the TSS request ID.
          example: '20231213122855000000000000000000'
    TSSKeySignRequest:
      type: object
      properties:
        group_id:
          type: string
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
        root_pub_key:
          type: string
          description: The The old TSS key share group's root extended public key.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        used_node_ids:
          type: array
          items:
            type: string
            description: The node IDs of the key share holder.
            example:
              - coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
              - coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w
        bip32_path_list:
          type: array
          items:
            type: string
            description: The BIP32 derivation paths.
            example:
              - m/44/0/2/0/0
        msg_hash_list:
          type: array
          items:
            type: string
            description: The list of message hashes to sign.
            example:
              - '0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF'
        tweak_list:
          type: array
          items:
            type: string
            description: The list of tweaks to apply.
            example:
              - '0x00'
        signature_type:
          $ref: '#/components/schemas/TSSSignatureType'
        tss_protocol:
          $ref: '#/components/schemas/TSSProtocol'
        task_id:
          type: string
          description: The task ID.
          example: '20231213122855000000000000000000'
        biz_task_id:
          type: string
          description: The business task ID. This field contains the transaction ID.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
    TSSKeyShareSignRequest:
      type: object
      properties:
        node_id:
          type: string
          description: The node ID of the key share holder.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        task_id:
          type: string
          description: The task ID.
          example: '20231213122855000000000000000000'
        details:
          type: array
          items:
            $ref: '#/components/schemas/TSSKeyShareSignDetail'
        biz_task_id:
          type: string
          description: The business task ID. This field contains the key share sign request ID.
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
    TSSKeyShareSignDetail:
      type: object
      properties:
        group_id:
          type: string
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
        message:
          type: string
          description: The message to sign by key share.
    TSSKeyGenExtra:
      type: object
      properties:
        org:
          $ref: '#/components/schemas/OrgInfo'
        project:
          $ref: '#/components/schemas/MPCProject'
        vault:
          $ref: '#/components/schemas/MPCVault'
        target_key_share_holder_group:
          $ref: '#/components/schemas/KeyShareHolderGroup'
        tss_request:
          $ref: '#/components/schemas/TSSRequest'
    TSSKeyReshareExtra:
      type: object
      properties:
        org:
          $ref: '#/components/schemas/OrgInfo'
        project:
          $ref: '#/components/schemas/MPCProject'
        vault:
          $ref: '#/components/schemas/MPCVault'
        source_key_share_holder_group:
          $ref: '#/components/schemas/KeyShareHolderGroup'
        target_key_share_holder_group:
          $ref: '#/components/schemas/KeyShareHolderGroup'
        tss_request:
          $ref: '#/components/schemas/TSSRequest'
    TSSKeySignExtra:
      type: object
      properties:
        org:
          $ref: '#/components/schemas/OrgInfo'
        project:
          $ref: '#/components/schemas/MPCProject'
        vault:
          $ref: '#/components/schemas/MPCVault'
        wallet:
          $ref: '#/components/schemas/MPCWalletInfo'
        signer_key_share_holder_group:
          $ref: '#/components/schemas/KeyShareHolderGroup'
        source_addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressInfo'
        transaction:
          $ref: '#/components/schemas/Transaction'
    TSSKeyShareSignExtra:
      type: object
      properties:
        org:
          $ref: '#/components/schemas/OrgInfo'
        project:
          $ref: '#/components/schemas/MPCProject'
        vault:
          $ref: '#/components/schemas/MPCVault'
        wallet:
          $ref: '#/components/schemas/MPCWalletInfo'
        validity_key_share_holder_groups:
          type: array
          items:
            $ref: '#/components/schemas/KeyShareHolderGroup'
    TSSGroup:
      type: object
      properties:
        id:
          type: string
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
        canonical_group_id:
          type: string
          description: The canonical group ID.
        protocol_group_id:
          type: string
          description: The protocol group ID.
        protocol_type:
          type: string
          description: The protocol type.
        created_timestamp:
          description: 'The group creation timestamp, in Unix timestamp format, measured in milliseconds.'
          type: integer
          format: int64
          example: 1701396866000
        type:
          $ref: '#/components/schemas/TSSGroupType'
        root_extended_public_key:
          type: string
          description: The root extended public key.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        chaincode:
          type: string
          description: The chaincode.
        curve:
          $ref: '#/components/schemas/TSSCurveType'
        threshold:
          type: integer
          description: The threshold.
        participants:
          type: array
          items:
            $ref: '#/components/schemas/TSSParticipant'
    TSSGroupType:
      type: integer
      enum:
        - 1
        - 2
      x-enum-varnames:
        - ECDSA
        - EdDSA
      example: 1
      description: |
        The elliptic curve type. Possible values include:

        - 1 : The `ECDSA` group.
        - 2 : The `EdDSA` group.
    TSSCurve:
      type: integer
      enum:
        - 0
        - 2
      x-enum-varnames:
        - SECP256K1
        - ED25519
      example: 0
      description: |
        The elliptic curve type. Possible values include:

        - 0 : The `SECP256K1` elliptic curve.
        - 2 : The `ED25519` elliptic curve.
    TSSCurveType:
      type: string
      enum:
        - secp256k1
        - ed25519
      example: secp256k1
      description: |
        The elliptic curve type. Possible values include:

        - `secp256k1` : The `SECP256K1` elliptic curve.
        - `ed25519` : The `ED25519` elliptic curve.
    TSSParticipant:
      type: object
      properties:
        node_id:
          type: string
          description: The node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        share_id:
          type: string
          description: The share ID.
          example: '619693302942100684578205955442284626185'
        share_public_key:
          type: string
          description: The share public key.
          example: '0x217223cdea6b19af34131447763a269d1dbef580bc85272a5bdfc59fa4940cca'
    TSSRequestTypeEenum:
      type: string
      enum:
        - KeyGen
        - KeyReshare
        - KeySign
        - KeyShareSign
      description: |-

        The request type. - `KeyGen`: The key gen request. - `KeyReshare`: The key reshare request. - `KeySign`: The key sign request. - `KeyShareSign`: The key share sign request.
      example: KeyGen
    TSSStatus:
      type: integer
      enum:
        - 100
        - 110
        - 120
        - 130
        - 140
        - 160
        - 170
        - 180
        - 190
      x-enum-varnames:
        - UNDEFINED
        - SCHEDULING
        - INITIALIZING
        - APPROVING
        - PROCESSING
        - DECLINED
        - FAILED
        - CANCELED
        - COMPLETED
      example: 190
      description: |
        The status of the request. Possible values include:

        - 100 : Undefined.
        - 110 : Scheduling.
        - 120 : Initializing.
        - 130 : Approving.
        - 140 : Processing.
        - 160 : Declined.
        - 170 : Failed.
        - 180 : Canceled.
        - 190 : Completed.
    TSSKeyShareSignSignature:
      type: object
      properties:
        group_id:
          type: string
          description: The TSS key share group ID.
          example: mMedDioOKhTlhGyQRzMv
        signed_msg:
          type: string
          description: The hexadecimal encoded signed message.
          example: '0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF'
        msg_hash:
          type: string
          description: The message hash.
          example: '0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF'
        signature:
          type: string
          description: The signature.
          example: '0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF'
    TSSKeyShareSignSignatures:
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/TSSKeyShareSignSignature'
    TSSSignatures:
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/TSSSignature'
        signature_type:
          $ref: '#/components/schemas/TSSSignatureType'
        tss_protocol:
          $ref: '#/components/schemas/TSSProtocol'
    TSSSignature:
      type: object
      properties:
        bip32_path:
          type: string
          description: The BIP32 path.
          example: m/44/0/2/0/0
        msg_hash:
          type: string
          description: The message hash.
          example: '0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF'
        tweak:
          type: string
          description: The tweak.
          example: '0x00'
        signature:
          type: string
          description: The signature.
          example: '0x10ED43C718714eb63d5aA57B78B54704E256024EFFFFFFFFFFFFFFFFFFFFFFFF'
        signature_recovery:
          type: string
          description: The signature recovery.
          example: '0x00'
    TSSSignatureType:
      type: integer
      enum:
        - 1
        - 2
        - 3
      x-enum-varnames:
        - ECDSA
        - EdDSA
        - Schnorr
      example: 1
      description: |
        The type of signature. Possible values include:

        - 1 : ECDSA signature
        - 2 : EdDSA signature
        - 3 : Schnorr signature
    TSSProtocol:
      type: integer
      enum:
        - 1
        - 2
        - 3
      x-enum-varnames:
        - GG18
        - Lindell
        - EddsaTSS
      example: 1
      description: |
        The type of TSS protocol. Possible values include:

        - 1 : GG18
        - 2 : Lindell
        - 3 : EddsaTSS
    TSSEvent:
      type: object
      description: The TSS Node event payload.
      required:
        - event_type
      properties:
        event_id:
          description: The event ID.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        created_timestamp:
          description: 'The time when the event occurred, in Unix timestamp format, measured in milliseconds.'
          type: integer
          format: int64
          example: 1701396866000
        node_id:
          type: string
          description: The event publisher's TSS Node ID.
          example: coboAbCdEfGhIjKlMnOpQrStUvWxYz1234567890abcdefghi
        event_type:
          $ref: '#/components/schemas/TSSEventType'
        data:
          $ref: '#/components/schemas/TSSEventData'
    TSSEventType:
      type: string
      enum:
        - ping
        - request.keygen.created
        - request.keygen.updated
        - request.keygen.failed
        - request.keygen.succeeded
        - request.keyreshare.created
        - request.keyreshare.updated
        - request.keyreshare.failed
        - request.keyreshare.succeeded
        - request.keysign.created
        - request.keysign.updated
        - request.keysign.failed
        - request.keysign.succeeded
        - request.keysharesign.created
        - request.keysharesign.updated
        - request.keysharesign.failed
        - request.keysharesign.succeeded
      example: request.keygen.succeeded
      description: The event type.
    TSSEventData:
      oneOf:
        - $ref: '#/components/schemas/TSSKeyGenEventData'
        - $ref: '#/components/schemas/TSSKeyReshareEventData'
        - $ref: '#/components/schemas/TSSKeySignEventData'
        - $ref: '#/components/schemas/TSSKeyShareSignEventData'
      discriminator:
        propertyName: data_type
        mapping:
          KeyGen: '#/components/schemas/TSSKeyGenEventData'
          KeyReshare: '#/components/schemas/TSSKeyReshareEventData'
          KeySign: '#/components/schemas/TSSKeySignEventData'
          KeyShareSign: '#/components/schemas/TSSKeyShareSignEventData'
    TSSEventDataType:
      type: string
      enum:
        - KeyGen
        - KeyReshare
        - KeySign
        - KeyShareSign
      description: |-

        The data type of the event. - `KeyGen`: The key gen event data. - `KeyReshare`: The key reshare event data. - `KeySign`: The key sign event data. - `KeyShareSign`: The key share sign event data.
      example: KeyGen
    TSSBaseRequestEventData:
      type: object
      required:
        - data_type
      properties:
        data_type:
          $ref: '#/components/schemas/TSSEventDataType'
        request_id:
          type: string
          description: The request ID.
          example: '20231213122855000000000000000000:1'
        request_type:
          $ref: '#/components/schemas/TSSRequestTypeEenum'
        request_status:
          $ref: '#/components/schemas/TSSStatus'
        extra_info:
          type: string
          description: The extra info.
          example: '{"org": {"org_id": "1234567890"}}'
        failed_reason:
          type: string
          description: The failed reason.
    TSSKeyGenEventData:
      allOf:
        - $ref: '#/components/schemas/TSSBaseRequestEventData'
        - type: object
          properties:
            request_detail:
              $ref: '#/components/schemas/TSSKeyGenRequest'
            result:
              $ref: '#/components/schemas/TSSGroup'
    TSSKeyReshareEventData:
      allOf:
        - $ref: '#/components/schemas/TSSBaseRequestEventData'
        - type: object
          properties:
            request_detail:
              $ref: '#/components/schemas/TSSKeyReshareRequest'
            result:
              $ref: '#/components/schemas/TSSGroup'
    TSSKeySignEventData:
      allOf:
        - $ref: '#/components/schemas/TSSBaseRequestEventData'
        - type: object
          properties:
            request_detail:
              $ref: '#/components/schemas/TSSKeySignRequest'
            result:
              $ref: '#/components/schemas/TSSSignatures'
    TSSKeyShareSignEventData:
      allOf:
        - $ref: '#/components/schemas/TSSBaseRequestEventData'
        - type: object
          properties:
            request_detail:
              $ref: '#/components/schemas/TSSKeyShareSignRequest'
            result:
              $ref: '#/components/schemas/TSSKeyShareSignSignatures'
    TSSCallbackRequest:
      type: object
      properties:
        request_id:
          type: string
          description: he unique ID of the callback request.
          example: '20231213122855000000000000000000:1'
        request_type:
          $ref: '#/components/schemas/TSSCallbackRequestType'
        request_detail:
          type: string
          description: Details specific to the request type. The structure varies depending on the request type.  The content is a JSON-serialized string.
        extra_info:
          type: string
          description: Additional contextual information.  The structure varies depending on the request type. The content is a JSON-serialized string.
    TSSCallbackRequestType:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 5
      x-enum-varnames:
        - PING
        - KEYGEN
        - KEYSIGN
        - KEYRESHARE
        - KEYSHARESIGN
      example: 1
      description: |
        The type of the request. Possible values include:

        - 0 : Ping. Used for heartbeat monitoring.
        - 1 : KeyGen. Creating new key shares for your MPC Wallets.
        - 2 : KeySign. Signing transactions or messages.
        - 3 : KeyReshare. Redistributing key shares among participants.
        - 5 : KeyShareSign. Signing messages with key shares.
    TSSCallbackResponse:
      type: object
      properties:
        request_id:
          type: string
          description: The unique ID of the callback request.
          example: '20231213122855000000000000000000:1'
        status:
          type: integer
          description: The response status code. 0 indicates success.  Any other value indicates that an error occurred while processing the request in the callback server.
          example: 0
        action:
          $ref: '#/components/schemas/TSSCallbackActionType'
        error:
          type: string
          description: 'The error message. - When status is not 0, Contains internal error messages from the callback server. - When status is 0 and action is REJECT, Contains the specific reason for the rejection.'
          example: internal error
    TSSCallbackActionType:
      type: string
      enum:
        - APPROVE
        - REJECT
      example: APPROVE
      description: |
        The action to take. Possible values include:

        - `APPROVE` : Approve the request and proceed with the operation.
        - `REJECT` : Deny the request and stop the operation.
    TokenizationActivityInfo:
      type: object
      properties:
        activity_id:
          type: string
          description: The ID of the activity.
          format: uuid
          example: b7c8e9d0-f1a2-3b4c-5d6e-7f8a9b0c1d2e
        token_id:
          type: string
          example: BTC
          description: The token ID.
        type:
          $ref: '#/components/schemas/TokenizationOperationType'
        status:
          $ref: '#/components/schemas/TokenizationActivityStatus'
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
        initiator:
          type: string
          description: The initiator of the activity.
          example: steve@example.com
        initiator_type:
          $ref: '#/components/schemas/TransactionInitiatorType'
        transaction_ids:
          type: array
          items:
            type: string
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: The IDs of the corresponding transactions of the activity.
        created_timestamp:
          type: integer
          description: The creation timestamp of the activity in milliseconds since the Unix epoch.
          format: int64
          example: 1678886400000
        updated_timestamp:
          type: integer
          description: The last update timestamp of the activity in milliseconds since the Unix epoch.
          format: int64
          example: 1678886400000
      required:
        - activity_id
        - token_id
        - type
        - status
        - source
        - initiator
        - initiator_type
        - transaction_ids
        - created_timestamp
        - updated_timestamp
    TokenizationActivityStatus:
      type: string
      enum:
        - Processing
        - Success
        - Failed
      description: The status of the tokenization activity.
    TokenizationAllowlistAddressNote:
      type: object
      title: AllowlistAddressNote
      properties:
        address:
          type: string
          description: The address on the allowlist.
          example: 0xabcdef...
        note:
          type: string
          description: The note for the address on the allowlist.
          example: Trusted address
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the address was added to the allowlist, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
      required:
        - address
    TokenizationBlocklistAddressNote:
      type: object
      title: BlocklistAddressNote
      properties:
        address:
          type: string
          description: The address on the blocklist.
          example: 0xabcdef...
        note:
          type: string
          description: The note for the address on the blocklist.
          example: Blocked address
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the address was added to the blocklist, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
      required:
        - address
    TokenizationAddressPermission:
      type: object
      properties:
        execution_address:
          type: string
          description: The execution address.
          example: '0x0406db8351aa6839169bb363f63c2c808fee8f99'
        permissions:
          type: array
          description: List of permissions granted to this address.
          items:
            $ref: '#/components/schemas/TokenizationTokenPermissionType'
          example:
            - UpgradeContract
            - PauseContract
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the permission was created, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
      required:
        - execution_address
        - permissions
    TokenizationUpdateAllowlistAddressesParams:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/TokenizationUpdateAddressAction'
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
        addresses:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: The address to add or remove.
                example: 0x789abc...
              note:
                type: string
                description: 'An optional note for the address, primarily used when adding addresses.'
                example: Allowed address for trusted partner
            required:
              - address
          description: 'A list of addresses to manage. For ''add'' operations, notes can be provided. For ''remove'' operations, notes are ignored.'
          example:
            - address: 0x789abc...
              note: reason for allowing
            - address: 0xdef012...
      required:
        - action
        - source
        - addresses
    TokenizationUpdateAllowlistAddressesRequest:
      allOf:
        - $ref: '#/components/schemas/TokenizationUpdateAllowlistAddressesParams'
        - $ref: '#/components/schemas/TokenizationAppInitiator'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - fee
    TokenizationUpdateBlocklistAddressesParams:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/TokenizationUpdateAddressAction'
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
        addresses:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                description: The address to add or remove.
                example: 0x789abc...
              note:
                type: string
                description: 'An optional note for the address, primarily used when adding addresses.'
                example: Blocklist address for malicious activity
            required:
              - address
          description: 'A list of addresses to manage. For ''add'' operations, notes can be provided. For ''remove'' operations, notes are ignored.'
          example:
            - address: 0x789abc...
              note: reason for blocklisting
            - address: 0xdef012...
      required:
        - action
        - source
        - addresses
    TokenizationUpdateBlocklistAddressesRequest:
      allOf:
        - $ref: '#/components/schemas/TokenizationUpdateBlocklistAddressesParams'
        - $ref: '#/components/schemas/TokenizationAppInitiator'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - fee
    TokenizationBurnTokenParams:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
        burns:
          type: array
          description: 'Details for each token burn, including amount and address to burn from.'
          items:
            type: object
            properties:
              amount:
                type: string
                description: The amount of tokens to burn.
                example: '0.99'
              from_address:
                type: string
                description: The address to burn tokens from.
                example: 0x051A924H4dCb264226d7B036C2893a0D344
            required:
              - amount
              - from_address
      required:
        - source
        - burns
    TokenizationBurnTokenRequest:
      allOf:
        - $ref: '#/components/schemas/TokenizationBurnTokenParams'
        - $ref: '#/components/schemas/TokenizationAppInitiator'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - fee
    TokenizationAllowlistActivationParams:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
        activation:
          type: boolean
          description: Whether to activate the allowlist feature for the token.
          example: true
      required:
        - source
        - activation
    TokenizationAllowlistActivationRequest:
      allOf:
        - $ref: '#/components/schemas/TokenizationAllowlistActivationParams'
        - $ref: '#/components/schemas/TokenizationAppInitiator'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - fee
    TokenizationIssueTokenParams:
      type: object
      properties:
        chain_id:
          type: string
          description: The chain ID where the token will be issued.
          example: ETH
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
        token_params:
          oneOf:
            - $ref: '#/components/schemas/TokenizationERC20TokenParams'
            - $ref: '#/components/schemas/TokenizationSOLTokenParams'
          discriminator:
            propertyName: standard
            mapping:
              ERC20: '#/components/schemas/TokenizationERC20TokenParams'
              SPLToken2022: '#/components/schemas/TokenizationSOLTokenParams'
      required:
        - chain_id
        - source
        - token_params
    TokenizationIssuedTokenRequest:
      allOf:
        - $ref: '#/components/schemas/TokenizationIssueTokenParams'
        - $ref: '#/components/schemas/TokenizationAppInitiator'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - fee
    TokenizationStatus:
      type: string
      description: The status of the token.
      enum:
        - Processing
        - Active
        - Failed
        - Pausing
      example: Active
    TokenizationERC20TokenParams:
      title: ERC20
      type: object
      properties:
        standard:
          $ref: '#/components/schemas/TokenizationTokenStandard'
        name:
          type: string
          description: The name of the token.
          example: My Awesome Token
        symbol:
          type: string
          description: The symbol of the token.
          example: MAT
        decimals:
          type: integer
          format: int32
          description: The number of decimals for the token (0-18).
          minimum: 0
          maximum: 18
          example: 18
        token_access_activated:
          type: boolean
          description: 'Whether the allowlist feature is activated for the token. When activated, only addresses in the allowlist can perform token operations.'
          default: false
          example: false
        permissions:
          $ref: '#/components/schemas/TokenizationTokenPermissionParams'
      required:
        - standard
        - name
        - symbol
        - decimals
    TokenizationSOLTokenParams:
      title: Solana
      type: object
      properties:
        standard:
          $ref: '#/components/schemas/TokenizationTokenStandard'
        name:
          type: string
          description: The name of the token.
          example: My Awesome Token
        symbol:
          type: string
          description: The symbol of the token.
          example: MAT
        decimals:
          type: integer
          format: int32
          description: The number of decimals for the token (0-18).
          minimum: 0
          maximum: 18
          example: 18
        token_access_activated:
          type: boolean
          description: 'Whether the allowlist feature is activated for the token. When activated, only addresses in the allowlist can perform token operations.'
          default: false
          example: false
        permissions:
          $ref: '#/components/schemas/TokenizationSolTokenPermissionParams'
      required:
        - standard
        - name
        - symbol
        - decimals
    TokenizationEstimateFeeRequest:
      type: object
      properties:
        operation_params:
          oneOf:
            - $ref: '#/components/schemas/TokenizationIssueEstimateFeeParams'
            - $ref: '#/components/schemas/TokenizationMintEstimateFeeParams'
            - $ref: '#/components/schemas/TokenizationBurnEstimateFeeParams'
            - $ref: '#/components/schemas/TokenizationPauseEstimateFeeParams'
            - $ref: '#/components/schemas/TokenizationUnpauseEstimateFeeParams'
            - $ref: '#/components/schemas/TokenizationUpdateAllowlistAddressesEstimateFeeParams'
            - $ref: '#/components/schemas/TokenizationUpdateBlocklistAddressesEstimateFeeParams'
            - $ref: '#/components/schemas/TokenizationToggleAllowlistEstimateFeeParams'
            - $ref: '#/components/schemas/TokenizationContractCallEstimateFeeParams'
          discriminator:
            propertyName: operation_type
            mapping:
              Issue: '#/components/schemas/TokenizationIssueEstimateFeeParams'
              Mint: '#/components/schemas/TokenizationMintEstimateFeeParams'
              Burn: '#/components/schemas/TokenizationBurnEstimateFeeParams'
              Pause: '#/components/schemas/TokenizationPauseEstimateFeeParams'
              Unpause: '#/components/schemas/TokenizationUnpauseEstimateFeeParams'
              UpdateAllowlistAddresses: '#/components/schemas/TokenizationUpdateAllowlistAddressesEstimateFeeParams'
              UpdateBlocklistAddresses: '#/components/schemas/TokenizationUpdateBlocklistAddressesEstimateFeeParams'
              ToggleAllowlist: '#/components/schemas/TokenizationToggleAllowlistEstimateFeeParams'
              ContractCall: '#/components/schemas/TokenizationContractCallEstimateFeeParams'
      required:
        - operation_params
    TokenizationHoldingInfo:
      type: object
      properties:
        wallet_id:
          type: string
          description: The unique identifier of the wallet holding the token.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_name:
          type: string
          description: The name of the wallet.
          example: Main Wallet
        address:
          type: string
          description: The address holding the token.
          example: 0x051A924H4dCb264226d7B036C2893a0D344
        balance:
          type: string
          description: The token balance held by this address.
          example: '1000.50'
        address_label:
          type: string
          description: The label of the address.
          example: Treasury Address
      required:
        - wallet_id
        - address
        - balance
    TokenizationListActivitiesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TokenizationActivityInfo'
          description: The list of tokenization activities.
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination
    TokenizationListHoldingsResponse:
      type: object
      properties:
        data:
          type: array
          description: List of token holdings.
          items:
            $ref: '#/components/schemas/TokenizationHoldingInfo'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination
    TokenizationListTokenInfoResponse:
      type: object
      properties:
        data:
          type: array
          description: List tokens.
          items:
            $ref: '#/components/schemas/TokenizationTokenInfo'
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination
    TokenizationMintTokenParams:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
        mints:
          type: array
          description: 'Details for each token mint, including amount and address to mint to.'
          items:
            type: object
            properties:
              amount:
                type: string
                description: The amount of tokens to mint for this recipient.
                example: '0.99'
              to_address:
                type: string
                description: The address to mint tokens to for this recipient.
                example: 0x051A924H4dCb264226d7B036C2893a0D344
            required:
              - amount
              - to_address
      required:
        - source
        - mints
    TokenizationMintTokenRequest:
      allOf:
        - $ref: '#/components/schemas/TokenizationMintTokenParams'
        - $ref: '#/components/schemas/TokenizationAppInitiator'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - fee
    TokenizationPauseTokenParams:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
      required:
        - source
    TokenizationPauseTokenRequest:
      allOf:
        - $ref: '#/components/schemas/TokenizationPauseTokenParams'
        - $ref: '#/components/schemas/TokenizationAppInitiator'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - fee
    TokenizationUnpauseTokenParams:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
      required:
        - source
    TokenizationUnpauseTokenRequest:
      allOf:
        - $ref: '#/components/schemas/TokenizationUnpauseTokenParams'
        - $ref: '#/components/schemas/TokenizationAppInitiator'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - fee
    TokenizationMpcOperationSource:
      title: MPC Wallets
      type: object
      properties:
        source_type:
          $ref: '#/components/schemas/TokenizationOperationSourceType'
        wallet_id:
          type: string
          format: uuid
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address used to interact with the token contract.
          example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
      required:
        - source_type
        - wallet_id
        - address
    TokenizationOperationResponse:
      type: object
      properties:
        activity_id:
          type: string
          description: The ID of the activity related to the tokenization operation.
          format: uuid
          example: b7c8e9d0-f1a2-3b4c-5d6e-7f8a9b0c1d2e
      required:
        - activity_id
    TokenizationOperationSourceType:
      type: string
      enum:
        - Org-Controlled
        - Web3
      example: Org-Controlled
      description: |
        The wallet source type. Possible values include:
        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
        - `Web3`: Custodial Wallets (Web3 Wallets). 
    TokenizationTokenDetailInfo:
      allOf:
        - $ref: '#/components/schemas/TokenizationTokenInfo'
        - type: object
          properties:
            permissions:
              type: array
              description: List of execution addresses and their permissions.
              items:
                $ref: '#/components/schemas/TokenizationAddressPermission'
    TokenizationTokenInfo:
      type: object
      properties:
        token_id:
          type: string
          description: The unique token identifier.
          example: ETH_CUSD2
        chain_id:
          type: string
          description: The chain ID of the tokenization contract.
          example: ETH
        token_address:
          type: string
          description: The address of the token contract.
          example: '0x1234567890123456789012345678901234567890'
        token_name:
          type: string
          description: The name of the token.
          example: CUSD
        token_symbol:
          type: string
          description: The unique token symbol.
          example: CUSD
        decimals:
          type: integer
          description: The number of decimals of the token.
          example: 18
        token_access_activated:
          type: boolean
          description: Whether the allowlist feature is activated for the token.
          example: false
        status:
          $ref: '#/components/schemas/TokenizationStatus'
        total_supply:
          type: string
          description: The total supply of the token.
          example: '133399'
        holdings:
          type: string
          description: The amount of tokens held by the organization.
          example: '12399'
      required:
        - token_id
        - chain_id
        - token_symbol
        - decimals
        - status
    TokenizationTokenOperationSource:
      oneOf:
        - $ref: '#/components/schemas/TokenizationMpcOperationSource'
        - $ref: '#/components/schemas/TokenizationWeb3OperationSource'
      discriminator:
        propertyName: source_type
        mapping:
          Org-Controlled: '#/components/schemas/TokenizationMpcOperationSource'
          Web3: '#/components/schemas/TokenizationWeb3OperationSource'
    TokenizationTokenPermission:
      type: object
      properties:
        permission_type:
          $ref: '#/components/schemas/TokenizationTokenPermissionType'
        name:
          type: string
          description: The display name of the permission.
          example: Mint Tokens
        description:
          type: string
          description: Detailed description of what this permission allows.
          example: Mint new tokens to a specified address.
        enabled:
          type: boolean
          description: Whether this permission is currently enabled.
          example: true
      required:
        - permission_type
        - name
        - description
        - enabled
    TokenizationTokenPermissionParams:
      type: object
      description: 'Role-based permission settings for token contract. If not provided, all permissions will be granted to the issuing wallet by default.'
      properties:
        admin:
          type: array
          description: List of addresses for the admin role.
          items:
            type: string
            description: Wallet address
            example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
          example:
            - '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
            - '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
        minter:
          type: array
          description: List of addresses for the minter role.
          items:
            type: string
            description: Wallet address
            example: '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
          example:
            - '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
            - 0x8ba1f109551bD432803012645Hac136c34B8f7f7
        burner:
          type: array
          description: List of addresses for the burner role.
          items:
            type: string
            description: Wallet address
            example: 0x8ba1f109551bD432803012645Hac136c34B8f7f7
          example:
            - 0x8ba1f109551bD432803012645Hac136c34B8f7f7
            - 0x9cb2f210662eE543904023756Ibd247d45C9g8g8
        manager:
          type: array
          description: List of addresses for the manager role.
          items:
            type: string
            description: Wallet address
            example: '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
          example:
            - '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
            - 0x8ba1f109551bD432803012645Hac136c34B8f7f7
        pauser:
          type: array
          description: List of addresses for the pauser role.
          items:
            type: string
            description: Wallet address
            example: '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
          example:
            - '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
            - 0x8ba1f109551bD432803012645Hac136c34B8f7f7
        salvager:
          type: array
          description: List of addresses for the salvager role.
          items:
            type: string
            description: Wallet address
            example: '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
          example:
            - '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
            - 0x8ba1f109551bD432803012645Hac136c34B8f7f7
        upgrader:
          type: array
          description: List of addresses for the upgrader role.
          items:
            type: string
            description: Wallet address
            example: '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
          example:
            - '0x742d35Cc6634C0532925a3b8D4C2C4e4C7C6B5f6'
            - 0x8ba1f109551bD432803012645Hac136c34B8f7f7
    TokenizationSolTokenPermissionParams:
      type: object
      description: 'Role-based permission settings for the Solana Token-2022 Program. If not provided, all permissions will be granted to the issuing wallet by default.'
      properties:
        permanent_delegate:
          type: string
          description: Solana wallet address assigned as the permanent delegate authority. It can perform delegated operations on behalf of token holders.
          example: 9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM
        minter:
          type: string
          description: Solana wallet address assigned as the mint authority. It can mint new tokens.
          example: 9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM
        freezer:
          type: string
          description: Solana wallet address assigned as the freeze authority. It can freeze token accounts.
          example: 9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM
        updater:
          type: string
          description: Solana wallet address assigned as the update authority. It can update token metadata.
          example: 9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM
        pauser:
          type: string
          description: 'Solana wallet address assigned as the pause authority. It can pause or unpause all token activities including transfers, burns, and mints.'
          example: 9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM
    TokenizationTokenPermissionType:
      type: string
      description: The type of permission for token operations.
      enum:
        - ManagePermissions
        - ManageAccessAndControls
        - MintTokens
        - BurnTokens
        - RecoverTokens
        - UpgradeContract
        - PauseContract
        - FreezeAccounts
        - UpdateMetadata
        - PermanentDelegate
      example: MintTokens
    TokenizationTokenPermissionsResponse:
      type: object
      properties:
        permissions:
          type: array
          description: List of available token permissions.
          items:
            $ref: '#/components/schemas/TokenizationTokenPermission'
        total_count:
          type: integer
          description: Total number of permissions.
          example: 7
      required:
        - permissions
        - total_count
    TokenizationTokenStandard:
      type: string
      description: The standard of token to create.
      enum:
        - ERC20
        - SPLToken2022
      example: ERC20
    TokenizationOperationType:
      type: string
      description: The type of tokenization operation.
      enum:
        - Issue
        - Mint
        - Burn
        - Pause
        - Unpause
        - UpdateAllowlistAddresses
        - UpdateBlocklistAddresses
        - ToggleAllowlist
        - ContractCall
      example: Issue
    TokenizationWeb3OperationSource:
      title: Web3
      type: object
      properties:
        source_type:
          $ref: '#/components/schemas/TokenizationOperationSourceType'
        wallet_id:
          type: string
          format: uuid
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address:
          type: string
          description: The wallet address used to interact with the token contract.
          example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
      required:
        - source_type
        - wallet_id
        - address
    TokenizationEvmContractCallParams:
      type: object
      description: The information about the EVM contract call.
      required:
        - calldata
      properties:
        type:
          $ref: '#/components/schemas/TokenizationContractCallType'
        calldata:
          type: string
          description: |
            The data that is used to invoke a specific function or method within the specified contract at the destination address.
          example: 0xa22cb4650000000000000000000000001e0049783f008a0085193e00003d00cd54003c71000000000000000000000000000000000000000000000000000000000000DEMO
        value:
          type: string
          description: |
            The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`.
          example: '1.5'
    TokenizationSolContractCallParams:
      type: object
      description: The information about the Solana program call.
      required:
        - instructions
      properties:
        type:
          $ref: '#/components/schemas/TokenizationContractCallType'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/SolContractCallInstruction'
    TokenizationContractCallRequest:
      allOf:
        - $ref: '#/components/schemas/TokenizationContractCallParams'
        - $ref: '#/components/schemas/TokenizationAppInitiator'
        - type: object
          properties:
            fee:
              $ref: '#/components/schemas/TransactionRequestFee'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - fee
    TokenizationContractCallParams:
      type: object
      description: The information about the contract call.
      required:
        - calldata
      properties:
        source:
          $ref: '#/components/schemas/TokenizationTokenOperationSource'
        data:
          oneOf:
            - $ref: '#/components/schemas/TokenizationEvmContractCallParams'
            - $ref: '#/components/schemas/TokenizationSolContractCallParams'
          discriminator:
            propertyName: type
            mapping:
              EVM_Contract: '#/components/schemas/TokenizationEvmContractCallParams'
              SOL_Contract: '#/components/schemas/TokenizationSolContractCallParams'
    TokenizationAppInitiator:
      type: object
      properties:
        app_initiator:
          type: string
          example: steve@example.com
          description: 'The initiator of the tokenization activity. If you do not specify this property, the WaaS service will automatically designate the API key as the initiator.'
    TokenizationIssueEstimateFeeParams:
      title: Issue
      allOf:
        - $ref: '#/components/schemas/TokenizationIssueTokenParams'
        - type: object
          properties:
            operation_type:
              $ref: '#/components/schemas/TokenizationOperationType'
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - operation_type
    TokenizationMintEstimateFeeParams:
      title: Mint
      allOf:
        - $ref: '#/components/schemas/TokenizationMintTokenParams'
        - type: object
          properties:
            operation_type:
              $ref: '#/components/schemas/TokenizationOperationType'
            token_id:
              type: string
              description: The ID of the token.
              example: 8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - operation_type
            - token_id
    TokenizationBurnEstimateFeeParams:
      title: Burn
      allOf:
        - $ref: '#/components/schemas/TokenizationBurnTokenParams'
        - type: object
          properties:
            operation_type:
              $ref: '#/components/schemas/TokenizationOperationType'
            token_id:
              type: string
              description: The ID of the token.
              example: 8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - operation_type
            - token_id
    TokenizationPauseEstimateFeeParams:
      title: Pause
      allOf:
        - $ref: '#/components/schemas/TokenizationPauseTokenParams'
        - type: object
          properties:
            operation_type:
              $ref: '#/components/schemas/TokenizationOperationType'
            token_id:
              type: string
              description: The ID of the token.
              example: 8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - operation_type
            - token_id
    TokenizationUnpauseEstimateFeeParams:
      title: Unpause
      allOf:
        - $ref: '#/components/schemas/TokenizationUnpauseTokenParams'
        - type: object
          properties:
            operation_type:
              $ref: '#/components/schemas/TokenizationOperationType'
            token_id:
              type: string
              description: The ID of the token.
              example: 8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - operation_type
            - token_id
    TokenizationUpdateAllowlistAddressesEstimateFeeParams:
      title: Update allowlist addresses
      allOf:
        - $ref: '#/components/schemas/TokenizationUpdateAllowlistAddressesParams'
        - type: object
          properties:
            operation_type:
              $ref: '#/components/schemas/TokenizationOperationType'
            token_id:
              type: string
              description: The ID of the token.
              example: 8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - operation_type
            - token_id
    TokenizationUpdateBlocklistAddressesEstimateFeeParams:
      title: Update blocklist addresses
      allOf:
        - $ref: '#/components/schemas/TokenizationUpdateBlocklistAddressesParams'
        - type: object
          properties:
            operation_type:
              $ref: '#/components/schemas/TokenizationOperationType'
            token_id:
              type: string
              description: The ID of the token.
              example: 8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - operation_type
            - token_id
    TokenizationToggleAllowlistEstimateFeeParams:
      title: Toggle allowlist
      allOf:
        - $ref: '#/components/schemas/TokenizationAllowlistActivationParams'
        - type: object
          properties:
            operation_type:
              $ref: '#/components/schemas/TokenizationOperationType'
            token_id:
              type: string
              description: The ID of the token.
              example: 8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - operation_type
            - token_id
    TokenizationContractCallEstimateFeeParams:
      title: Contract call
      allOf:
        - $ref: '#/components/schemas/TokenizationContractCallParams'
        - type: object
          properties:
            operation_type:
              $ref: '#/components/schemas/TokenizationOperationType'
            token_id:
              type: string
              description: The ID of the token.
              example: 8a4f9324-ef2a-43cf-9f0e-d7f99999d3e8
            request_id:
              type: string
              description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
          required:
            - operation_type
            - token_id
    TokenizationUpdateAddressAction:
      type: string
      description: The operation to perform on the blocklist or allowlist.
      enum:
        - Grant
        - Revoke
    TokenizationListEnabledChainsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: string
            description: The chain id.
            example: ETH
          description: The list of tokenization supported chains.
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
        - data
        - pagination
    TokenizationContractCallType:
      type: string
      enum:
        - EVM_Contract
        - SOL_Contract
      example: EVM_Contract
      description: The type of contract call.
    SweepToAddress:
      type: object
      description: Information about the sweep-to address.
      required:
        - address
        - chain_id
      properties:
        address:
          type: string
          description: The wallet address.
          example: '0x0000000000000000000000000000000000000000'
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
        status:
          $ref: '#/components/schemas/SweepToAddressStatus'
    SweepToAddressStatus:
      type: string
      enum:
        - Valid
        - Invalid
      example: Valid
      description: |
        The status of the sweep-to address:

        - `Valid`: The sweep-to address is active and used for auto token sweeping.
        - `Invalid`: The sweep-to address is no longer used for auto token sweeping.
    CreateSweepToAddress:
      type: object
      title: CreateSweepToAddressRequest
      required:
        - wallet_id
        - chain_id
      description: Information of the new sweep-to address to be created.
      properties:
        wallet_id:
          type: string
          description: The wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        chain_id:
          type: string
          description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
          example: ETH
    AutoSweepTask:
      type: object
      description: Auto-sweep task information.
      required:
        - task_id
        - wallet_id
        - token_id
        - status
        - created_timestamp
      properties:
        task_id:
          type: string
          description: Auto-sweep task ID.
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        wallet_id:
          type: string
          description: Wallet ID.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        token_id:
          type: string
          description: 'Token ID of the swept token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
        status:
          $ref: '#/components/schemas/AutoSweepTaskStatus'
        transaction_ids:
          type: array
          items:
            type: string
            example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
          description: IDs of the transactions triggered by the task.
        failed_reasons:
          type: array
          items:
            type: string
            example: exist pending transaction
          description: Reasons why the task creation failed.
        created_timestamp:
          type: integer
          format: int64
          description: 'The time when the task was created, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
        updated_timestamp:
          type: integer
          format: int64
          description: 'The time when the task was updated, in Unix timestamp format, measured in milliseconds.'
          example: 1610445878970
    AutoSweepTaskStatus:
      type: string
      enum:
        - Submitted
        - TransactionCreated
      example: Submitted
      description: |
        Auto-sweep task status:
        - `Submitted`: The auto-sweep task has been submitted.
        - `TransactionCreated`: The auto-sweep task triggered one or more token sweeping transactions.
    CreateAutoSweepTask:
      type: object
      description: Wallet and token information required to create an auto-sweep task.
      required:
        - wallet_id
        - token_id
      properties:
        wallet_id:
          type: string
          description: ID of the wallet where the token will be swept.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        token_id:
          type: string
          description: 'ID of the token to be swept. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
          example: ETH_USDT
  parameters:
    sortByParam:
      name: sort_by
      in: query
      description: The field used for sorting.
      required: false
      schema:
        type: string
        default: ''
      example: timestamp
    directionParam:
      name: direction
      in: query
      description: |
        The sort direction. Possible values include:
          - `ASC`: Sort the results in ascending order.
          - `DESC`: Sort the results in descending order.
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ASC
      example: ASC
    limitParam:
      name: limit
      in: query
      description: 'The maximum number of objects to return. For most operations, the value range is [1, 50].'
      required: false
      schema:
        type: integer
        format: int32
        default: 10
      example: 10
    beforeParam:
      name: before
      in: query
      description: |
        A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response.
      required: false
      schema:
        type: string
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGmk1
    afterParam:
      name: after
      in: query
      description: |
        A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response.
      required: false
      schema:
        type: string
      example: RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk
    optionalAssetIdParam:
      name: asset_id
      in: query
      required: false
      description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
      schema:
        type: string
      example: USDT
    optionalAssetIdListParam:
      name: asset_ids
      in: query
      required: false
      description: '(This concept applies to Exchange Wallets only) A list of asset IDs, separated by comma. An asset ID is the unique identifier of the asset held within your linked exchange account.'
      schema:
        type: string
        description: 'A list of asset IDs, separated by comma.'
      example: 'USDT,USDC'
    requiredAssetIdParam:
      name: asset_id
      in: query
      required: true
      description: (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
      schema:
        type: string
      example: USDT
    chainIdParam:
      name: chain_id
      in: path
      required: true
      description: 'The chain ID, which is the unique identifier of a blockchain.'
      schema:
        type: string
      example: ETH
    requiredChainIdParam:
      name: chain_id
      in: query
      required: true
      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
      example: ETH
    optionalChainIdParam:
      name: chain_id
      in: query
      required: false
      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
      example: ETH
    optionalChainIdListParam:
      name: chain_ids
      in: query
      required: false
      description: 'A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
        description: 'A list of chain IDs, separated by comma.'
      example: 'BTC,ETH'
    requiredChainIdListParam:
      name: chain_ids
      in: query
      required: true
      description: 'A list of chain IDs, separated by comma. The chain ID is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
      schema:
        type: string
        description: 'A list of chain IDs, separated by comma.'
      example: 'BTC,ETH'
    tokenIdParam:
      name: token_id
      in: path
      required: true
      description: 'The token ID, which is the unique identifier of a token.'
      schema:
        type: string
      example: ETH_USDT
    optionalTokenIdParam:
      name: token_id
      in: query
      required: false
      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
      example: ETH_USDT
    optionalTokenListIdParam:
      name: token_ids
      in: query
      required: false
      description: 'A list of token IDs, separated by comma. The token ID is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
        description: 'A list of token IDs, separated by comma.'
      example: 'ETH_USDT,ETH_USDC'
    requiredTokenIdParam:
      name: token_id
      in: query
      required: true
      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
      schema:
        type: string
      example: ETH_USDT
    requiredFeeRateParam:
      name: fee_rate
      in: query
      required: true
      description: The fee rate in sats/vByte or gas price in wei.
      schema:
        type: string
      example: '10'
    requiredWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: true
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    optionalWalletTypeParam:
      name: wallet_type
      in: query
      required: false
      description: |
        The wallet type.

        - `Custodial`: [Custodial Wallets](https://manuals.cobo.com/en/portal/custodial-wallets/introduction)

        - `MPC`: [MPC Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction)

        - `SmartContract`: [Smart Contract Wallets](https://manuals.cobo.com/en/portal/smart-contract-wallets/introduction)

        - `Exchange`: [Exchange Wallets](https://manuals.cobo.com/en/portal/exchange-wallets/introduction)
      schema:
        $ref: '#/components/schemas/WalletType'
    optionalWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: false
      description: |
        The wallet subtype.

        - `Asset`: Custodial Wallets (Asset Wallets)

        - `Web3`: Custodial Wallets (Web3 Wallets)

        - `Main`: Exchange Wallets (Main Account)

        - `Sub`: Exchange Wallets (Sub Account)

        - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets)

        - `User-Controlled`: MPC Wallets (User-Controlled Wallets)

        - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet})
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    walletIdParam:
      name: wallet_id
      in: path
      required: true
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalWalletIdParam:
      name: wallet_id
      in: query
      required: false
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    requiredWalletIdParam:
      name: wallet_id
      in: query
      required: true
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalWalletListIdParam:
      name: wallet_ids
      in: query
      required: false
      description: 'A list of wallet IDs, separated by comma.'
      schema:
        type: string
        description: 'A list of wallet IDs, separated by comma.'
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868'
    addressParam:
      name: address
      in: path
      required: true
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    requiredAddressParam:
      name: address
      in: query
      required: true
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    requiredAddressListParam:
      name: addresses
      in: query
      required: true
      description: 'A list of wallet addresses, separated by comma. You can specify a maximum of 100 addresses.'
      schema:
        type: string
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'
    optionalAddressListParam:
      name: addresses
      in: query
      required: false
      description: 'A list of wallet addresses, separated by comma. For addresses requiring a memo, append the memo after the address using the ''|'' separator (e.g., "address|memo").'
      schema:
        type: string
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'
    requiredTradingAccountTypeParam:
      name: trading_account_type
      in: query
      required: true
      description: The trading account type.
      schema:
        type: string
      example: SPOT
    optionalTradingAccountTypeListParam:
      name: trading_account_types
      in: query
      required: false
      description: 'A list of trading account types, separated by comma. You can get the the supported trading account types of an exchange by calling [List supported exchanges](https://www.cobo.com/developers/v2/api-references/wallets--exchange-wallet/list-supported-exchanges).'
      schema:
        type: string
      example: 'Trading,Funding'
    optionalAddressParam:
      name: address
      in: query
      required: false
      description: The wallet address.
      schema:
        type: string
        description: The wallet address.
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
    requiredToAddressParam:
      name: to_address
      in: query
      required: true
      description: The recipient's address.
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    optionalToAddressParam:
      name: to_address
      in: query
      required: false
      description: The recipient's address.
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    optionalFromAddressParam:
      name: from_address
      in: query
      required: false
      description: 'The sender''s address. For EVM addresses in MPC Wallets, this parameter is required.'
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    optionalUtxoTxHashParam:
      name: tx_hash
      in: query
      required: false
      schema:
        type: string
        description: The transaction hash of the UTXO.
      example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
    requiredSourceWalletIdParam:
      name: source_wallet_id
      in: query
      required: true
      description: The wallet ID of the transaction source.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    requiredDestinationAddressesParam:
      name: destination_addresses
      in: query
      required: true
      description: 'A list of destination addresses, separated by comma.'
      schema:
        type: string
      example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045,0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97'
    keyShareHolderGroupIdParam:
      name: key_share_holder_group_id
      in: path
      required: true
      description: The key share holder group ID.
      schema:
        type: string
      example: e8257ac8-76b8-4d1e-a1f9-eec4cb931dce
    optionalKeyShareHolderGroupTypeParam:
      name: key_share_holder_group_type
      in: query
      description: |
        The key share holder group type. Possible values include:
        - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).

        - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).

        - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).

        **Note**: If this parameter is left empty, all key share holder group types will be retrieved.
      required: false
      schema:
        $ref: '#/components/schemas/KeyShareHolderGroupType'
    projectIdParam:
      name: project_id
      in: path
      required: true
      description: 'The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalProjectIdQueryParam:
      name: project_id
      in: query
      description: |
        (This parameter is only applicable to User-Controlled Wallets.) The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalProjectIdListQueryParam:
      name: project_ids
      in: query
      description: 'A list of MPC project IDs, separated by comma.'
      schema:
        type: string
      example: 'a3d8eae2-1740-4b5e-92f2-88c2b1e44c6b,b51f63a3-8a8e-4a34-ae9e-6f3e6b1fdf99'
    requiredKeyShareHolderGroupIdParam:
      name: key_share_holder_group_id
      in: query
      description: 'The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).'
      required: true
      schema:
        type: string
      example: a3a45e99-5a12-444f-867a-ffe0ebb1bb30
    tssRequestIdParam:
      name: tss_request_id
      in: path
      required: true
      description: 'The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).'
      schema:
        type: string
      example: '20240711114129000132315000003970'
    vaultIdParam:
      name: vault_id
      in: path
      required: true
      description: 'The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultIdQueryParam:
      name: vault_id
      in: query
      required: false
      description: 'The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultIdListQueryParam:
      name: vault_ids
      in: query
      required: false
      description: 'A list of vault IDs, separated by comma.'
      schema:
        type: string
      example: 'f5c3f9e8-1d8a-44b2-9284-94bf76b7b017,ab2e3f55-472e-4a98-86d1-446d2f9e839e'
    optionalVaultNameParam:
      name: vault_name
      in: query
      required: false
      description: Unique id of the mpc vault
      schema:
        type: string
      example: my vault name
    tssNodeIdParam:
      name: tss_node_id
      in: path
      required: true
      description: The TSS Node ID.
      schema:
        type: string
      example: coboBTGDvjJG99pABegvPYmavrcTU3SkjTLHVdsko8dWBga4w
    optionalGroupIdsListQueryParam:
      name: key_share_holder_group_ids
      in: query
      required: false
      description: 'A list of key share holder group IDs, separated by comma. You can retrieve the IDs of all the key share holder groups by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).'
      schema:
        type: string
      example: 'dc0cac48-9add-4243-9c7a-b8badac8a198,5558bd1b-d221-4e2b-8c29-f6c97d9e6aca'
    exchangeIdParam:
      name: exchange_id
      in: path
      required: true
      description: |
        The ID of the exchange. Possible values include:
          - `binance`: Binance.
          - `okx`: OKX.
          - `deribit`: Deribit.
          - `bybit`: Bybit.
          - `gate`: Gate.io
          - `bitget`: Bitget
          - `bitmart`: BitMart
          - `bitfinex`: Bitfinex
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalExchangeIdParam:
      name: exchange_id
      in: query
      required: false
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    requiredExchangeIdParam:
      name: exchange_id
      in: query
      required: true
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalApikeyParam:
      name: apikey
      in: query
      description: The API Key for the exchange
      required: false
      schema:
        type: string
      example: d8f062da-39f4-4a11-8b9d-12595854237f
    optionalSecretParam:
      name: secret
      in: query
      description: The API Secret for the exchange.
      required: false
      schema:
        type: string
      example: 75B4F636193162488A3728B4A5797708
    optionalPassphraseParam:
      name: passphrase
      in: query
      description: The API passphrase for the exchange wallet.
      required: false
      schema:
        type: string
      example: A3DBHJV
    optionalRequestIdParam:
      name: request_id
      in: query
      required: false
      description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
      schema:
        type: string
      example: web_send_by_user_327_1610444045047
    optionalCoboIdParam:
      name: cobo_ids
      in: query
      required: false
      description: 'A list of Cobo IDs, separated by comma. A Cobo ID can be used to track a transaction.'
      schema:
        type: string
      example: '20231213122855000000000000000000,20231213122955000000000000000000'
    optionalTransactionIdParam:
      name: transaction_ids
      in: query
      required: false
      description: 'A list of transaction IDs, separated by comma.'
      schema:
        type: string
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3'
    optionalTransactionTypeParam:
      name: type
      in: query
      required: false
      description: The type of a transaction
      schema:
        $ref: '#/components/schemas/TransactionType'
    optionalTransactionTypeListParam:
      name: types
      in: query
      required: false
      description: |
        A list of transaction types, separated by comma. Possible values include: 
          - `Deposit`: A deposit transaction.
          - `Withdrawal`: A withdrawal transaction.
          - `ContractCall`: A transaction that interacts with a smart contract.
          - `MessageSign`: A transaction that signs a message. 
          - `ExternalSafeTx`: A transaction to a Smart Contract Wallet (Safe{Wallet}) that requires one or multiple signatures to be executed.
          - `Stake`: A transaction that creates a staking request.
          - `Unstake`: A transaction that creates a unstaking request.
      schema:
        type: string
      example: 'Deposit,Withdrawal'
    optionalTransactionStatusParam:
      name: status
      in: query
      required: false
      description: The status of a transaction
      schema:
        $ref: '#/components/schemas/TransactionStatus'
    optionalTransactionStatusListParam:
      name: statuses
      in: query
      required: false
      description: |
        A list of transaction statuses, separated by comma. Possible values include: 
          - `Submitted`: The transaction is submitted.
          - `PendingScreening`: The transaction is pending screening by Risk Control. 
          - `PendingAuthorization`: The transaction is pending approvals.
          - `PendingSignature`: The transaction is pending signature. 
          - `Broadcasting`: The transaction is being broadcast.
          - `Confirming`: The transaction is waiting for the required number of confirmations.
          - `Completed`: The transaction is completed.
          - `Failed`: The transaction failed.
          - `Rejected`: The transaction is rejected.
          - `Pending`: The transaction is waiting to be included in the next block of the blockchain.
      schema:
        type: string
      example: 'Completed,Failed'
    optionalMinCreatedTimestampParam:
      name: min_created_timestamp
      in: query
      required: false
      description: |
        The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or after the specified time.

        If not provided, the default value is 90 days before the current time. This default value is subject to change.
      schema:
        type: integer
        format: int64
      example: 1635744000000
    optionalMaxCreatedTimestampParam:
      name: max_created_timestamp
      in: query
      required: false
      description: |
        The time when the transaction was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter transactions created on or before the specified time.

        If not provided, the default value is the current time. This default value is subject to change.
      schema:
        type: integer
        format: int64
      example: 1635744000000
    optionalTransactionSourceTypeListParam:
      name: source_types
      in: query
      required: false
      description: |
        A list of transaction source types, separated by comma. Possible values include:
          - `Asset`: Custodial Wallets (Asset Wallets).
          - `Org-Controlled`: MPC Wallets (Organization-Controlled Wallets).
          - `User-Controlled`: MPC Wallets (User-Controlled Wallets).
          - `Safe{Wallet}`: Smart Contract Wallets (Safe{Wallet}).
          - `Main`: Exchange Wallets (Main Account).
          - `Sub`: Exchange Wallets (Sub Account).
          - `DepositFromAddress`: An address which can include both Cobo's wallet addresses and external addresses.
          - `DepositFromWallet`: An Exchange Wallet.
          - `DepositFromLoop`: A transfer sender through the [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) network.
      schema:
        type: string
      example: 'Asset,DepositFromAddress'
    optionalTransactionSourceAddressListParam:
      name: source_wallet_ids
      in: query
      required: false
      description: 'A list of wallet IDs of the transaction sources, separated by comma.'
      schema:
        type: string
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3'
    optionalTransactionSourceWalletIdListParam:
      name: source_addresses
      in: query
      required: false
      description: 'A list of addresses of the transaction source, separated by comma.'
      schema:
        type: string
    optionalTransactionDestinationTypeListParam:
      name: destination_types
      in: query
      required: false
      description: |
        A list of transaction destination types, separated by comma. Possible values include:
          - `Address`: An external address. 
          - `ContractCall`: A transaction that interacts with a smart contract.
          - `MessageSign`: A transaction that signs a message. 
          - `CustodialWallet`: A Custodial Wallet.
          - `MPCWallet`: An MPC Wallet.
          - `SafeWallet`: A Smart Contract Wallets (Safe{Wallet}).
          - `ExchangeWallet`: An Exchange Wallet.
      schema:
        type: string
      example: 'ContractCall,MessageSign'
    optionalTransactionDestinationAddressListParam:
      name: destination_wallet_ids
      in: query
      required: false
      description: 'A list of wallet IDs of the transaction destinations, separated by comma.'
      schema:
        type: string
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,557918d2-632a-4fe1-932f-315711f05fe3'
    optionalTransactionDestinationWalletIdListParam:
      name: destination_addresses
      in: query
      required: false
      description: |
        A list of addresses of the transaction destination, separated by comma. If the address includes a memo, use `|` to append the memo to the address. For example, if the address is `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku` and the memo is `82840924`, you need to provide `19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku|82840924` as the property value.
      schema:
        type: string
    transactionIdParam:
      name: transaction_id
      in: path
      required: true
      description: The transaction ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalTransactionHashParam:
      name: transaction_hashes
      in: query
      required: false
      description: 'A list of transaction hashes, separated by comma.'
      schema:
        type: string
      example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
    optionalRequestIDsParam:
      name: request_ids
      in: query
      required: false
      description: 'A list of request IDs, separated by comma.'
      schema:
        type: string
      example: 'web_send_by_user_327_1610444045047,web_send_by_user_327_1610444045048'
    optionalTemplateVersionParam:
      name: template_version
      in: query
      required: false
      description: Version of the template.
      schema:
        type: string
      example: 1.0.0
    requiredTemplateKeyParam:
      name: template_key
      in: query
      required: true
      schema:
        type: string
      example: withdrawal
      description: |
        Key of the transaction template used to create an approval message.
    webhookEventIdParam:
      name: event_id
      in: path
      required: true
      description: 'The event ID. You can obtain a list of event IDs by calling [List all events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-events).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    endpointIdParam:
      name: endpoint_id
      in: path
      required: true
      description: 'The webhook endpoint ID. You can retrieve a list of webhook endpoint IDs by calling [List webhook endpoints](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-webhook-endpoints).'
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    activityIdRequiredParam:
      name: activity_id
      in: path
      required: true
      description: The activity ID.
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    poolIdRequiredParam:
      name: pool_id
      in: path
      required: true
      description: 'The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token. You can call [List staking pools](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-pools) to retrieve a list of staking pools.'
      schema:
        type: string
      example: babylon_btc
    poolIdOptionalParam:
      name: pool_id
      in: query
      required: false
      description: 'The ID of the staking pool. A staking pool is a pairing of a staking protocol and a specific type of token. You can call [List staking pools](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-pools) to retrieve a list of staking pools.'
      schema:
        type: string
      example: babylon_btc
    stakingIdRequiredParam:
      name: staking_id
      in: path
      required: true
      description: 'The ID of the staking position. You can retrieve a list of staking positions by calling [List staking positions](https://www.cobo.com/developers/v2/api-references/stakings/list-staking-positions).'
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    stakingIdOptionalParam:
      name: staking_id
      in: query
      required: false
      description: The ID of the Phase-1 BTC staking position.
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    activityTypeOptionalParam:
      name: activity_type
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/ActivityType'
      example: Stake
    activityStatusOptionalParam:
      name: activity_status
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/ActivityStatus'
      example: Success
    activityInitiatorOptionalParam:
      name: initiator
      in: query
      required: false
      description: 'The activity initiator, which is your API key by default. You can also specify the initiator when creating the activity.'
      schema:
        type: string
      example: steve@example.com
    maxModifiedTimestampOptionalParam:
      name: max_modified_timestamp
      in: query
      required: false
      description: 'The end time of the query. All staking activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.'
      schema:
        type: integer
        format: int64
      example: 1635744000000
    minModifiedTimestampOptionalParam:
      name: min_modified_timestamp
      in: query
      required: false
      description: 'The start time of the query. All staking activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.'
      schema:
        type: integer
        format: int64
      example: 1635744000000
    babylonRegistrationStatusOptionalParam:
      name: status
      in: query
      description: |
        The status of Babylon airdrop or Phase-2 registration. Possible values are:
        - `Registered`: Registered for Babylon airdrop or Phase-2.
        - `Unregistered`: Not registered for any Babylon airdrop or Phase-2.
        - `Registering`: The Babylon airdrop or Phase-2 registration is in progress but not yet completed.
      required: false
      schema:
        type: string
        enum:
          - Registered
          - Unregistered
          - Registering
        example: Registered
    babylonRegistrationRequestStatusOptionalParam:
      name: status
      in: query
      description: The registration request status.
      required: false
      schema:
        type: string
        enum:
          - Processing
          - Completed
          - Failed
        example: Processing
        description: |
          The status of a Babylon airdrop or Babylon Phase-2 registration request. Possible values include:
          - `Processing`: The registration request is being processed.
          - `Completed`: The registration has been completed.
          - `Failed`: The registration failed.
    babylonRegistrationIdRequiredParam:
      name: registration_id
      in: path
      description: 'The Babylon airdrop or Babylon Phase-2 registration ID. You can use the [Register for Babylon airdrop](https://www.cobo.com/developers/v2/api-references/stakings/register-for-babylon-airdrop) or the [Register for Babylon Phase-2](https://www.cobo.com/developers/v2/api-references/stakings/register-for-babylon-phase-2) operation to get this information.'
      required: true
      schema:
        type: string
    btcAddressOptionalParam:
      name: btc_address
      in: query
      required: false
      description: The Bitcoin (BTC) address used for staking.
      schema:
        type: string
      example: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa
    ClientIdRequiredParam:
      name: client_id
      in: query
      required: true
      description: 'The client ID, a unique identifier to distinguish Cobo Portal Apps. You can get the client ID by retrieving the manifest file after publishing the app.'
      schema:
        type: string
      example: pvSwS8iFrfK0oZrB0ugG54XPDOLEv0Ij
    OrgIdRequiredParam:
      name: org_id
      in: query
      required: true
      description: 'Organization ID, a unique identifier to distinguish different organizations. You can get the organization ID from the callback message sent to the URL that was configured in the manifest file.'
      schema:
        type: string
      example: e3986401-4aec-480a-973d-e775a4518413
    GrantTypeRequiredParam:
      name: grant_type
      in: query
      required: true
      description: The OAuth grant type. Set the value as `org_implicit`.
      schema:
        type: string
      example: org_implicit
    optionalAddressBookLabelParam:
      name: label
      in: query
      required: false
      description: The address label.
      schema:
        type: string
        description: The address label.
      example: test
    requiredTransactionTypeParam:
      name: transaction_type
      in: query
      required: true
      schema:
        type: string
        enum:
          - DEPOSIT
          - WITHDRAW
      example: DEPOSIT
      description: |
        The transaction type. Possible values include: 
          - `DEPOSIT`: A deposit transaction.
          - `WITHDRAW`: A withdrawal transaction.
    requiredTransactionIdParam:
      name: transaction_id
      in: query
      required: true
      description: The transaction ID.
      schema:
        type: string
        format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000
    apilogIdParam:
      name: log_id
      in: path
      required: true
      description: The API log ID.
      schema:
        type: string
      example: e39864014aec480a973de775a4518413
    optionalApiEndTimestampParam:
      name: end_timestamp
      in: query
      required: false
      schema:
        type: integer
        format: int64
      example: 1640918000000
      description: 'The time when the API request was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter API logs of requests created on or before the specified time.'
    optionalApiStartTimestampParam:
      name: start_timestamp
      in: query
      required: false
      schema:
        type: integer
        format: int64
      example: 1640918000000
      description: 'The time when the API request was created, in Unix timestamp format, measured in milliseconds. You can use this parameter to filter API logs of requests created on or after the specified time.'
    optionalApiStatusCodeParam:
      name: status_code
      in: query
      required: false
      schema:
        type: string
      example: '400,401'
      description: 'The HTTP status code returned by the API request. For more details, refer to [Error codes and status codes](https://www.cobo.com/developers/v2/api-references/error-codes).'
    optionalApiMethodParam:
      name: method
      in: query
      required: false
      schema:
        type: string
        enum:
          - GET
          - POST
          - PUT
          - DELETE
      example: GET
      description: |
        The HTTP method used for the API request. Possible values include:
          - `GET`: The GET method.
          - `POST`: The POST method.
          - `PUT`: The PUT method.
          - `DELETE`: The DELETE method.
    optionalApiKeyParam:
      name: api_key
      in: query
      required: false
      schema:
        type: string
      example: 8926ce37029ed650eb7aee66999658cad2653dbc2dbc758c04fc4dc937b47f25
      description: 'The API key used to call the API. For more details, refer to [API key](https://www.cobo.com/developers/v2/guides/overview/cobo-auth#api-key).'
    optionalApiEndpointParam:
      name: api_endpoint
      in: query
      required: false
      schema:
        type: string
      example: /v2/wallets/asset
      description: The endpoint of the API request.
    optionalApiIpAddressParam:
      name: ip_address
      in: query
      required: false
      schema:
        type: string
      example: 127.0.0.1
      description: The client's IP address that made the API request.
    optionalApiLogStatusParam:
      name: status
      in: query
      required: false
      schema:
        type: string
        enum:
          - Success
          - Failed
      example: Success
      description: The API request status. Possible values are `Success` and `Failed`.
    optionalApiLogClientIdParam:
      name: client_id
      in: query
      required: false
      schema:
        type: string
      example: 9535384b-33cf-4ef7-88fa-74136f9748db1
      description: The client ID of the Cobo Portal App that made the API request.
    optionalCallbackMessageIdsParam:
      name: callback_message_ids
      in: query
      required: false
      schema:
        type: string
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479'
      description: 'A list of callback message IDs, separated by commas.'
    optionalTransactionIdsParam:
      name: transaction_ids
      in: query
      required: false
      schema:
        type: string
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479'
      description: 'A list of transaction IDs, separated by commas.'
    optionalWalletIdsParam:
      name: wallet_ids
      in: query
      required: false
      schema:
        type: string
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479'
      description: 'A list of wallet IDs, separated by commas.'
    optionalRequestIdsParam:
      name: request_ids
      in: query
      required: false
      schema:
        type: string
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d479'
      description: 'A list of request IDs, separated by commas. The request ID is provided by you and must be unique within your organization.'
    optionalCallbackStatusParam:
      name: status
      in: query
      required: false
      schema:
        type: string
        enum:
          - Denied
          - Approved
          - Failed
      example: Approved
      description: 'The callback message status. Possible values include `Approved`, `Denied`, and `Failed`.'
    callbackMessageIdParam:
      name: message_id
      in: path
      required: true
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      description: The callback message ID.
    activityIdParam:
      name: activity_id
      in: path
      required: true
      schema:
        type: string
      description: The unique id of the activity.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    initiatorOptionalParam:
      name: initiator
      in: query
      required: false
      description: 'The activity initiator, which is your API key by default. You can also specify the initiator when creating the activity.'
      schema:
        type: string
      example: steve@example.com
    payAmountRequiredParam:
      name: pay_amount
      in: query
      required: true
      schema:
        type: string
      description: The amount of pay token.
      example: '1.5'
    payAmountOptionalParam:
      name: pay_amount
      in: query
      required: false
      schema:
        type: string
      description: The amount of pay token.
      example: '1.5'
    receiveAmountRequiredParam:
      name: receive_amount
      in: query
      required: true
      schema:
        type: string
      description: The amount of token to receive.
      example: '2000'
    receiveAmountOptionalParam:
      name: receive_amount
      in: query
      required: false
      schema:
        type: string
      description: The amount of token to receive.
      example: '2000'
    payTokenIdRequiredParam:
      name: pay_token_id
      in: query
      required: true
      schema:
        type: string
      description: Unique id of the token to pay.
      example: ETH
    receiveTokenIdRequiredParam:
      name: receive_token_id
      in: query
      required: true
      schema:
        type: string
      description: Unique id of the token to receive.
      example: USDT
    swapActivityStatusOptionalParam:
      name: status
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/SwapActivityStatus'
      example: Success
    swapTypeOptionalParam:
      name: type
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/SwapType'
      example: Bridge
    swapActivityMinUpdatedTimestampOptionalParam:
      name: min_updated_timestamp
      in: query
      required: false
      description: 'The start time of the query. All staking activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.'
      schema:
        type: integer
        format: int64
      example: 1635744000000
    swapActivityMaxUpdatedTimestampOptionalParam:
      name: max_updated_timestamp
      in: query
      required: false
      description: 'The end time of the query. All staking activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.'
      schema:
        type: integer
        format: int64
      example: 1635744000000
    ApprovalIdParam:
      name: approval_id
      in: path
      required: true
      description: The system-generated unique ID of the approval request.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    ApprovalOperationIdParam:
      name: operation_id
      in: query
      required: true
      description: The unique ID of the approval workflow.
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    ApprovalRequestIdParam:
      name: request_id
      in: query
      required: true
      description: The request ID that is used to track a workflow request. The request ID is provided by you and must be unique within your app.
      schema:
        type: string
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    UserIdParam:
      name: user_id
      in: path
      required: true
      description: The user ID.
      schema:
        type: string
        description: The user ID.
      example: '168108513539918'
    optionalFeeStationTransactionTypeListParam:
      name: types
      in: query
      required: false
      description: |
        A list of transaction types for Fee Station, separated by comma. Possible values include: 
          - `Deposit`: A deposit transaction.
          - `Withdrawal`: A withdrawal transaction.
      schema:
        type: string
      example: 'Deposit,Withdrawal'
    BankIdPathParam:
      name: bank_account_id
      in: path
      required: true
      description: The bank account ID.
      schema:
        type: string
        format: uuid
        description: The bank account ID.
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    CurrencyRequiredParam:
      name: currency
      in: path
      required: true
      description: 'The fiat currency. Currently, only `USD` is supported.'
      schema:
        type: string
        default: USD
      example: USD
    CurrencyOptionalParam:
      name: currency
      in: query
      required: false
      description: 'The currency for the operation. Currently, only `USD` is supported.'
      schema:
        type: string
        default: USD
      example: USD
    KeywordOptionalParam:
      name: keyword
      in: query
      required: false
      description: A search term used for fuzzy matching of merchant names.
      schema:
        type: string
        description: The keyword.
      example: keyword
    MerchantIdOptionalParam:
      name: merchant_id
      in: query
      required: false
      description: The merchant ID.
      schema:
        type: string
      example: M1001
    MerchantIdRequiredParam:
      name: merchant_id
      in: query
      required: true
      description: The merchant ID.
      schema:
        type: string
      example: M1001
    MerchantIdPathParam:
      name: merchant_id
      in: path
      required: true
      description: The merchant ID.
      schema:
        type: string
      example: M1001
    MerchantIdsParam:
      name: merchant_ids
      in: query
      required: false
      description: A list of merchant IDs to query.
      schema:
        type: string
      example: 'M1001,M1002,M1003'
    OrderIdRequiredParam:
      name: order_id
      in: path
      required: true
      description: The pay-in order ID.
      schema:
        type: string
      example: O20250304-M1001-1001
    PayerIdRequiredParam:
      name: payer_id
      in: query
      required: true
      description: 'Unique payer identifier on the Cobo side, auto-generated by the system.'
      schema:
        type: string
      example: P20250619T0310056d7aa
    TokenIdRequiredParam:
      name: token_id
      in: path
      required: true
      description: |
        The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
          - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
          - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
      schema:
        type: string
      example: ETH_USDT
    TokenIdQueryRequiredParam:
      name: token_id
      in: query
      required: true
      description: |
        The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
          - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
          - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
      schema:
        type: string
      example: ETH_USDT
    TokenIdOptionalParam:
      name: token_id
      in: query
      required: false
      description: |
        The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
          - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
          - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
      schema:
        type: string
      example: ETH_USDT
    WalletIdOptionalParam:
      name: wallet_id
      in: query
      required: false
      description: The wallet ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    RefundIdPathParam:
      name: refund_id
      in: path
      required: true
      description: The refund order ID.
      schema:
        type: string
        description: The refund order ID.
      example: R20250304-M1001-1001
    RefundIdOptionalParam:
      name: refund_id
      in: query
      required: false
      description: The refund order ID.
      schema:
        type: string
        description: The refund order ID.
      example: R20250304-M1001-1001
    SettlementRequestIdPathParam:
      name: settlement_request_id
      in: path
      required: true
      description: The settlement request ID.
      schema:
        type: string
      example: S20250304-1001
    RequestIdOptionalParam:
      name: request_id
      in: query
      required: false
      description: The request ID.
      schema:
        type: string
      example: random_request_id
    PspOrderIdOptionalParam:
      name: psp_order_id
      in: query
      required: false
      description: A unique reference code assigned by the developer to identify this order in their system.
      schema:
        type: string
      example: P20240201001
    PayerIdOptionalParam:
      name: payer_id
      in: query
      required: false
      description: A unique identifier assigned by Cobo to track and identify individual payers.
      schema:
        type: string
      example: P20250619T0310056d7aa
    CustomPayerIdRequiredParam:
      name: custom_payer_id
      in: query
      required: true
      description: A unique identifier assigned by the developer to track and identify individual payers in their system.
      schema:
        type: string
      example: payer_0001
    AcquiringTypeOptionalParam:
      name: acquiring_type
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AcquiringType'
    PaymentStatusesParam:
      name: statuses
      in: query
      required: false
      description: |
        A list of order, refund or settlement statuses. You can refer to the following operations for the possible status values:
         - [Get pay-in order information](https://www.cobo.com/developers/v2/api-references/payment/get-pay-in-order-information)
         - [Get refund order information](https://www.cobo.com/developers/v2/api-references/payment/get-refund-order-information)
         - [List all settlement details](https://www.cobo.com/developers/v2/api-references/payment/list-all-settlement-details)
      schema:
        type: string
      example: 'Pending,Processing'
    CryptoAddressIdPathParam:
      name: crypto_address_id
      in: path
      required: true
      description: The crypto address ID.
      schema:
        type: string
        description: The crypto address ID.
      example: addr_ethusdt_20250506T123456_ab12cd
    AcquiringTypeRequiredParam:
      name: acquiring_type
      in: query
      required: true
      description: |
        The payment acquisition type.
        - `Order`: Payers pay by fixed-amount orders. Ideal for specific purchases and one-time transactions.
        - `TopUp`: Account recharge flow where payers deposit funds to their dedicated top-up addresses. Ideal for flexible or usage-based payment models.
      schema:
        $ref: '#/components/schemas/AcquiringType'
    WalletIdRequiredParam:
      name: wallet_ids
      in: query
      required: false
      description: A list of wallet IDs to query.
      schema:
        type: string
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,f47ac10b-58cc-4372-a567-0e02b2c3d472'
    tokenizationActivityIdPathParam:
      name: activity_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: The ID of the activity.
      example: b7c8e9d0-f1a2-3b4c-5d6e-7f8a9b0c1d2e
    tokenizationTokenStandardOptionalParam:
      name: token_standard
      in: query
      description: Filter by token standard.
      required: false
      schema:
        $ref: '#/components/schemas/TokenizationTokenStandard'
      example: ERC20
    tokenizationStatusOptionalParam:
      name: status
      in: query
      description: Filter by token status.
      required: false
      schema:
        $ref: '#/components/schemas/TokenizationStatus'
      example: Confirmed
    tokenizationActivityTypeOptionalParam:
      name: activity_type
      in: query
      description: Filter by tokenization activity type.
      required: false
      schema:
        $ref: '#/components/schemas/TokenizationOperationType'
    tokenizationActivityStatusOptionalParam:
      name: activity_status
      in: query
      description: Filter by tokenization activity status.
      required: false
      schema:
        $ref: '#/components/schemas/TokenizationActivityStatus'
    optionalTaskIdListParam:
      name: task_ids
      in: query
      required: false
      description: 'A list of auto-sweep task IDs, separated by comma.'
      schema:
        type: string
      example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479,1ddca562-8434-41c9-8809-d437bad9c868'
    taskIdParam:
      name: task_id
      in: path
      required: true
      description: The auto sweep task ID.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
  requestBodies:
    createWalletBody:
      description: The request body to create a wallet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateWalletParams'
    updateWalletBody:
      description: The request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateWalletParams'
    createAddressBody:
      description: The request body to generates addresses within a specified wallet.
      content:
        application/json:
          schema:
            type: object
            required:
              - chain_id
              - count
            properties:
              chain_id:
                type: string
                description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
                example: ETH
              count:
                type: integer
                maximum: 50
                minimum: 1
                default: 1
                description: The number of addresses to create. This property will be ignored if you are generating tweaked Taproot addresses.
                example: 1
              taproot_script_tree_hashes:
                type: array
                items:
                  type: string
                  example: '0x138fdd0f6c3803d45553e730c25924baf7be741b8a72a4e6fdbd9d44cb19f85b'
                description: A list of script tree hashes used to generate a tweaked Taproot address. This property is required only if you want to generate tweaked Taproot addresses.
              taproot_internal_address:
                type: string
                description: The original Taproot address to be tweaked. This property is required only if you want to generate tweaked Taproot addresses.
                example: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
              encoding:
                $ref: '#/components/schemas/AddressEncoding'
    lockUtxosBody:
      description: The request body of the Lock/Unlock UTXOs operation.
      content:
        application/json:
          schema:
            type: object
            required:
              - utxos
            properties:
              utxos:
                type: array
                items:
                  type: object
                  required:
                    - token_id
                    - tx_hash
                    - vout_n
                  properties:
                    token_id:
                      type: string
                      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
                      example: BTC
                    tx_hash:
                      type: string
                      description: The transaction hash.
                      example: 9bdf8e7ae03c237e115f09543fbdb40f8efa600106e78b67ce4d5adfadda2dbb
                    vout_n:
                      type: integer
                      description: The output index of the UTXO.
                      example: 0
    safeWalletDelegatesRequestBody:
      description: 'The request body to query the Delegates of a Safe{Wallet}.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SafeWalletDelegates'
    refreshAddressBalancesBody:
      description: The request body to refresh addresses balances.
      content:
        application/json:
          schema:
            type: object
            required:
              - addresses
            properties:
              addresses:
                type: array
                items:
                  type: string
                  example: 3HYV6ta67197syD1ZVFganpmL2wLz4RyoC
                description: A list of addresses.
    createTokenListingRequestBody:
      description: |
        Request body for submitting a token listing request.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - wallet_type
              - wallet_subtype
              - chain_id
              - contract_address
            properties:
              wallet_type:
                $ref: '#/components/schemas/WalletType'
              wallet_subtype:
                $ref: '#/components/schemas/WalletSubtype'
              chain_id:
                type: string
                description: The ID of the blockchain where the token is deployed.
                example: ETH
              contract_address:
                type: string
                description: The token's contract address on the specified blockchain.
                example: '0x6B175474E89094C44Da98b954EedeAC495271d0F'
    batchCheckUtxoRequestBody:
      description: The request body of the Batch check UTXOs operation.
      content:
        application/json:
          schema:
            type: object
            required:
              - token_id
              - utxos
            properties:
              token_id:
                type: string
                description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
                example: BTC
              utxos:
                type: array
                items:
                  $ref: '#/components/schemas/BatchUTXOParam'
    maxTransferableValueRequestBody:
      description: The request body for retrieving the maximum transferable value from a specified wallet.
      content:
        application/json:
          schema:
            type: object
            required:
              - token_id
              - fee
              - to_address
            properties:
              token_id:
                type: string
                description: 'The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens). For transfers from Exchange Wallets, this property value represents the asset ID.'
                example: ETH_USDT
              fee:
                $ref: '#/components/schemas/TransactionRequestFee'
              to_address:
                type: string
                description: The recipient's address.
                example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
              from_address:
                type: string
                description: The sender's address. This property is required when using an EVM address in an MPC Wallet.
                example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    createKeyShareHolderGroupBody:
      description: The request body to create a key share holder group.
      content:
        application/json:
          schema:
            type: object
            required:
              - key_share_holder_group_type
              - participants
              - threshold
              - key_share_holders
            properties:
              key_share_holder_group_type:
                $ref: '#/components/schemas/KeyShareHolderGroupType'
              participants:
                type: integer
                description: |
                  The number of key share holders in this key share holder group.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), so you can only set `participants` to 2 or 3. 

                  2. `threshold` must be less than or equal to `participants`.
                example: 3
              threshold:
                type: integer
                description: |
                  The number of key share holders required to sign an operation.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), so you can only set `threshold` to 2 or 3. 

                  2. `threshold` must be less than or equal to `participants`.
                example: 2
              key_share_holders:
                type: array
                items:
                  $ref: '#/components/schemas/CreateKeyShareHolder'
    createMpcProjectBody:
      description: The request body to create a project.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - participants
              - threshold
            properties:
              name:
                type: string
                example: Project name
                description: The project name.
              participants:
                type: integer
                description: |
                  The number of key share holders in the project.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), so you can only set `participants` to 2 or 3. 

                  2. `threshold` must be less than or equal to `participants`.
                example: 3
              threshold:
                type: integer
                description: |
                  The number of key share holders required to sign an operation in the project.

                  **Notes:**
                  1. Currently, the available [Threshold Signature Schemes (TSS)](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#threshold-signature-scheme-tss) are 2-2, 2-3, and 3-3 schemes (in the "threshold - participants" format), so you can only set `threshold` to 2 or 3. 

                  2. `threshold` must be less than or equal to `participants`.
                example: 2
    createTssRequestBody:
      description: The request body to create a TSS request.
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - target_key_share_holder_group_id
            properties:
              type:
                $ref: '#/components/schemas/TSSRequestType'
              target_key_share_holder_group_id:
                type: string
                description: The target key share holder group ID.
                example: a1bf161f-8b60-4f61-9c35-6434b8654437
              source_key_share_holder_group:
                $ref: '#/components/schemas/SourceGroup'
              description:
                type: string
                description: The description of the TSS request.
                example: This is a request to create key shares using the Recovery Group for a key share holder in the Main Group if their key share has been lost (e.g. by losing their phone).
    createMpcVaultBody:
      description: The request body to create a vault.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - vault_type
            properties:
              project_id:
                type: string
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
                description: |
                  The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).

                  **Notes:**
                  1. If you set `vault_type` to `OrgControlled`, the value of `project_id` will be ignored.
                  2. If you set `vault_type` to `UserControlled`, then `project_id` is required.
              name:
                type: string
                example: My vault
                description: The vault name.
              vault_type:
                $ref: '#/components/schemas/MPCVaultType'
    updateProjectBody:
      description: The request body to update a project's name.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: New project name
                description: The project's new name.
    updateVaultBody:
      description: The request body to update a vault's name.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The new name of the vault.
                example: The new name of the vault
    updateGroupBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - update_key_share_holder_group_action
            properties:
              update_key_share_holder_group_action:
                $ref: '#/components/schemas/UpdateGroupAction'
    createTransferBody:
      description: The request body to create a transfer transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransferParams'
    createSmartContractCallBody:
      description: The request body for making a contract call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContractCallParams'
    createMessageSignBody:
      description: The request body to create a message signing transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageSignParams'
    estimateFeeBody:
      description: The request body to estimate the transaction fee of a token transfer or a contract call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimateFeeParams'
    feeRequestBody:
      description: The request body to drop or to speed up transactions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRbf'
    resendTransactionBody:
      description: The request body to resend transactions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionResend'
    broadcastTransactionsBody:
      description: The request body to broadcast a list of signed transactions.
      content:
        application/json:
          schema:
            type: object
            properties:
              transaction_ids:
                type: array
                items:
                  type: string
                  example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                description: 'The transaction IDs of the signed transactions to be broadcast. You can retrieve the transactions corresponding to a staking activity by calling [Get staking activity details](https://www.cobo.com/developers/v2/api-references/stakings/get-staking-activity-details).'
    createStakeActivityBody:
      description: The request body to create a staking request.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateStakeActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    createWithdrawActivityBody:
      description: The request body to create a withdraw activity.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateWithdrawActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    createUnstakeActivityBody:
      description: The request body to create a unstaking request.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateUnstakeActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    createClaimActivityBody:
      description: The request body to create a staking request.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CreateClaimActivity'
              - $ref: '#/components/schemas/ActivityInitiator'
    estimateStakeActivityFeeBody:
      description: The request body to get the estimated fee of a staking activity.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/EstimateStakeFee'
              - $ref: '#/components/schemas/EstimateUnstakeFee'
              - $ref: '#/components/schemas/EstimateWithdrawFee'
              - $ref: '#/components/schemas/EstimateClaimFee'
            discriminator:
              propertyName: activity_type
              mapping:
                Stake: '#/components/schemas/EstimateStakeFee'
                Unstake: '#/components/schemas/EstimateUnstakeFee'
                Withdraw: '#/components/schemas/EstimateWithdrawFee'
                Claim: '#/components/schemas/EstimateClaimFee'
    createBabylonStakingRegistrationBody:
      description: The request body to transit Babylon BTC staking to phase 2
      content:
        application/json:
          schema:
            type: object
            properties:
              staking_id:
                description: The ID of the Phase-1 BTC staking position.
                type: string
                example: 3f2840ce-44eb-450b-aa81-d3f84b772efb
              babylon_address:
                $ref: '#/components/schemas/StakingSource'
                description: The Babylon address used for receiving the BABY rewards.
    createBabylonAirdropRegistrationBody:
      description: The request body to register for the Babylon airdrop.
      content:
        application/json:
          schema:
            type: object
            properties:
              btc_address:
                $ref: '#/components/schemas/StakingSource'
                description: The Bitcoin (BTC) address that was used for staking.
              babylon_address:
                $ref: '#/components/schemas/StakingSource'
                description: The Babylon address used to receive the airdrop.
    createWebhookEndpointBody:
      description: The request body to register a webhook endpoint.
      content:
        application/json:
          schema:
            type: object
            required:
              - subscribed_events
              - url
            properties:
              url:
                description: The webhook endpoint URL.
                type: string
                format: url
                example: 'https://example.com/webhook'
              subscribed_events:
                description: |
                  The event types you want to subscribe to for this webhook endpoint. You can call [Get webhook event types](https://www.cobo.com/developers/v2/api-references/developers--webhooks/get-webhook-event-types) to retrieve all available event types.
                items:
                  $ref: '#/components/schemas/WebhookEventType'
                type: array
              description:
                description: The description of the webhook endpoint.
                type: string
                example: My webhook endpoint
    updateWebhookBody:
      description: The request body to update a webhook endpoint.
      content:
        application/json:
          schema:
            type: object
            properties:
              subscribed_events:
                description: 'The new event types you want to subscribe to for this webhook endpoint. You can call [Get webhook event types](https://www.cobo.com/developers/v2/api-references/developers--webhooks/get-webhook-event-types) to retrieve all available event types.'
                items:
                  $ref: '#/components/schemas/WebhookEventType'
                type: array
              status:
                type: string
                enum:
                  - STATUS_INACTIVE
                example: STATUS_INACTIVE
                description: 'The new status you want to set the webhook endpoint to. If you set `status` to `STATUS_INACTIVE`, the endpoint will be revoked, meaning it will no longer receive any webhook events.'
              description:
                description: The webhook endpoint description.
                type: string
                example: My webhook endpoint
    triggerTestEventBody:
      description: 'The request body used to trigger a test webhook event. '
      content:
        application/json:
          schema:
            type: object
            required:
              - event_type
            properties:
              event_type:
                $ref: '#/components/schemas/WebhookEventType'
              override_data:
                type: object
                description: |
                  An object for customization of the webhook event payload. You only need to include the fields you want to customize. 

                  The provided fields must match the webhook event data structure, depending on the specified event type. For a complete introduction of the webhook event data structure, refer to the `data.data` property in the response of [List all webhook events](https://www.cobo.com/developers/v2/api-references/developers--webhooks/list-all-webhook-events).

                  If this property is not provided, a default payload will be returned.
                example:
                  chain_id: ETH
                  transaction_id: Test-transaction-id
    tokenEndpointBody:
      description: The request body for refreshing an Org Access Token.
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              client_id:
                type: string
                description: 'The client ID, a unique identifier to distinguish Cobo Portal Apps. You can get the client ID by retrieving the manifest file after publishing the app.'
                example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
              grant_type:
                type: string
                description: The OAuth grant type. Set the value as `refresh_token`.
                example: refresh_token
              refresh_token:
                type: string
                description: The Refresh Token of the current Org Access Token.
                example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
    permissionTokenExchangeBody:
      description: The request body to acquire an Access Token.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - permission_type
            properties:
              permission_type:
                type: string
                description: Set the value to `payment_orders_payin`.
                example: payment_orders_payin
    permissionTokenRefreshBody:
      description: The request body to refresh the Access Token and the Refresh Token.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refresh_token
            properties:
              refresh_token:
                type: string
                description: The Refresh Token of the current Access Token.
                example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
    createPrimeBrokerUserAddressBody:
      description: The request body to bind addresses to a broker user.
      content:
        application/json:
          schema:
            type: object
            properties:
              addresses:
                type: array
                items:
                  type: object
                  required:
                    - chain_id
                    - address
                  properties:
                    address:
                      type: string
                      description: The wallet address.
                      example: '0x0000000000000000000000000000000000000000'
                    chain_id:
                      type: string
                      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
                      example: ETH
    createSwapActivityBody:
      description: The request body for creating a swap activity.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - wallet_id
              - quote_id
            properties:
              wallet_id:
                type: string
                description: The unique identifier of the wallet to pay.
                example: 123e4567-e89b-12d3-a456-426614174000
              address:
                type: string
                description: The wallet address.
                example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              quote_id:
                type: string
                format: uuid
                description: The unique identifier of the quote.
                example: 123e4567-e89b-12d3-a456-426614174001
              app_initiator:
                type: string
                example: steve@example.com
                description: 'The initiator of the app activity. If you do not specify this property, the WaaS service will automatically designate the API key as the initiator.'
              request_id:
                type: string
                description: The request id of the swap activity.
                example: 123e4567-e89b-12d3-a456-426614174002
              destination:
                $ref: '#/components/schemas/AddressTransferDestination'
                description: The destination of the swap activity. Only required when the swap type is 'Bridge' and the source wallet is not a custodial wallet.
    estimateSwapFeeBody:
      description: The request body for estimating the fee of a swap activity.
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - wallet_id
              - quote_id
            properties:
              wallet_id:
                type: string
                description: The unique identifier of the wallet to pay.
                example: 123e4567-e89b-12d3-a456-426614174000
              address:
                type: string
                description: 'The wallet address, required when the wallet is not a custodial wallet.'
                example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
              quote_id:
                type: string
                format: uuid
                description: The unique identifier of the quote.
                example: 123e4567-e89b-12d3-a456-426614174001
              fee_type:
                $ref: '#/components/schemas/FeeType'
    graphQLRequestBody:
      description: The request body to generate addresses within a specified wallet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GraphQLRequest'
    createMerchantBody:
      description: The request body to create a merchant.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - wallet_id
            properties:
              name:
                type: string
                description: The merchant name.
                example: Merchant A
              wallet_id:
                type: string
                format: uuid
                description: The ID of the wallet linked to the merchant.
                example: 123e4567-e89b-12d3-a456-426614174001
              developer_fee_rate:
                type: string
                description: 'The developer fee rate applied to this merchant. Expressed as a string in decimal format where "0.1" represents 10%. This fee is deducted from the payment amount and only applies to top-up transactions. If you are a merchant (directly serving the payer), you do not need to configure the developer fee rate.'
                example: '0.1'
    updateMerchantBody:
      description: The request body to update a merchant.
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                description: The merchant name.
                example: Merchant B
              developer_fee_rate:
                type: string
                description: 'The developer fee rate applied to this merchant. Expressed as a string in decimal format where "0.1" represents 10%. This fee is deducted from the payment amount and only applies to top-up transactions. If you are a merchant (directly serving the payer), you do not need to configure the developer fee rate.'
                example: '0.1'
    createBankAccountBody:
      description: The request body to register a bank account.
      content:
        application/json:
          schema:
            type: object
            required:
              - info
            properties:
              info:
                type: object
                additionalProperties: true
                description: |
                  JSON-formatted bank account details. The object should include the following fields:
                  - beneficiary_name: Name of the account holder
                  - beneficiary_address: Address of the account holder
                  - account_number: Bank account number
                  - bank_name: Name of the bank
                  - bank_address: Address of the bank
                  - iban: (Optional) International Bank Account Number
                  - swift_or_bic: SWIFT or BIC code of the bank
                example:
                  beneficiary_name: John Doe
                  beneficiary_address: '123 Main St, Anytown, USA'
                  account_number: '4111111111111111'
                  bank_name: ABC Bank
                  bank_address: '456 Bank Ave, Cityville, USA'
                  swift_or_bic: ABCDEFGH
    updateBankAccountBody:
      description: The request body for updating an existing bank account.
      content:
        application/json:
          schema:
            type: object
            required:
              - info
            properties:
              info:
                type: object
                additionalProperties: true
                description: |
                  JSON-formatted bank account details. The object should include the following fields:
                  - beneficiary_name: Name of the account holder
                  - beneficiary_address: Address of the account holder
                  - account_number: Bank account number
                  - bank_name: Name of the bank
                  - bank_address: Address of the bank
                  - iban: (Optional) International Bank Account Number
                  - swift_or_bic: SWIFT or BIC code of the bank
                example:
                  beneficiary_name: John Doe
                  beneficiary_address: '123 Main St, Anytown, USA'
                  account_number: '4111111111111111'
                  bank_name: ABC Bank
                  bank_address: '456 Bank Ave, Cityville, USA'
                  swift_or_bic: ABCDEFGH
    createPaymentOrderBody:
      description: The request body to create a pay-in order.
      content:
        application/json:
          schema:
            type: object
            required:
              - merchant_id
              - token_id
              - order_amount
              - fee_amount
              - psp_order_code
            properties:
              merchant_id:
                type: string
                description: The merchant ID.
                example: '1001'
              token_id:
                type: string
                description: |
                  The ID of the cryptocurrency used for payment. Supported values: 
                    - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
                    - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
                example: ETH_USDT
              currency:
                type: string
                description: |
                  The fiat currency for the base order amount and the developer fee. Currently, only `USD` is supported.

                  If left empty, both `order_amount` and `fee_amount` will be denominated in the cryptocurrency specified by `token_id`
                default: ''
                example: USD
              order_amount:
                type: string
                description: |

                  The base amount of the order, excluding the developer fee (specified in `fee_amount`), in the currency specified by `currency`. If `currency` is not specified, the amount is in the cryptocurrency specified by `token_id`. 

                  Values must be greater than `0` and contain two decimal places. 
                example: '100.00'
              fee_amount:
                type: string
                description: |

                  The developer fee for the order, in the currency specified by `currency`. If `currency` is not specified, the fee is in the cryptocurrency specified by `token_id`.

                  If you are a merchant (directly serving the payer), you do not need to configure the developer fee. The developer fee rate only applies to platforms such as payment service providers (PSPs) that charge fees to their downstream merchants.

                  The developer fee is added to the base amount (`order_amount`) to determine the final charge. For example:
                  - Base amount (`order_amount`): "100.00"
                  - Developer fee (`fee_amount`): "2.00" 
                  - Total charged to customer: "102.00"

                  Values must be greater than 0 and contain two decimal places.
                example: '2.00'
              merchant_order_code:
                type: string
                description: A unique reference code assigned by the merchant to identify this order in their system. The code should have a maximum length of 128 characters.
                example: M20240201001
              psp_order_code:
                type: string
                description: |
                  A unique reference code assigned by you as a developer to identify this order in your system. This code must be unique across all orders in your system. The code should have a maximum length of 128 characters.
                example: P20240201001
              expired_in:
                type: integer
                description: |
                  The number of seconds until the pay-in order expires, counted from when the request is sent. For example, if set to `1800`, the order will expire in 30 minutes. Must be greater than zero and cannot exceed 3 hours (10800 seconds). After expiration:

                  - The order status becomes final and cannot be changed
                  - The `received_token_amount` field will no longer be updated
                  - Funds received after expiration will be categorized as late payments and can only be settled from the developer balance.
                  - A late payment will trigger a `transactionLate` webhook event.
                default: 1800
                example: 1800
              use_dedicated_address:
                type: boolean
                description: |
                  Whether to allocate a dedicated address for this order. 
                  - `true`: A dedicated address will be allocated for this order.
                  - `false`: A shared address from the address pool will be used.
                example: false
    updatePaymentOrderBody:
      description: The request body to update a pay-in order.
      content:
        application/json:
          schema:
            type: object
            required:
              - expired
            properties:
              expired:
                type: boolean
                description: 'Whether to manually expire the order. If set to `true`, the order status will be updated to `Expired`.'
                example: true
    createRefundBody:
      description: The request body to create a refund order.
      content:
        application/json:
          schema:
            type: object
            required:
              - request_id
              - payable_amount
              - token_id
              - refund_type
            properties:
              request_id:
                type: string
                description: The request ID that is used to track a refund request. The request ID is provided by you and must be unique.
                example: 123e4567-e89b-12d3-a456-426614174004
              merchant_id:
                type: string
                description: The merchant ID.
                example: M1001
              payable_amount:
                type: string
                description: The amount to refund in cryptocurrency. The amount must be a positive integer with up to two decimal places.
                example: '0.25'
              to_address:
                type: string
                description: The address where the refunded cryptocurrency will be sent.
                example: '0x9876543210abcdef1234567890abcdef12345678'
              token_id:
                type: string
                description: |
                  The ID of the cryptocurrency used for refund. Supported values: 
                    - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
                    - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
                example: ETH_USDT
              refund_type:
                $ref: '#/components/schemas/RefundType'
              order_id:
                type: string
                description: The ID of the original pay-in order associated with this refund. Use this to track refunds against specific payments.
                example: R20250304-M1001-1001
              charge_merchant_fee:
                type: boolean
                description: |
                  Whether to charge developer fee to the merchant.
                   
                    - `true`: The fee amount (specified in `merchant_fee_amount`) will be deducted from the merchant's balance and added to the developer's balance

                    - `false`: The merchant is not charged any developer fee

                  When enabled, ensure both `merchant_fee_amount` and `merchant_fee_token_id` are properly specified.
                example: false
              merchant_fee_amount:
                type: string
                description: |
                  The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by `merchant_fee_token_id`. Required when `charge_merchant_fee` is `true`. Must be:
                    - A positive integer with up to two decimal places.
                    - Less than the refund amount
                example: '0.01'
              merchant_fee_token_id:
                type: string
                description: |
                  The ID of the cryptocurrency used for the developer fee. It must be the same as `token_id`. Supported values:
                    - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
                    - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
                example: ETH_USDT
    updateRefundBody:
      description: The request body to update a refund order.
      content:
        application/json:
          schema:
            type: object
            required:
              - to_address
            properties:
              to_address:
                type: string
                description: The address where the refunded cryptocurrency will be sent.
                example: '0x9876543210abcdef1234567890abcdef12345678'
    createSettlementBody:
      description: The request body to create a settlement request.
      content:
        application/json:
          schema:
            type: object
            required:
              - request_id
              - settlements
            properties:
              request_id:
                type: string
                description: The request ID that is used to track a settlement request. The request ID is provided by you and must be unique.
                example: SETTLEMENT123
              acquiring_type:
                $ref: '#/components/schemas/AcquiringType'
              payout_channel:
                $ref: '#/components/schemas/PayoutChannel'
              settlement_type:
                $ref: '#/components/schemas/SettlementType'
              settlements:
                type: array
                items:
                  $ref: '#/components/schemas/CreateSettlement'
    createCryptoAddressBody:
      description: The request body to register a crypto address.
      content:
        application/json:
          schema:
            type: object
            required:
              - token_id
              - address
            properties:
              token_id:
                type: string
                description: |
                  The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:
                    - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`
                    - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT`
                example: ETH_USDT
              address:
                type: string
                description: |
                  The blockchain address in its native format. This is the actual destination address where funds will be sent. The address must match the format required by the specified blockchain. For example:
                    - For `SOL_USDC`: Provide a Solana address
                    - For `ETH_USDT`: Provide an Ethereum address
                example: '0xabc123456789def0000000000000000000000000'
              label:
                type: string
                description: A label to help identify the address's purpose.
                example: Main Withdrawal Address
    createForceSweepBody:
      description: The request body for forced sweep.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForcedSweepRequest'
    estimateFeeStationFeeBody:
      description: The information about a Fee Station top-up transaction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeeStationTransfer'
    requestApprovalBody:
      description: The request body to request workflow approval.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestApproval'
    revokeApprovalRequestBody:
      description: The request body to revoke an approval request.
      content:
        application/json:
          schema:
            type: object
            required:
              - initiator_email
            properties:
              initiator_email:
                type: string
                description: The email of the user who requested the approval.
                example: johnsmith@example.com
    tokenizationUpdateAllowlistAddressesBody:
      description: The request body for adding or removing multiple addresses on the allowlist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationUpdateAllowlistAddressesRequest'
    tokenizationUpdateBlocklistAddressesBody:
      description: The request body for adding or removing multiple addresses on the blocklist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationUpdateBlocklistAddressesRequest'
    tokenizationBurnTokenBody:
      description: The request body for burning tokens.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationBurnTokenRequest'
    tokenizationIssueTokenBody:
      description: The request body to issue a new token.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationIssuedTokenRequest'
    tokenizationEstimateFeeBody:
      description: The request body to estimate tokenization operation fee.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationEstimateFeeRequest'
    tokenizationMintTokenBody:
      description: The request body for minting tokens.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationMintTokenRequest'
    tokenizationPauseTokenBody:
      description: The request body for pausing tokens.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationPauseTokenRequest'
    tokenizationUnpauseTokenBody:
      description: The request body for unpausing tokens.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationUnpauseTokenRequest'
    tokenizationAllowlistActivationBody:
      description: The request body for activating or deactivating the allowlist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationAllowlistActivationRequest'
    tokenizationContractCallBody:
      description: The request body for contract call.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationContractCallRequest'
    updateTopUpAddressBody:
      description: The request body to update top-up address.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateTopUpAddress'
    createSweepAddressBody:
      description: The request body to generates a new sweep-to address within a specified wallet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateSweepToAddress'
    createAutoSweepTaskBody:
      description: The request body to create an auto-sweep task.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateAutoSweepTask'
  responses:
    badRequestError:
      description: Bad request. Your request contains malformed syntax or invalid parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    unauthorizedError:
      description: Unauthorized. Please provide valid credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    forbiddenError:
      description: Forbidden. You do not have the permission to access the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notFoundError:
      description: Requested resources not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    tooManyRequestError:
      description: Too many requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    internalServerError:
      description: Internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    serviceUnavailableError:
      description: Unknown internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    getOrgInfoResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrgInfo'
    getChainsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ChainInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getChainByIdResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChainInfo'
    getAssetsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AssetInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokensResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ExtendedTokenInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokenByIdResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExtendedTokenInfo'
    getTokenBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TokenBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAddressBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AddressBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAssetBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SubWalletAssetBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletsResponse:
      description: Successfully listed wallets
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/WalletInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletByIdResponse:
      description: Successful get a wallet info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    createWalletResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWalletInfo'
    updateWalletResponse:
      description: Successfully updated address
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    deleteWalletResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - submitted
            properties:
              submitted:
                type: boolean
                example: true
                description: |
                  Whether the request to delete the wallet has been successfully submitted.
                  - `true`: The request to delete the wallet has been successfully submitted.
                  - `false`: The request to delete the wallet has not been submitted.
    listUtxoResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/UTXO'
              pagination:
                $ref: '#/components/schemas/Pagination'
    lockUtxoResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              executed:
                type: boolean
                example: true
                description: |
                  Whether the locking or unlocking operation has been successfully executed.
                  - `true`: The operation has been successfully executed.
                  - `false`: The operation has not been executed.
    batchCheckUtxoResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/UTXO'
    maxTransferableValueResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MaxTransferableValue'
    getAddressesResponse:
      description: Successfully listed addresses
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AddressInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAddressResponse:
      description: Successfully listed address information
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AddressInfo'
    createAddressResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AddressInfo'
    checkAddressValidityResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - validity
            properties:
              validity:
                type: boolean
                description: |
                  Whether the address is valid.
                  - `true`: The address is valid.
                  - `false`: The address is invalid.
                example: true
    checkAddressesValidityResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - address
                - validity
              properties:
                address:
                  type: string
                  description: The wallet address.
                  example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
                validity:
                  type: boolean
                  description: |
                    Whether the address is valid.
                     - `true`: The address is valid.
                     - `false`: The address is invalid.
                  example: true
    checkAddressChainsValidityResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - chain_id
                - validity
              properties:
                chain_id:
                  type: string
                  description: 'The chain ID, which is the unique identifier of a blockchain.'
                  example: ETH
                validity:
                  type: boolean
                  description: |
                    Whether the address is valid for the specified chain.
                     - `true`: The address is valid.
                     - `false`: The address is invalid.
                  example: true
    checkLoopTransfersResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - validity
              properties:
                address:
                  type: string
                  description: The wallet address.
                  example: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
                is_loop:
                  type: boolean
                  description: |
                    Whether the transaction from the given source to the given destination address can be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.

                    - `true`: The transaction can be executed as a Cobo Loop transfer.
                    - `false`: The transaction cannot be executed as a Cobo Loop transfer.
                  example: false
    refreshAddressBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - submitted
            properties:
              submitted:
                type: boolean
                example: true
                description: |
                  Whether the request to refresh address balances has been successfully submitted.
                  - `true`: The request to refresh address balances has been successfully submitted.
                  - `false`: The request to  refresh address balances has not been submitted.
    createTokenListingRequestResponse:
      description: Successful token listing request submission
      content:
        application/json:
          schema:
            type: object
            required:
              - request_id
            properties:
              request_id:
                type: string
                description: 'The unique identifier for the token listing request. You can use it to track the request status with the [Get token listing request](https://www.cobo.com/developers/v2/api-references/wallets/get-token-listing-request) operation.'
                example: 123e4567e89b12d3a456426614174000
    createKeyShareHolderGroupsResponse:
      description: mpc vault successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
    createMpcProjectResponse:
      description: Successfully created project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    createTssRequestResponse:
      $ref: '#/components/responses/createMpcVaultResponse'
    createMpcVaultResponse:
      description: Successfully created the vault.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getCoboKeyHoldersResponse:
      description: Successfully listed MPC Wallets' key share holder information.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/KeyShareHolder'
    getKeyShareHolderGroupResponse:
      description: Successfully get mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
    getKeyShareHolderGroupsResponse:
      description: Successfully listed key share holder groups.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/KeyShareHolderGroup'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getMpcProjectResponse:
      description: Successfully listed all vaults.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    getMpcProjectsResponse:
      description: Successfully listed all projects.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MPCProject'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTssRequestResponse:
      description: Successfully retrieved TSS request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    getMpcVaultResponse:
      description: Successfully retrieved vault information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getMpcVaultsResponse:
      description: Successfully listed all vaults.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MPCVault'
              pagination:
                $ref: '#/components/schemas/Pagination'
    deleteKeyShareHolderGroupResponse:
      description: Successfully deleted the specified key share holder group.
      content:
        application/json:
          schema:
            type: object
            required:
              - submitted
            properties:
              submitted:
                type: boolean
                example: true
                description: |
                  Whether the request to delete the key share holder group has been successfully submitted.
                  - `true`: The request to delete the key share holder group has been successfully submitted.
                  - `false`: The request to delete the key share holder group has not been submitted.
    putKeyShareHolderGroupResponse:
      description: Successfully modify mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolderGroup'
    putTssRequestResponse:
      description: Successfully modified the TSS request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    putVaultResponse:
      description: Successfully modify mpc vault
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getKeyShareHolderResponse:
      description: Successfully retrieved key share holder information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyShareHolder'
    getKeyShareHoldersResponse:
      description: Successfully retrieved key share holder list
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/KeyShareHolder'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getExchangeSettingsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              description: The information about the supported exchange.
              required:
                - exchange_id
                - supported_trading_account_types
              properties:
                exchange_id:
                  $ref: '#/components/schemas/ExchangeId'
                supported_trading_account_types:
                  type: array
                  description: The supported trading account types of this exchange.
                  items:
                    type: string
                  example:
                    - Spot
                    - Asset
    getChainsByAssetIdResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ChainInfo'
    getSafeWalletDelegatesResponse:
      description: Delegates successfully retrieved.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CoboSafeDelegate'
    getChainFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FeeRate'
            description: |
              The fee rate for the specified chain or token. 

              The `max_priority_fee` in the EIP-1559 fee model and the `max_fee_amount` properties in the fixed fee model represent the recommended values from the chain.
    getTransactionsResponse:
      description: The information about the transactions.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTransactionByIdResponse:
      description: The information about a transaction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionDetail'
    estimateFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimatedFee'
    transactionFeeResponse:
      description: Successful get a transaction detail
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionRequestFee'
    createTransactionRequestResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - request_id
              - transaction_id
              - status
            properties:
              request_id:
                type: string
                description: The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
              transaction_id:
                type: string
                description: The transaction ID.
                example: c986cb3b-1301-412f-9450-13a52c43a95f
              status:
                $ref: '#/components/schemas/TransactionStatus'
    broadcastTransactionsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              required:
                - request_id
                - transaction_id
              properties:
                request_id:
                  type: string
                  description: The request ID that is used to track a transaction request.
                  example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                transaction_id:
                  type: string
                  description: The transaction ID of this broadcast transaction.
                  example: c986cb3b-1301-412f-9450-13a52c43a95f
    getTransactionApprovalDetailResponse:
      description: The information about a transaction approval detail.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionApprovalDetail'
    batchGetTransactionApprovalDetailResponse:
      description: The information about transaction approval detail.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionApprovalDetail'
    listApprovalDetailsResponse:
      description: Details of the transaction approvals.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalDetail'
    getTemplatesResponse:
      description: Successfully retrieved approval templates.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ApprovalTemplate'
    createWebhookEndpointResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
    getWebhookEndpointResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
    listWebhookEndpointsResponse:
      description: Successfully listed of webhook endpoints
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/WebhookEndpoint'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    updateWebhookEndpointResponse:
      description: Update webhook endpoint successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEndpoint'
    listWebhookEventsResponse:
      description: A list of webhook events has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/WebhookEvent'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWebhookEventResponse:
      description: The webhook event information is successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookEvent'
    getWebhookEventDefinitionsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                event_type:
                  $ref: '#/components/schemas/WebhookEventType'
                description:
                  type: string
                  description: The description of the webhook event type.
                  example: Occurs when the transaction status is updated
    retryWebhookEventResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              retried:
                type: boolean
                example: true
                description: Whether the retry request has been successfully sent.
    getWebhookEventLogsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookEventLog'
              pagination:
                $ref: '#/components/schemas/Pagination'
    triggerTestWebhookEventResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              triggered:
                type: boolean
                example: true
                description: |
                  Whether a test webhook event was successfully triggered.
                  - `true`: The test webhook event was successfully triggered.
                  - `false`: The test webhook event could not be triggered.
    listStakingPoolsResponse:
      description: A list of staking pools has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/PoolSummary'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    createActivityResponse:
      description: Successfully created a staking activity.
      content:
        application/json:
          schema:
            type: object
            required:
              - activity_id
            properties:
              activity_id:
                type: string
                description: The activity ID.
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
              staking_id:
                type: string
                description: The ID of the staking position.
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
    stakingsDetailsResponse:
      description: A staking position has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Stakings'
    poolDetailsResponse:
      description: A staking pool has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PoolDetails'
    listStakingsResponse:
      description: A list of staking positions has been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/Stakings'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    listActivitiesResponse:
      description: A list of staking activities have been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/Activity'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    estimateStakingFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/EthStakeEstimatedFee'
              - $ref: '#/components/schemas/BabylonStakeEstimatedFee'
            discriminator:
              propertyName: pool_type
              mapping:
                ETHBeacon: '#/components/schemas/EthStakeEstimatedFee'
                Babylon: '#/components/schemas/BabylonStakeEstimatedFee'
    estimateStakingFeeV2Response:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EthStakeEstimatedFee'
    getBabylonAirdropRegistrationDetailsResponse:
      description: Get airdrop registration details successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BabylonAirdropRegistration'
    listBabylonAirdropRegistrationsResponse:
      description: List of babylon airdrop registrations retrieved successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/BabylonAirdropRegistration'
              pagination:
                $ref: '#/components/schemas/Pagination'
    listBabylonAirdropEligibleResponse:
      description: List of wallets eligible for Babylon airdrop registration
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/BabylonEligibleAirdrop'
              pagination:
                $ref: '#/components/schemas/Pagination'
    createBabylonAirdropRegistrationResponse:
      description: Airdrop registration created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              registration_id:
                type: string
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                description: 'The registration ID, a unique identifier for tracking the airdrop registration request. You can check the registration status with the [Get Babylon airdrop registration details](https://www.cobo.com/developers/v2/api-references/stakings/get-babylon-airdrop-registration-details) operation.'
    getBabylonStakingRegistrationDetailsResponse:
      description: Get babylon staking registration details successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BabylonStakingRegistration'
    listBabylonStakingRegistrationsResponse:
      description: List of babylon staking registrations retrieved successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/BabylonStakingRegistration'
              pagination:
                $ref: '#/components/schemas/Pagination'
    listBabylonStakingEligibleResponse:
      description: List of stakings eligible for Babylon Phase-2 registration
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  description: The babylon staking position eligible for Phase-2 registration.
                  properties:
                    staking_id:
                      type: string
                      example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
                      description: The ID of the Phase-1 BTC staking position.
                    btc_address:
                      $ref: '#/components/schemas/StakingSource'
                      description: The Bitcoin (BTC) address associated with this staking position.
                    babylon_address:
                      $ref: '#/components/schemas/StakingSource'
                      description: The Babylon address used to receive BABY rewards. This property value is `null` if the BTC address is not registered for Babylon Phase-2.
                    staked_amount:
                      type: string
                      example: '1.23456789'
                      description: The current amount of BTC staked.
                    status:
                      $ref: '#/components/schemas/BabylonRegistrationStatus'
              pagination:
                $ref: '#/components/schemas/Pagination'
    createBabylonStakingRegistrationResponse:
      description: Register Babylon BTC staking for phase 2 successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              registration_id:
                type: string
                example: 0011039d-27fb-49ba-b172-6e0aa80e37ec
                description: 'The registration ID, a unique identifier for tracking the Babylon Phase-2 registration request. You can use it with the [Get Babylon Phase-2 registration details operation](https://www.cobo.com/developers/v2/api-references/stakings/get-babylon-phase-2-registration-details) to check the registration status.'
    getTokenResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: The Org Access Token.
                example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
              token_type:
                type: string
                description: 'The type of the tokens, which is Bearer.'
                example: Bearer
              scope:
                type: string
                description: |
                  The scope of the Org Access Token to limit the app's access to the organization's resources. 
                  **Note**: Currently this property value is empty. The scope of the Org Access Token is based on the permissions granted when the app user installs the app.
                example: ''
              expires_in:
                type: integer
                description: The time in seconds in which the Org Access Token expires.
                example: 43199
              refresh_token:
                type: string
                description: 'The Refresh Token, used to obtain a new Org Access Token when the current Org Access Token expires. The expiration time for Refresh Tokens is currently set to 30 days and is subject to change.'
                example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
    refreshTokenResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: The new Org Access Token.
                example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
              token_type:
                type: string
                description: 'The type of the tokens, which is Bearer.'
                example: Bearer
              scope:
                type: string
                description: |
                  The scope of the Org Access Token to limit the app's access to the organization's resources.
                  **Note**: Currently this property value is empty. The scope of the Org Access Token is based on the permissions granted when the app user installs the app.
                example: ''
              expires_in:
                type: integer
                description: The time in seconds in which the new Org Access Token expires.
                example: 43199
              refresh_token:
                type: string
                description: 'The Refresh Token, used to obtain another Org Access Token when the new Org Access Token expires. The expiration time for Refresh Tokens is currently set to 30 days and is subject to change.'
                example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
    oauthErrorResponse:
      description: Unauthorized. Please provide valid credentials.
      content:
        application/json:
          schema:
            type: object
            description: The response of a failed request.
            required:
              - error
              - error_description
            properties:
              error:
                type: string
                description: The error name.
              error_description:
                type: string
                description: The error description.
    permissionTokenResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: The Access Token.
                example: AnCEPEp5Q8qjAOA1Lb6kVd2OlkCyJnMTeMPdLbPOM8cz176Eb5y7EJoUjJJ0vkzz
              token_type:
                type: string
                description: The token type. This is always `Bearer`.
              expires_in:
                type: integer
                description: 'The time in seconds until the Access Token expires. This is always `3600`, indicating the token expires 1 hour after issuance.'
              refresh_token:
                type: string
                description: The Refresh Token. Use it to obtain a new Access Token when the current one expires. The Refresh Token is valid for 7 days.
                example: rK49jI0zt49gsttzscscik15Asmlpu1TdcxqguJJS8B9f6ilJEC0y3PbVqwsEAw5
    createUserAdressResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - pubkey
            properties:
              pubkey:
                type: string
                description: The Cobo Guard's public key.
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
              addresses:
                type: array
                items:
                  type: object
                  required:
                    - chain_id
                    - address
                  properties:
                    address:
                      type: string
                      description: The wallet address.
                      example: '0x0000000000000000000000000000000000000000'
                    chain_id:
                      type: string
                      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
                      example: ETH
    createGuardPubkeyResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - binder_id
            properties:
              binder_id:
                type: string
                description: The binding ID.
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
    deleteGuardPubkeyResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - statement_id
            properties:
              statement_id:
                type: string
                description: The deleted Cobo Guard binding statement ID.
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
    queryGuardPubkeyResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - binder_id
            properties:
              pubkey:
                type: string
                description: The Cobo Guard's public key.
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
              status:
                $ref: '#/components/schemas/GuardPubkeyStatus'
              addresses:
                type: array
                items:
                  type: object
                  required:
                    - chain_id
                    - address
                  properties:
                    address:
                      type: string
                      description: The wallet address.
                      example: '0x0000000000000000000000000000000000000000'
                    chain_id:
                      type: string
                      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
                      example: ETH
    queryApprovalStatementResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                description: The approval statement ID.
                example: '168108513539918'
              user_id:
                type: string
                description: The user ID of the approver.
                example: '168108513539918'
              pubkey:
                type: string
                description: The Cobo Guard public key of the approver.
                example: 96db1b3c68c3a3497bffb7e257a3900b0e86575c968a346a6696d1676fa8c5a6431b46c867134bd5fb8a9b5f787fa0c534d7c7664f1e52c432ce64326cc4cc1d
              status:
                $ref: '#/components/schemas/ApprovalStatementStatus'
    listAddressBooksResponse:
      description: The information about an address book entry.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AddressBook'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getCountriesResponse:
      description: A list of countries supported.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                en:
                  type: string
                  description: The English name of the country.
                  example: Singapore
                zh_hans:
                  type: string
                  description: The simplified Chinese name of the country.
                  example: 新加坡
                code2:
                  type: string
                  description: The 2-letter country code (ISO 3166-1 alpha-2).
                  example: SG
              required:
                - en
                - zh_hans
                - code2
    getTransactionLimitationResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              vasp_list:
                description: A list of virtual asset service providers (VASP) you can select as the transaction source or destination.
                type: array
                items:
                  $ref: '#/components/schemas/Vasp'
              is_threshold_reached:
                type: boolean
                description: |
                  Indicates whether the transaction amount exceeds a predefined threshold. If exceeded, additional information is required when filling Travel Rule details.
                  - `true`: Threshold exceeded.
                  - `false`: Threshold not exceeded.
                example: true
              self_custody_wallet_challenge:
                type: string
                description: |
                  A human-readable, time-sensitive message to be signed by the wallet owner. The message contains key information including the wallet address, a unique nonce, and a timestamp. Signing this message confirms ownership of the wallet and allows the operation to proceed.
                example: |
                  Hi, please sign this message to confirm that you are the owner of this wallet address.
                  The transfer can only proceed after signing.
                  - Address: 0x1234567890abcdef1234567890abcdef12345678
                  - Nonce: b2860f5c9f201a81bc76f33e991c1f24
                  - Timestamp: 1732523887
              connect_wallet_list:
                type: array
                description: A list of self-custody wallet providers you can select as the transaction source or destination.
                items:
                  type: string
                  description: A supported wallet type or integration.
                  example: metamask
    submitTravelRuleInfoResponse:
      description: Successfully submitted the Travel Rule information.
      content:
        application/json:
          schema:
            type: object
            properties:
              submitted:
                type: boolean
                example: true
                description: |
                  Whether the Travel Rule information has been successfully submitted.
                  - `true`: The information has been successfully submitted.
                  - `false`: The information has not been submitted.
    listApiLogsResponse:
      description: The information about API logs.
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - pagination
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ApiLogSummary'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getApiLogDetailsResponse:
      description: The information about an API log.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiLogDetails'
    getApiKeyInfoResponse:
      description: The API key information.
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - curve_type
              - key
              - created_timestamp
              - updated_timestamp
            properties:
              name:
                type: string
                description: The API key name.
                example: my_api_key
              curve_type:
                type: string
                description: |
                  The curve type used for the API key, which determines the cryptographic algorithm for key generation and signing. Possible values include:
                  - `ED25519`: Ed25519
                  - `SECP256K1`: Secp256k1
                enum:
                  - ED25519
                  - SECP256K1
                example: ED25519
              key:
                type: string
                description: The API key value.
                example: 427b06814cca3359bd0e710c1187833b7f052748a3fdf59888fad4ddc4bd379f
              callback_url:
                type: string
                description: The URL of the callback endpoint that receives callback messages triggered by this API key.
                example: 'https://example.com/api/callback'
              valid_ips:
                type: array
                description: (Applicable to permanent API keys only) The list of IP addresses that are allowed to use this API key.
                items:
                  type: string
                  example: 127.0.0.1
              created_timestamp:
                type: integer
                format: int64
                description: 'The time when the API key was registered, in Unix timestamp format, measured in milliseconds.'
                example: 1701396866000
              updated_timestamp:
                type: integer
                format: int64
                description: 'The time when the API key information was last updated, in Unix timestamp format, measured in milliseconds.'
                example: 1701396866000
              expired_timestamp:
                type: integer
                format: int64
                description: 'The time when the API key expires, in Unix timestamp format, measured in milliseconds. For permanent API keys, this property value is `null`.'
                example: 1701396866000
              role_scopes:
                type: array
                description: The list of user roles and wallet scopes associated with the API key.
                items:
                  $ref: '#/components/schemas/RoleScopes'
    listCallbackMessagesResponse:
      description: The information about callback messages.
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - pagination
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/CallbackMessage'
              pagination:
                $ref: '#/components/schemas/Pagination'
    retryCallbackMessageResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              retried:
                type: boolean
                example: true
                description: |
                  Whether the callback message has been successfully resent:
                  - `true`: The callback message has been successfully resent.
                  - `false`: The callback message has not been successfully resent.
    getSwapActivityResponse:
      description: The swap activity details have been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwapActivityDetail'
    listSwapActivitiesResponse:
      description: A list of swap activities have been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/SwapActivity'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    listSwapEnabledTokensResponse:
      description: A list of enabled tokens have been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SwapToken'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getSwapQuoteResponse:
      description: The swap quote has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SwapQuote'
    estimateSwapFeeResponse:
      description: Successfully retrieved the estimated fee for swap activity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimatedFee'
    graphqlResponse:
      description: A staking activity has been successfully retrieved.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GraphQLResponse'
    createMerchantResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Merchant'
    listMerchantResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Merchant'
              pagination:
                $ref: '#/components/schemas/Pagination'
    createBankAccountResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BankAccount'
    listBankAccountsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BankAccount'
    createPaymentOrderResponse:
      $ref: '#/components/responses/getPaymentOrderResponse'
    listPaymentOrdersResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
              pagination:
                $ref: '#/components/schemas/Pagination'
    listPaymentPayersResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  required:
                    - merchant_id
                    - payer_id
                    - developer_fee_rate
                  properties:
                    merchant_id:
                      type: string
                      description: The merchant ID.
                      example: M1001
                    payer_id:
                      type: string
                      description: A unique identifier assigned by Cobo to track and identify individual payers.
                      example: P20250619T0310056d7aa
                    developer_fee_rate:
                      type: string
                      description: The developer fee rate applied to top-up transactions made by this payer. Expressed as a decimal string where "0.1" represents 10%.
                      example: '0.01'
                    created_timestamp:
                      type: integer
                      description: 'The creation time of the payer, represented as a UNIX timestamp in seconds.'
                      example: 1744689600
                    updated_timestamp:
                      type: integer
                      description: 'The last update time of the payer, represented as a UNIX timestamp in seconds.'
                      example: 1744693200
                    transactions:
                      type: array
                      description: An array of top-up transactions associated with this payer.
                      items:
                        $ref: '#/components/schemas/PaymentTransaction'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getPaymentOrderResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
    createRefundResponse:
      description: Refund transaction created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Refund'
    getExchangeRateResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - token_id
              - currency
              - rate
            properties:
              token_id:
                type: string
                description: 'The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`.'
                example: ETH_USDT
              currency:
                type: string
                description: The fiat currency.
                example: USD
              rate:
                type: string
                description: 'The current exchange rate between the specified currency pair. Expressed as the amount of fiat currency per one unit of cryptocurrency. For example, if the cryptocurrency is USDT and the fiat currency is USD, a rate of "0.99" means 1 USDT = 0.99 USD.'
                example: '1.00'
    getSettlementInfoResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              psp_token_balances:
                type: array
                items:
                  $ref: '#/components/schemas/SettlementInfo'
              token_balances:
                type: array
                items:
                  $ref: '#/components/schemas/SettlementInfo'
    getSettlementResponse:
      description: The details of a settlement request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Settlement'
    createSettlementResponse:
      description: The settlement request was successfully created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Settlement'
    listSettlementResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Settlement'
              pagination:
                $ref: '#/components/schemas/Pagination'
    listRefundsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Refund'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getRefundDetailResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Refund'
    getSettlementReqeustDetailResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Settlement'
    listCryptoAddressesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CryptoAddress'
    deleteCryptoAddressResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - crypto_address_id
            properties:
              crypto_address_id:
                type: string
                description: The ID of the deleted crypto address.
                example: addr_ethusdt_20250506T123456_ab12cd
    listSupportedTokensResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SupportedToken'
    getTopUpAddressResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopUpAddress'
    updateTopUpAddressResponse:
      description: Top-up address updated successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopUpAddress'
    listPayerAccountsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PayerAccount'
              pagination:
                $ref: '#/components/schemas/Pagination'
    createForcedSweepResponse:
      description: Forced sweep created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForcedSweep'
    listForcedSweepsResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ForcedSweep'
              pagination:
                $ref: '#/components/schemas/Pagination'
    listSettlementDetailResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SettlementDetail'
              pagination:
                $ref: '#/components/schemas/Pagination'
    listPaymentWalletBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentWalletBalance'
    getPspBalanceResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PspBalance'
    getPayerBalanceByAddressResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PayerBalanceByAddress'
    listMerchantBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/MerchantBalance'
    getFeeStationTokenBalancesResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: object
                  description: The balance information.
                  required:
                    - token_id
                    - balance
                  properties:
                    token_id:
                      type: string
                      description: 'The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).'
                      example: ETH
                    chain_id:
                      type: string
                      description: 'The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).'
                      example: ETH
                    balance:
                      $ref: '#/components/schemas/Balance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getFeeStationEstimationFeeResponse:
      description: The request was successful.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimatedFixedFee'
    getApprovalRequestByIdResponse:
      description: The information about an approval request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApprovalRequestDetail'
    listAppWorkflowsResponse:
      description: A list of approval workflows successfully retrieved
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AppWorkflow'
    listApprovalRequestsResponse:
      description: A list of approval requests have been successfully retrieved.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                items:
                  $ref: '#/components/schemas/ApprovalRequest'
                type: array
              pagination:
                $ref: '#/components/schemas/Pagination'
    requestApprovalResponse:
      description: The request workflow approval was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - approval_id
            properties:
              approval_id:
                type: string
                format: uuid
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                description: The system-generated unique ID of the approval request. You can use this ID to query the approval request status or revoke the request.
    revokeApprovalRequestResponse:
      description: The request workflow approval was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - approval_id
            properties:
              approval_id:
                type: string
                format: uuid
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                description: The system-generated unique ID of the approval request.
              status:
                $ref: '#/components/schemas/ApprovalStatus'
    listTokenizationActivitiesResponse:
      description: Successfully retrieved the list of tokenization activities.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationListActivitiesResponse'
    getTokenizationActivityResponse:
      description: Successfully retrieved Activity details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationActivityInfo'
    estimateTokenizationFeeResponse:
      description: Successfully retrieved the estimated fee for token issuance.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimatedFee'
    getTokenizationAllowlistActivationResponse:
      description: Successfully retrieved the allowlist activation status.
      content:
        application/json:
          schema:
            type: object
            description: The response schema for retrieving the allowlist activation status.
            properties:
              activated:
                type: boolean
                description: Indicates whether the allowlist feature is activated for the token.
                example: true
            required:
              - activated
    getTokenizationInfoResponse:
      description: Successfully retrieved token information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationTokenDetailInfo'
    listTokenizationAllowlistAddressesResponse:
      description: Successfully retrieved addresses on the allowlist.
      content:
        application/json:
          schema:
            type: object
            title: TokenizationAllowlistAddressesResponse
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TokenizationAllowlistAddressNote'
              pagination:
                $ref: '#/components/schemas/Pagination'
            required:
              - data
              - pagination
    listTokenizationBlocklistAddressesResponse:
      description: Successfully retrieved addresses on the blocklist.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TokenizationBlocklistAddressNote'
              pagination:
                $ref: '#/components/schemas/Pagination'
            required:
              - data
              - pagination
    listTokenizationHoldingsResponse:
      description: Successfully retrieved token holdings information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationListHoldingsResponse'
    listTokenizationInfoResponse:
      description: Successful response with the list of token information.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationListTokenInfoResponse'
    tokenizationOperationResponse:
      description: Tokenization operation transaction created successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationOperationResponse'
    listTokenizationSupportedChainsResponse:
      description: Successfully retrieved the list of tokenization supported chains.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenizationListEnabledChainsResponse'
    getSweepToAddressesResponse:
      description: Successfully retrieved sweep-to addresses
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SweepToAddress'
    createSweepToAddressResponse:
      description: Successfully create sweep to addresses
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SweepToAddress'
    createAutoSweepTaskResponse:
      description: Successfully created auto-sweep task.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AutoSweepTask'
    listAutoSweepTasksResponse:
      description: Successfully retrieved auto-sweep tasks
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AutoSweepTask'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAutoSweepTaskResponse:
      description: Information about a auto-sweep task.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AutoSweepTask'
  securitySchemes:
    CoboAuth:
      type: apiKey
      in: header
      name: BIZ-API-KEY
      description: |
        The API key. For more details, refer to [API key](https://www.cobo.com/developers/v2/guides/overview/cobo-auth#api-key).

        In the API playground, enter your [API secret](https://www.cobo.com/developers/v2/guides/overview/cobo-auth#api-secret), and your API key will be accordingly calculated.
    CoboSignature:
      type: apiKey
      in: header
      name: BIZ-API-SIGNATURE
      description: 'This field contains the EDDSA(ED25519) signature, generated using `HTTP_METHOD`, `HTTP_REQUEST_PATH`, `TIMESTAMP`, and `PARAMS`.'
    CoboNonce:
      type: apiKey
      in: header
      name: BIZ-API-NONCE
      description: 'The UNIX EPOCH timestamp when calling the API, in milliseconds.'
    OAuth2:
      type: oauth2
      description: 'The [Org Access Token](https://www.cobo.com/developers/v2/apps/org-access-tokens). Use this authorization method only if you are developing Cobo Portal Apps for installation and use across different organizations.'
      flows:
        authorizationCode:
          authorizationUrl: 'https://auth.cobo.com/authorize'
          tokenUrl: 'https://auth.cobo.com/oauth/token'
          scopes:
            address_book.read: Read address book
            api_key.read: Read API key information
            callback.read: Read callback message
            callback.resend: Resend callback message
            wallet.create: Create wallet
            wallet.read: Read wallet information
            wallet.update: Update wallet information
            wallet.delete: Delete wallet information
            wallet.create_address: Create wallet address
            wallet.manage_utxo: Manage UTXO
            mpc_project.create: Create MPC project
            mpc_project.read: Read MPC project information
            mpc_project.update: Update MPC project information
            mpc_vault.create: Create MPC Vault
            mpc_vault.read: Read MPC Vault information
            mpc_vault.update: Update MPC Vault information
            mpc_key_group.create: Create MPC key group
            mpc_key_group.read: Read MPC key group information
            mpc_key_group.update: Update MPC key group information
            mpc_key_group.delete: Delete MPC key group information
            transaction.read: Read transaction information
            transaction.withdraw: Make withdrawals
            transaction.estimate_fee: Estimate transaction fee
            transaction.contract_call: Initiate contract calls
            transaction.message_sign: Initiate message signings
            transaction.stake: Stake assets
            transaction.unstake: Unstake assets
            transaction.unstake_withdraw: Withdraw unstaked assets
            transaction.manage: Manage ongoing transactions
            transaction.update: Update transaction notes
            travel_rule.read: Read travel rule information
            travel_rule.edit: Edit travel rule information
            webhook.read: Read webhook URLs/events
            webhook.edit: Edit webhook URLs
            webhook.resend: Resend webhook events
            payment_orders_payin.create: Create pay-in order
            payment_orders_payin.read: Read pay-in order information
            payment_orders_payin.update: Update pay-in order
            payment_orders_refund.create: Create payment refund order
            payment_orders_refund.read: Read payment refund order information
            payment_settlement.create: Create payment settlement request
            payment_settlement.read: Read payment settlement request information
            payment_merchant.create: Create payment merchant
            payment_merchant.read: Read payment merchant information
            payment_merchant.update: Update payment merchant
            payment_force_sweep.create: Create payment force sweep request
            payment_force_sweep.read: Read payment force sweep request information
security:
  - CoboAuth: []
